{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/node_modules/@kongponents/kicon/KIcon.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/node_modules/@kongponents/kicon/KIcon.vue","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport icons from './icons'\nconst iconNames = Object.keys(icons)\n\nexport default {\n  name: 'KIcon',\n  props: {\n    /**\n     * Checks for valid icon name<br>\n     * 'back' | 'collapseExpand' | 'gateway' | 'gear' | 'info' | 'portal' | 'search' | 'security' | 'workspaces' | 'workspacesCollapsed' | 'vitals'\n     */\n    icon: {\n      type: String,\n      default: '',\n      validator: function (value) {\n        return iconNames.indexOf(value) !== -1\n      },\n      required: true\n    },\n    /**\n     * Optional - Overrides default height and width with equal value\n     */\n    size: {\n      type: String,\n      default: '24'\n    },\n    /**\n     * Optional - Sets Fill color\n     */\n    color: {\n      type: String,\n      default: null\n    },\n    /**\n     * Optional - Defines viewbox dimensions\n     */\n    viewBox: {\n      type: String,\n      default: '0 0 24 24'\n    }\n  },\n\n  data () {\n    return {\n      isSSR: false\n    }\n  },\n\n  computed: {\n    iconSVG () {\n      return icons[this.icon]\n    },\n    doc () {\n      return new DOMParser().parseFromString(this.iconSVG, 'image/svg+xml')\n    },\n    svg () {\n      return this.doc.getElementsByTagName('svg')[0]\n    },\n    paths () {\n      return this.doc.querySelectorAll('path').length ? Array.from(this.doc.querySelectorAll('path')) : console.warn('(KIcon) Warning: SVG Path not found')\n    },\n    attributes () {\n      if (this.paths) {\n        let attributes = []\n\n        this.paths.forEach(path => {\n          let pathAttributes = {}\n          let attrs = Array.from(path.attributes)\n\n          attrs.forEach((attr) => {\n            const { value, name } = attr\n            const hasPreservedColor = attrs.find(x => x.nodeName === 'id' && x.nodeValue === 'preserveColor')\n\n            if (name === 'fill' && this.color && !hasPreservedColor) {\n              pathAttributes[name] = this.color\n            } else {\n              pathAttributes[name] = value\n            }\n          })\n\n          attributes.push(pathAttributes)\n        })\n\n        return attributes\n      }\n    },\n    width () {\n      return this.svg.getAttribute('width')\n    },\n    height () {\n      return this.svg.getAttribute('height')\n    },\n    setSize () {\n      return this.size || this.svg.getAttribute('width')\n    },\n    viewbox () {\n      return this.viewBox || this.svg.getAttribute('viewBox')\n    }\n  },\n\n  beforeMount () {\n    // Do not render KIcon until client is available\n    this.isSSR = true\n  }\n}\n",{"version":3,"sources":["KIcon.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"KIcon.vue","sourceRoot":"node_modules/@kongponents/kicon","sourcesContent":["<template>\n  <svg\n    v-if=\"isSSR\"\n    :height=\"setSize || height\"\n    :width=\"setSize || width\"\n    :viewBox=\"viewbox\"\n    :class=\"`kong-icon-${icon}`\"\n    class=\"kong-icon\"\n    role=\"img\"\n  >\n    <title>{{ icon }}</title>\n    <g>\n      <path\n        v-for=\"(path, idx) in paths\"\n        :key=\"path.d\"\n        v-bind=\"attributes[idx]\"/>\n    </g>\n  </svg>\n</template>\n\n<script>\nimport icons from './icons'\nconst iconNames = Object.keys(icons)\n\nexport default {\n  name: 'KIcon',\n  props: {\n    /**\n     * Checks for valid icon name<br>\n     * 'back' | 'collapseExpand' | 'gateway' | 'gear' | 'info' | 'portal' | 'search' | 'security' | 'workspaces' | 'workspacesCollapsed' | 'vitals'\n     */\n    icon: {\n      type: String,\n      default: '',\n      validator: function (value) {\n        return iconNames.indexOf(value) !== -1\n      },\n      required: true\n    },\n    /**\n     * Optional - Overrides default height and width with equal value\n     */\n    size: {\n      type: String,\n      default: '24'\n    },\n    /**\n     * Optional - Sets Fill color\n     */\n    color: {\n      type: String,\n      default: null\n    },\n    /**\n     * Optional - Defines viewbox dimensions\n     */\n    viewBox: {\n      type: String,\n      default: '0 0 24 24'\n    }\n  },\n\n  data () {\n    return {\n      isSSR: false\n    }\n  },\n\n  computed: {\n    iconSVG () {\n      return icons[this.icon]\n    },\n    doc () {\n      return new DOMParser().parseFromString(this.iconSVG, 'image/svg+xml')\n    },\n    svg () {\n      return this.doc.getElementsByTagName('svg')[0]\n    },\n    paths () {\n      return this.doc.querySelectorAll('path').length ? Array.from(this.doc.querySelectorAll('path')) : console.warn('(KIcon) Warning: SVG Path not found')\n    },\n    attributes () {\n      if (this.paths) {\n        let attributes = []\n\n        this.paths.forEach(path => {\n          let pathAttributes = {}\n          let attrs = Array.from(path.attributes)\n\n          attrs.forEach((attr) => {\n            const { value, name } = attr\n            const hasPreservedColor = attrs.find(x => x.nodeName === 'id' && x.nodeValue === 'preserveColor')\n\n            if (name === 'fill' && this.color && !hasPreservedColor) {\n              pathAttributes[name] = this.color\n            } else {\n              pathAttributes[name] = value\n            }\n          })\n\n          attributes.push(pathAttributes)\n        })\n\n        return attributes\n      }\n    },\n    width () {\n      return this.svg.getAttribute('width')\n    },\n    height () {\n      return this.svg.getAttribute('height')\n    },\n    setSize () {\n      return this.size || this.svg.getAttribute('width')\n    },\n    viewbox () {\n      return this.viewBox || this.svg.getAttribute('viewBox')\n    }\n  },\n\n  beforeMount () {\n    // Do not render KIcon until client is available\n    this.isSSR = true\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.kong-icon {\n  &.kong-icon-spinner g {\n    transform-box: fill-box;\n    transform-origin: 50% 50%;\n    animation: spin 1.2s infinite linear;\n  }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(1turn); }\n}\n</style>\n"]}]}