{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/components/Breadcrumbs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/components/Breadcrumbs.vue","mtime":1589345220775},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { isValidUuid } from '@/helpers'\n\nexport default {\n  computed: {\n    pageMesh () {\n      return this.$route.params.mesh\n    },\n\n    routes () {\n      // const { query } = this.$router.currentRoute\n\n      const items = []\n\n      this.$route.matched.map(r => {\n        // eslint-disable-next-line no-unused-vars\n        const text = this.calculateRouteText(r)\n        // eslint-disable-next-line no-unused-vars\n        const title = this.calculateRouteTitle(r)\n        const key = (r.redirect !== undefined && r.redirect.name !== undefined) ? r.redirect.name : r.name\n\n        /** this adds the mesh name and url to the breadcrumb chain */\n        if (this.isCurrentRoute(r) && this.pageMesh && this.$route.name !== 'global-overview') {\n          items.push({\n            key: this.pageMesh,\n            to: { name: 'global-overview' },\n            title: 'Global Overview',\n            text: this.pageMesh\n          })\n        }\n\n        if (this.isCurrentRoute(r) && r.meta.parent && r.meta.parent !== 'undefined') {\n          items.push({\n            key: r.meta.parent,\n            to: { name: r.meta.parent },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          })\n        } else if (this.isCurrentRoute(r) && !r.meta.excludeAsBreadcrumb) {\n          items.push({\n            key: key,\n            to: { name: key },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          })\n        } else if (r.meta.parent && r.meta.parent !== 'undefined') {\n          items.push({\n            key: r.meta.parent,\n            to: { name: r.meta.parent },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          })\n        }\n      })\n\n      // the current page the user is on\n      const currentRouteText = this.calculateRouteTextAdvanced(this.$route)\n\n      if (currentRouteText) {\n        items.push({\n          title: currentRouteText,\n          text: currentRouteText\n        })\n      }\n\n      return items\n    },\n\n    hideBreadcrumbs () {\n      return this.$route.query.hide_breadcrumb\n    }\n  },\n\n  methods: {\n    getBreadcrumbItem (key, to, title, text) {\n      return { key, to, title, text }\n    },\n\n    isCurrentRoute (r) {\n      // eslint-disable-next-line no-mixed-operators\n      return r.name &&\n        // eslint-disable-next-line no-mixed-operators\n        r.name === this.$router.currentRoute.name ||\n        r.redirect === this.$router.currentRoute.name\n    },\n\n    calculateRouteFromQuery (q) {\n      const {\n        entity_id: entityId,\n        entity_type: entityType\n      } = q\n\n      if (entityId && entityType) {\n        const resolvedTo = this.$router.resolve({\n          name: `show-${entityType.split('_')[0]}`,\n          params: { id: entityId.split(',')[0] }\n        }).normalizedTo\n\n        const normalized = {\n          ...resolvedTo,\n          meta: {\n            ...resolvedTo.meta\n          }\n        }\n\n        // if there is an entity in the query params, then use it as the\n        // breadcrumb comma separated list with label being the second argument\n        // e.g. ?entity_id=uuid,name&entity_type=\n        let breadcrumb = normalized.params.id.split('-')[0]\n        if (entityId.split(',').length > 1 && entityId.split(',')[1]) {\n          breadcrumb = entityId.split(',')[1]\n        }\n\n        normalized.meta.breadcrumb = breadcrumb\n\n        return [\n          {\n            ...this.getBreadcrumbItem(\n              normalized.name,\n              normalized,\n              this.calculateRouteTitle(normalized),\n              this.calculateRouteText(normalized))\n          }\n        ]\n      }\n    },\n\n    calculateRouteText (route) {\n      // TODO: support child routes that are children of :id to support routes\n      // like /workspaces/:id/services/:id/update\n      if (route.path && route.path.indexOf(':mesh') > -1) {\n        const params = this.$router.currentRoute.params\n\n        return (\n          params && params.mesh && isValidUuid(params.mesh) ? params.mesh.split('-')[0].trim() : params.mesh\n        ) || route.meta.breadcrumb || route.meta.title\n      }\n\n      return (\n        (route.meta && (route.meta.breadcrumb || route.meta.title)) ||\n        route.name\n      ) || route.meta.breadcrumb || route.meta.title\n    },\n\n    calculateRouteTitle (route) {\n      return (\n        (route.params && route.params.mesh) ||\n        (route.path.indexOf(':mesh') > -1 &&\n          this.$router.currentRoute.params &&\n          this.$router.currentRoute.params.mesh)\n      )\n    },\n\n    calculateRouteTextAdvanced (route) {\n      const params = route.params\n      const isMesh = (route.name === 'mesh-overview')\n      const newParams = Object.assign({}, params, { mesh: null })\n\n      if (isMesh) {\n        return params.mesh\n      } else {\n        return Object.values(newParams).filter(x => x)[0]\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Breadcrumbs.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Breadcrumbs.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <Krumbs\n      v-if=\"!hideBreadcrumbs\"\n      :items=\"routes\"\n    />\n  </div>\n</template>\n\n<script>\nimport { isValidUuid } from '@/helpers'\n\nexport default {\n  computed: {\n    pageMesh () {\n      return this.$route.params.mesh\n    },\n\n    routes () {\n      // const { query } = this.$router.currentRoute\n\n      const items = []\n\n      this.$route.matched.map(r => {\n        // eslint-disable-next-line no-unused-vars\n        const text = this.calculateRouteText(r)\n        // eslint-disable-next-line no-unused-vars\n        const title = this.calculateRouteTitle(r)\n        const key = (r.redirect !== undefined && r.redirect.name !== undefined) ? r.redirect.name : r.name\n\n        /** this adds the mesh name and url to the breadcrumb chain */\n        if (this.isCurrentRoute(r) && this.pageMesh && this.$route.name !== 'global-overview') {\n          items.push({\n            key: this.pageMesh,\n            to: { name: 'global-overview' },\n            title: 'Global Overview',\n            text: this.pageMesh\n          })\n        }\n\n        if (this.isCurrentRoute(r) && r.meta.parent && r.meta.parent !== 'undefined') {\n          items.push({\n            key: r.meta.parent,\n            to: { name: r.meta.parent },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          })\n        } else if (this.isCurrentRoute(r) && !r.meta.excludeAsBreadcrumb) {\n          items.push({\n            key: key,\n            to: { name: key },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          })\n        } else if (r.meta.parent && r.meta.parent !== 'undefined') {\n          items.push({\n            key: r.meta.parent,\n            to: { name: r.meta.parent },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          })\n        }\n      })\n\n      // the current page the user is on\n      const currentRouteText = this.calculateRouteTextAdvanced(this.$route)\n\n      if (currentRouteText) {\n        items.push({\n          title: currentRouteText,\n          text: currentRouteText\n        })\n      }\n\n      return items\n    },\n\n    hideBreadcrumbs () {\n      return this.$route.query.hide_breadcrumb\n    }\n  },\n\n  methods: {\n    getBreadcrumbItem (key, to, title, text) {\n      return { key, to, title, text }\n    },\n\n    isCurrentRoute (r) {\n      // eslint-disable-next-line no-mixed-operators\n      return r.name &&\n        // eslint-disable-next-line no-mixed-operators\n        r.name === this.$router.currentRoute.name ||\n        r.redirect === this.$router.currentRoute.name\n    },\n\n    calculateRouteFromQuery (q) {\n      const {\n        entity_id: entityId,\n        entity_type: entityType\n      } = q\n\n      if (entityId && entityType) {\n        const resolvedTo = this.$router.resolve({\n          name: `show-${entityType.split('_')[0]}`,\n          params: { id: entityId.split(',')[0] }\n        }).normalizedTo\n\n        const normalized = {\n          ...resolvedTo,\n          meta: {\n            ...resolvedTo.meta\n          }\n        }\n\n        // if there is an entity in the query params, then use it as the\n        // breadcrumb comma separated list with label being the second argument\n        // e.g. ?entity_id=uuid,name&entity_type=\n        let breadcrumb = normalized.params.id.split('-')[0]\n        if (entityId.split(',').length > 1 && entityId.split(',')[1]) {\n          breadcrumb = entityId.split(',')[1]\n        }\n\n        normalized.meta.breadcrumb = breadcrumb\n\n        return [\n          {\n            ...this.getBreadcrumbItem(\n              normalized.name,\n              normalized,\n              this.calculateRouteTitle(normalized),\n              this.calculateRouteText(normalized))\n          }\n        ]\n      }\n    },\n\n    calculateRouteText (route) {\n      // TODO: support child routes that are children of :id to support routes\n      // like /workspaces/:id/services/:id/update\n      if (route.path && route.path.indexOf(':mesh') > -1) {\n        const params = this.$router.currentRoute.params\n\n        return (\n          params && params.mesh && isValidUuid(params.mesh) ? params.mesh.split('-')[0].trim() : params.mesh\n        ) || route.meta.breadcrumb || route.meta.title\n      }\n\n      return (\n        (route.meta && (route.meta.breadcrumb || route.meta.title)) ||\n        route.name\n      ) || route.meta.breadcrumb || route.meta.title\n    },\n\n    calculateRouteTitle (route) {\n      return (\n        (route.params && route.params.mesh) ||\n        (route.path.indexOf(':mesh') > -1 &&\n          this.$router.currentRoute.params &&\n          this.$router.currentRoute.params.mesh)\n      )\n    },\n\n    calculateRouteTextAdvanced (route) {\n      const params = route.params\n      const isMesh = (route.name === 'mesh-overview')\n      const newParams = Object.assign({}, params, { mesh: null })\n\n      if (isMesh) {\n        return params.mesh\n      } else {\n        return Object.values(newParams).filter(x => x)[0]\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.krumbs {\n  font-size: 14px;\n\n  .krumb-item {\n\n    &:after, a {\n      color: #8c8c8c !important;\n      text-decoration: none;\n    }\n  }\n}\n\n</style>\n"]}]}