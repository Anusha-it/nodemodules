{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/views/Wizard/views/DataplaneUniversal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/views/Wizard/views/DataplaneUniversal.vue","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport updateStorage from '@/views/Wizard/mixins/updateStorage'\nimport FormatForCLI from '@/mixins/FormatForCLI'\nimport FormFragment from '@/views/Wizard/components/FormFragment'\nimport Tabs from '@/components/Utils/Tabs'\nimport StepSkeleton from '@/views/Wizard/components/StepSkeleton'\nimport Switcher from '@/views/Wizard/components/Switcher'\nimport CodeView from '@/components/Skeletons/CodeView'\nimport Scanner from '@/views/Wizard/components/Scanner'\n\n// schema for building code output\n// import meshSchema from '@/views/Wizard/schemas/Mesh'\n\n// schema for building code output (TBD)\nimport dataplaneSchema from '@/views/Wizard/schemas/DataplaneUniversal'\n\nexport default {\n  name: 'DataplaneWizardUniversal',\n  metaInfo: {\n    title: 'Create a new Dataplane on Universal'\n  },\n  components: {\n    FormFragment,\n    Tabs,\n    StepSkeleton,\n    Switcher,\n    CodeView,\n    Scanner\n  },\n  mixins: [\n    FormatForCLI,\n    updateStorage\n  ],\n  data () {\n    return {\n      schema: dataplaneSchema,\n      steps: [\n        {\n          label: 'General',\n          slug: 'general'\n        },\n        {\n          label: 'Topology',\n          slug: 'topology'\n        },\n        {\n          label: 'Networking',\n          slug: 'networking'\n        },\n        {\n          label: 'Install',\n          slug: 'complete'\n        },\n        {\n          label: 'Start',\n          slug: 'start'\n        }\n      ],\n      tabs: [\n        // {\n        //   hash: '#kubernetes',\n        //   title: 'Kubernetes'\n        // }\n        {\n          hash: '#universal',\n          title: 'Universal'\n        }\n      ],\n      sidebarContent: [\n        {\n          name: 'dataplane'\n        },\n        {\n          name: 'example'\n        }\n      ],\n      startScanner: false,\n      scanFound: false,\n      scanError: false,\n      isComplete: false,\n      nextDisabled: true,\n      validate: {\n        meshName: '',\n        univDataplaneType: 'dataplane-type-service',\n        univDataplaneServiceName: '',\n        univDataplaneId: '',\n        univDataplaneCustomIdDisabled: true,\n        univDataplaneNetworkAddress: null,\n        univDataplaneNetworkServicePort: null,\n        univDataplaneNetworkDPPort: null,\n        univDataplaneNetworkProtocol: 'tcp'\n      },\n      vmsg: []\n    }\n  },\n  computed: {\n    ...mapGetters({\n      title: 'getTagline',\n      version: 'getVersion',\n      environment: 'getEnvironment',\n      formData: 'getStoredWizardData',\n      selectedTab: 'getSelectedTab',\n      meshes: 'getMeshList'\n    }),\n\n    randString () {\n      return Math.random().toString(36).substring(2, 8)\n    },\n\n    // Our generated code output\n    codeOutput () {\n      const schema = Object.assign({}, this.schema)\n\n      const {\n        meshName,\n        univDataplaneType,\n        univDataplaneServiceName,\n        univDataplaneId,\n        univDataplaneNetworkAddress,\n        univDataplaneNetworkServicePort,\n        univDataplaneNetworkDPPort,\n        univDataplaneNetworkProtocol\n      } = this.validate\n\n      // if no namespace is set, do nothing\n      if (!meshName) return\n\n      // namespace and mesh association\n      schema.name = univDataplaneId\n      schema.mesh = meshName\n\n      // networking\n      if (univDataplaneType === 'dataplane-type-service') {\n        if (schema.networking.gateway) {\n          delete schema.networking.gateway\n        }\n\n        schema.networking = {\n          address: univDataplaneNetworkAddress,\n          inbound: [\n            {\n              port: univDataplaneNetworkDPPort,\n              servicePort: univDataplaneNetworkServicePort,\n              tags: {\n                service: univDataplaneServiceName,\n                protocol: univDataplaneNetworkProtocol\n              }\n            }\n          ]\n        }\n      } else if (univDataplaneType === 'dataplane-type-gateway') {\n        if (schema.networking.inbound) {\n          delete schema.networking.inbound\n        }\n\n        schema.networking = {\n          address: univDataplaneNetworkAddress,\n          gateway: {\n            tags: {\n              service: univDataplaneServiceName\n            }\n          }\n        }\n      }\n\n      /**\n       * Finalized output\n       */\n\n      const codeClosing = '\" | kumactl apply -f -'\n      const assembledBlock = this.formatForCLI(schema, codeClosing)\n\n      return assembledBlock\n    },\n\n    /**\n     * Part 1 of the last step: Generate the Dataplane Token\n     */\n    generateDpTokenCodeOutput () {\n      const { meshName, univDataplaneId } = this.validate\n\n      const cmdStructure = `kumactl generate dataplane-token --dataplane=${univDataplaneId} > kuma-token-${univDataplaneId}`\n\n      return cmdStructure\n    },\n\n    /**\n     * Part 2 of the last step: Start the Dataplane\n     */\n    startDpCodeOutput () {\n      const cpAddress = this.$store.getters.getConfig.general.advertisedHostname\n      const { meshName, univDataplaneId } = this.validate\n\n      const cmdStructure = `kuma-dp run \\\\\n      --name=${univDataplaneId} \\\\\n      --mesh=${meshName} \\\\\n      --cp-address=${cpAddress} \\\\\n      --dataplane-token-file=kuma-token-${univDataplaneId}`\n\n      return cmdStructure\n    }\n  },\n  watch: {\n    validate: {\n      handler () {\n        const data = JSON.stringify(this.validate)\n        const mesh = this.validate.meshName\n\n        const {\n          univDataplaneServiceName,\n          univDataplaneId,\n          univDataplaneNetworkAddress,\n          univDataplaneNetworkServicePort,\n          univDataplaneNetworkDPPort,\n          univDataplaneNetworkProtocol\n        } = this.validate\n\n        // write the v-model data to localStorage whenever it changes\n        localStorage.setItem('storedFormData', data)\n\n        // allow the user to proceed if they've selected a Mesh\n        mesh.length\n          ? this.nextDisabled = false\n          : this.nextDisabled = true\n\n        // networking field validation\n        if (this.$route.query.step === 2) {\n          if (\n            univDataplaneNetworkAddress &&\n            univDataplaneNetworkServicePort &&\n            univDataplaneNetworkDPPort &&\n            univDataplaneNetworkProtocol\n          ) {\n            this.nextDisabled = false\n          } else {\n            this.nextDisabled = true\n          }\n        }\n\n        // topology field validation\n        if (this.$route.query.step === 1) {\n          if (univDataplaneServiceName && univDataplaneId) {\n            this.nextDisabled = false\n          } else {\n            this.nextDisabled = true\n          }\n        }\n      },\n      deep: true\n    },\n\n    '$route' () {\n      const step = this.$route.query.step\n\n      const {\n        univDataplaneServiceName,\n        univDataplaneId,\n        univDataplaneNetworkAddress,\n        univDataplaneNetworkServicePort,\n        univDataplaneNetworkDPPort,\n        univDataplaneNetworkProtocol\n      } = this.validate\n\n      // topology step field validation\n      if (step === 1) {\n        if (\n          univDataplaneServiceName &&\n            univDataplaneId\n        ) {\n          this.nextDisabled = false\n        } else {\n          this.nextDisabled = true\n        }\n      }\n\n      // network step field validation\n      if (step === 2) {\n        if (\n          univDataplaneNetworkAddress &&\n            univDataplaneNetworkServicePort &&\n            univDataplaneNetworkDPPort &&\n            univDataplaneNetworkProtocol\n        ) {\n          this.nextDisabled = false\n        } else {\n          this.nextDisabled = true\n        }\n      }\n    },\n\n    'validate.univDataplaneId' (value) {\n      const newId = (value)\n        .replace(/[^a-zA-Z0-9 -]/g, '')\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .trim()\n\n      this.validate.univDataplaneId = newId\n    },\n\n    'validate.univDataplaneServiceName' (value) {\n      const newName = (value)\n        .replace(/[^a-zA-Z0-9 -]/g, '')\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .trim()\n\n      const newStr = (`${value}-${this.randString}`)\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .trim()\n\n      this.validate.univDataplaneServiceName = newName\n\n      if (this.validate.univDataplaneServiceName === '') {\n        this.validate.univDataplaneId = ''\n      } else {\n        this.validate.univDataplaneId = newStr\n      }\n    },\n\n    'validate.univDataplaneNetworkServicePort' (value) {\n      const newId = (value)\n        .replace(/[a-zA-Z]*$/g, '')\n        .trim()\n\n      this.validate.univDataplaneNetworkServicePort = newId\n    },\n\n    'validate.univDataplaneNetworkDPPort' (value) {\n      const newId = (value)\n        .replace(/[a-zA-Z]*$/g, '')\n        .trim()\n\n      this.validate.univDataplaneNetworkDPPort = newId\n    }\n  },\n  methods: {\n    scanForEntity () {\n      const { meshName, univDataplaneId } = this.validate\n\n      // reset things if the user is starting over\n      this.scanComplete = false\n      this.scanError = false\n\n      // do nothing if there is no Mesh nor Dataplane found\n      if (!meshName || !univDataplaneId) return\n\n      this.$api.getDataplaneFromMesh(meshName, univDataplaneId)\n        .then(response => {\n          if (response && response.name.length > 0) {\n            this.isRunning = true\n            this.scanFound = true\n          } else {\n            this.scanError = true\n          }\n        })\n        .catch(error => {\n          this.scanError = true\n\n          console.error(error)\n        })\n        .finally(() => {\n          this.scanComplete = true\n        })\n    }\n  }\n}\n",{"version":3,"sources":["DataplaneUniversal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsbfile":"DataplaneUniversal.vue","sourceRoot":"src/views/Wizard/views","sourcesContent":["<template>\n  <div class=\"wizard\">\n    <div class=\"wizard__content\">\n      <StepSkeleton\n        ref=\"stepSystem\"\n        :steps=\"steps\"\n        :advance-check=\"true\"\n        :sidebar-content=\"sidebarContent\"\n        :next-disabled=\"nextDisabled\"\n      >\n        <!-- step content -->\n        <template slot=\"general\">\n          <p>\n            Welcome to the wizard to create a new Dataplane entity in {{ title }}.\n            We will be providing you with a few steps that will get you started.\n          </p>\n          <p>\n            As you know, the Kuma GUI is read-only.\n          </p>\n\n          <!-- wizard switcher -- based on environment -->\n          <Switcher />\n\n          <h3>\n            To get started, please select on what Mesh you would like to add the Dataplane:\n          </h3>\n\n          <p>\n            If you've got an existing Mesh that you would like to associate with your\n            Dataplane, you can select it below, or create a new one using our Mesh Wizard.\n          </p>\n\n          <!-- mesh selection -->\n          <KCard\n            class=\"my-6\"\n            has-shadow\n          >\n            <template slot=\"body\">\n              <FormFragment\n                title=\"Choose a Mesh\"\n                for-attr=\"dp-mesh\"\n                all-inline\n              >\n                <div>\n                  <select\n                    id=\"dp-mesh\"\n                    v-model=\"validate.meshName\"\n                    class=\"k-input w-100\"\n                  >\n                    <option\n                      disabled\n                      value=\"\"\n                    >\n                      Select an existing Mesh&hellip;\n                    </option>\n                    <option\n                      v-for=\"item in meshes.items\"\n                      :key=\"item.name\"\n                      :value=\"item.name\"\n                    >\n                      {{ item.name }}\n                    </option>\n                  </select>\n                </div>\n                <div>\n                  <label class=\"k-input-label mr-4\">\n                    or\n                  </label>\n                  <KButton\n                    :to=\"{ name: 'create-mesh' }\"\n                    appearance=\"primary\"\n                  >\n                    Create a new Mesh\n                  </KButton>\n                </div>\n                <!-- <KAlert\n                  v-if=\"vmsg.meshName\"\n                  appearance=\"danger\"\n                  size=\"small\"\n                  :alert-message=\"vmsg.meshName\"\n                /> -->\n              </FormFragment>\n            </template>\n          </KCard>\n        </template>\n        <template slot=\"topology\">\n          <h3>\n            Setup Dataplane Mode\n          </h3>\n          <p>\n            You can create a data plane for a service or a data plane for an Ingress gateway.\n          </p>\n\n          <!-- dataplane mode -->\n          <FormFragment\n            all-inline\n            equal-cols\n            hide-label-col\n            shift-right\n          >\n            <div>\n              <label for=\"service-dataplane\">\n                <input\n                  id=\"service-dataplane\"\n                  v-model=\"validate.univDataplaneType\"\n                  class=\"k-input\"\n                  type=\"radio\"\n                  name=\"dataplane-type\"\n                  value=\"dataplane-type-service\"\n                  checked\n                >\n                <span>\n                  Service Dataplane\n                </span>\n              </label>\n              <label for=\"gateway-dataplane\">\n                <input\n                  id=\"gateway-dataplane\"\n                  v-model=\"validate.univDataplaneType\"\n                  class=\"k-input\"\n                  type=\"radio\"\n                  name=\"dataplane-type\"\n                  value=\"dataplane-type-gateway\"\n                >\n                <span>\n                  Gateway Dataplane\n                </span>\n              </label>\n            </div>\n          </FormFragment>\n\n          <FormFragment\n            all-inline\n            title=\"Service name\"\n          >\n            <input\n              id=\"service-name\"\n              v-model=\"validate.univDataplaneServiceName\"\n              type=\"text\"\n              class=\"k-input w-100 mr-4\"\n            >\n          </FormFragment>\n          <FormFragment\n            all-inline\n            title=\"Dataplane ID\"\n            for-attr=\"dataplane-id\"\n          >\n            <div>\n              <KPop trigger=\"hover\">\n                <input\n                  id=\"dataplane-id\"\n                  v-model=\"validate.univDataplaneId\"\n                  type=\"text\"\n                  class=\"k-input w-100\"\n                  :disabled=\"validate.univDataplaneCustomIdDisabled\"\n                >\n                <div slot=\"content\">\n                  This is a unique ID for the Dataplane instance.\n                </div>\n              </KPop>\n            </div>\n            <div>\n              <KButton\n                appearance=\"primary\"\n                @click=\"validate.univDataplaneCustomIdDisabled = false\"\n              >\n                Edit\n              </KButton>\n            </div>\n          </FormFragment>\n        </template>\n        <template slot=\"networking\">\n          <h3>\n            Networking\n          </h3>\n          <p>\n            It's time to now configure the networking settings so that the Dataplane\n            can connect to the local service, and other data planes can consume\n            your service.\n          </p>\n          <p>\n            <strong>All fields below are required to proceed.</strong>\n          </p>\n          <FormFragment\n            title=\"Address\"\n            for-attr=\"network-address\"\n          >\n            <KPop trigger=\"hover\">\n              <input\n                id=\"network-address\"\n                v-model=\"validate.univDataplaneNetworkAddress\"\n                placeholder=\"10.0.0.1\"\n                type=\"text\"\n                class=\"k-input w-100\"\n              >\n              <div slot=\"content\">\n                The IP address that other services will use to consume this data plane.\n              </div>\n            </KPop>\n          </FormFragment>\n          <FormFragment\n            title=\"Service Port\"\n            for-attr=\"network-service-port\"\n          >\n            <KPop trigger=\"hover\">\n              <input\n                id=\"network-service-port\"\n                v-model=\"validate.univDataplaneNetworkServicePort\"\n                placeholder=\"0 - 65535\"\n                type=\"text\"\n                class=\"k-input w-100\"\n              >\n              <div slot=\"content\">\n                The port where your service is listening on the machine.\n              </div>\n            </KPop>\n          </FormFragment>\n          <FormFragment\n            title=\"Data plane port\"\n            for-attr=\"network-dataplane-port\"\n          >\n            <KPop trigger=\"hover\">\n              <input\n                id=\"network-dataplane-port\"\n                v-model=\"validate.univDataplaneNetworkDPPort\"\n                placeholder=\"0 - 65535\"\n                type=\"text\"\n                class=\"k-input w-100\"\n              >\n              <div slot=\"content\">\n                The data plane port (that other services will use to consume this service).\n              </div>\n            </KPop>\n          </FormFragment>\n          <FormFragment\n            title=\"Protocol\"\n            for-attr=\"network-dataplane-protocol\"\n          >\n            <KPop trigger=\"hover\">\n              <select\n                id=\"network-dataplane-protocol\"\n                v-model=\"validate.univDataplaneNetworkProtocol\"\n                class=\"k-input w-100\"\n                name=\"network-dataplane-protocol\"\n              >\n                <option\n                  value=\"tcp\"\n                  :selected=\"validate.univDataplaneNetworkProtocol === 'tcp'\"\n                >\n                  TCP\n                </option>\n                <option\n                  value=\"http\"\n                  :selected=\"validate.univDataplaneNetworkProtocol === 'http'\"\n                >\n                  HTTP\n                </option>\n              </select>\n              <div slot=\"content\">\n                The protocol of the service.\n              </div>\n            </KPop>\n          </FormFragment>\n        </template>\n        <template slot=\"complete\">\n          <div v-if=\"validate.meshName\">\n            <div v-if=\"scanFound === false\">\n              <h3>\n                Install a new Dataplane\n              </h3>\n              <p>\n                You can now execute the following commands to automatically inject\n                the sidebar proxy in every Pod, and by doing so creating the Dataplane.\n              </p>\n              <Tabs\n                :loaders=\"false\"\n                :tabs=\"tabs\"\n                :has-border=\"true\"\n                initial-tab-override=\"universal\"\n              >\n                <!-- <template slot=\"kubernetes\">\n                  <CodeView\n                    title=\"Kubernetes\"\n                    copy-button-text=\"Copy Command to Clipboard\"\n                    lang=\"bash\"\n                    :content=\"codeOutput\"\n                  />\n                </template> -->\n                <template slot=\"universal\">\n                  <CodeView\n                    title=\"Universal\"\n                    copy-button-text=\"Copy Command to Clipboard\"\n                    lang=\"bash\"\n                    :content=\"codeOutput\"\n                  />\n                </template>\n              </Tabs>\n            </div>\n            <Scanner\n              :loader-function=\"scanForEntity\"\n              :should-start=\"true\"\n              :has-error=\"scanError\"\n              :can-complete=\"scanFound\"\n            >\n              <!-- loading -->\n              <template slot=\"loading-title\">\n                <h3>Searching&hellip;</h3>\n              </template>\n              <template slot=\"loading-content\">\n                <p>We are looking for your dataplane.</p>\n              </template>\n              <!-- complete -->\n              <template slot=\"complete-title\">\n                <h3>Done!</h3>\n              </template>\n              <template slot=\"complete-content\">\n                <p>\n                  Your Dataplane\n                  <strong v-if=\"validate.univDataplaneId\">\n                    {{ validate.univDataplaneId }}\n                  </strong>\n                  was found!\n                </p>\n                <p>\n                  Proceed to the next step where we will explain how to start\n                  your new Dataplane.\n                </p>\n                <p>\n                  <KButton\n                    appearance=\"primary\"\n                    @click=\"$refs.stepSystem.goToNextStep()\"\n                  >\n                    Start Your Dataplane\n                  </KButton>\n                </p>\n              </template>\n              <!-- error -->\n              <template slot=\"error-title\">\n                <h3>Mesh not found</h3>\n              </template>\n              <template slot=\"error-content\">\n                <p>We were unable to find your mesh.</p>\n              </template>\n            </Scanner>\n          </div>\n          <KAlert\n            v-else\n            appearance=\"danger\"\n          >\n            <template slot=\"alertMessage\">\n              <p>\n                Please return to the first step and make sure to select an\n                existing Mesh, or create a new one.\n              </p>\n            </template>\n          </KAlert>\n        </template>\n        <template slot=\"start\">\n          <div v-if=\"validate.meshName\">\n            <h3>\n              Start your Dataplane\n            </h3>\n            <p>\n              Now that {{ title }} knows that the configured Dataplane will eventually\n              connect to it, it's time to first generate the credentials that will allow\n              the Dataplane to successfully authenticate itself with the control plane,\n              and then finally start the Dataplane process (powered by Envoy).\n            </p>\n            <Tabs\n              :loaders=\"false\"\n              :tabs=\"tabs\"\n              :has-border=\"true\"\n              initial-tab-override=\"universal\"\n            >\n              <template slot=\"universal\">\n                <CodeView\n                  title=\"Generate Dataplane Token\"\n                  copy-button-text=\"Copy Command to Clipboard\"\n                  lang=\"bash\"\n                  :content=\"generateDpTokenCodeOutput\"\n                />\n                <CodeView\n                  title=\"Start Dataplane Process\"\n                  copy-button-text=\"Copy Command to Clipboard\"\n                  lang=\"bash\"\n                  :content=\"startDpCodeOutput\"\n                />\n              </template>\n            </Tabs>\n          </div>\n          <KAlert\n            v-else\n            appearance=\"danger\"\n          >\n            <template slot=\"alertMessage\">\n              <p>\n                Please return to the first step and make sure to select an\n                existing Mesh, or create a new one.\n              </p>\n            </template>\n          </KAlert>\n        </template>\n\n        <!-- sidebar content -->\n        <template slot=\"dataplane\">\n          <h3>Dataplane</h3>\n          <p>\n            In {{ title }}, a Dataplane entity represents a sidebar proxy running\n            alongside one of your services. Dataplanes can be added in any Mesh\n            that you may have created, and in Kubernetes, they will be auto-injected\n            by {{ title }}.\n          </p>\n        </template>\n\n        <template slot=\"example\">\n          <h3>Example</h3>\n          <p>\n            Below is an example of a Dataplane resource output:\n          </p>\n          <code>\n            <pre>type: Dataplane\nmesh: default\nname: dp-echo-1\nnetworking:\n  address: 127.0.0.1\n  inbound:\n  - port: 10000\n    servicePort: 9000\n    tags:\n      service: echo</pre>\n          </code>\n        </template>\n      </StepSkeleton>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport updateStorage from '@/views/Wizard/mixins/updateStorage'\nimport FormatForCLI from '@/mixins/FormatForCLI'\nimport FormFragment from '@/views/Wizard/components/FormFragment'\nimport Tabs from '@/components/Utils/Tabs'\nimport StepSkeleton from '@/views/Wizard/components/StepSkeleton'\nimport Switcher from '@/views/Wizard/components/Switcher'\nimport CodeView from '@/components/Skeletons/CodeView'\nimport Scanner from '@/views/Wizard/components/Scanner'\n\n// schema for building code output\n// import meshSchema from '@/views/Wizard/schemas/Mesh'\n\n// schema for building code output (TBD)\nimport dataplaneSchema from '@/views/Wizard/schemas/DataplaneUniversal'\n\nexport default {\n  name: 'DataplaneWizardUniversal',\n  metaInfo: {\n    title: 'Create a new Dataplane on Universal'\n  },\n  components: {\n    FormFragment,\n    Tabs,\n    StepSkeleton,\n    Switcher,\n    CodeView,\n    Scanner\n  },\n  mixins: [\n    FormatForCLI,\n    updateStorage\n  ],\n  data () {\n    return {\n      schema: dataplaneSchema,\n      steps: [\n        {\n          label: 'General',\n          slug: 'general'\n        },\n        {\n          label: 'Topology',\n          slug: 'topology'\n        },\n        {\n          label: 'Networking',\n          slug: 'networking'\n        },\n        {\n          label: 'Install',\n          slug: 'complete'\n        },\n        {\n          label: 'Start',\n          slug: 'start'\n        }\n      ],\n      tabs: [\n        // {\n        //   hash: '#kubernetes',\n        //   title: 'Kubernetes'\n        // }\n        {\n          hash: '#universal',\n          title: 'Universal'\n        }\n      ],\n      sidebarContent: [\n        {\n          name: 'dataplane'\n        },\n        {\n          name: 'example'\n        }\n      ],\n      startScanner: false,\n      scanFound: false,\n      scanError: false,\n      isComplete: false,\n      nextDisabled: true,\n      validate: {\n        meshName: '',\n        univDataplaneType: 'dataplane-type-service',\n        univDataplaneServiceName: '',\n        univDataplaneId: '',\n        univDataplaneCustomIdDisabled: true,\n        univDataplaneNetworkAddress: null,\n        univDataplaneNetworkServicePort: null,\n        univDataplaneNetworkDPPort: null,\n        univDataplaneNetworkProtocol: 'tcp'\n      },\n      vmsg: []\n    }\n  },\n  computed: {\n    ...mapGetters({\n      title: 'getTagline',\n      version: 'getVersion',\n      environment: 'getEnvironment',\n      formData: 'getStoredWizardData',\n      selectedTab: 'getSelectedTab',\n      meshes: 'getMeshList'\n    }),\n\n    randString () {\n      return Math.random().toString(36).substring(2, 8)\n    },\n\n    // Our generated code output\n    codeOutput () {\n      const schema = Object.assign({}, this.schema)\n\n      const {\n        meshName,\n        univDataplaneType,\n        univDataplaneServiceName,\n        univDataplaneId,\n        univDataplaneNetworkAddress,\n        univDataplaneNetworkServicePort,\n        univDataplaneNetworkDPPort,\n        univDataplaneNetworkProtocol\n      } = this.validate\n\n      // if no namespace is set, do nothing\n      if (!meshName) return\n\n      // namespace and mesh association\n      schema.name = univDataplaneId\n      schema.mesh = meshName\n\n      // networking\n      if (univDataplaneType === 'dataplane-type-service') {\n        if (schema.networking.gateway) {\n          delete schema.networking.gateway\n        }\n\n        schema.networking = {\n          address: univDataplaneNetworkAddress,\n          inbound: [\n            {\n              port: univDataplaneNetworkDPPort,\n              servicePort: univDataplaneNetworkServicePort,\n              tags: {\n                service: univDataplaneServiceName,\n                protocol: univDataplaneNetworkProtocol\n              }\n            }\n          ]\n        }\n      } else if (univDataplaneType === 'dataplane-type-gateway') {\n        if (schema.networking.inbound) {\n          delete schema.networking.inbound\n        }\n\n        schema.networking = {\n          address: univDataplaneNetworkAddress,\n          gateway: {\n            tags: {\n              service: univDataplaneServiceName\n            }\n          }\n        }\n      }\n\n      /**\n       * Finalized output\n       */\n\n      const codeClosing = '\" | kumactl apply -f -'\n      const assembledBlock = this.formatForCLI(schema, codeClosing)\n\n      return assembledBlock\n    },\n\n    /**\n     * Part 1 of the last step: Generate the Dataplane Token\n     */\n    generateDpTokenCodeOutput () {\n      const { meshName, univDataplaneId } = this.validate\n\n      const cmdStructure = `kumactl generate dataplane-token --dataplane=${univDataplaneId} > kuma-token-${univDataplaneId}`\n\n      return cmdStructure\n    },\n\n    /**\n     * Part 2 of the last step: Start the Dataplane\n     */\n    startDpCodeOutput () {\n      const cpAddress = this.$store.getters.getConfig.general.advertisedHostname\n      const { meshName, univDataplaneId } = this.validate\n\n      const cmdStructure = `kuma-dp run \\\\\n      --name=${univDataplaneId} \\\\\n      --mesh=${meshName} \\\\\n      --cp-address=${cpAddress} \\\\\n      --dataplane-token-file=kuma-token-${univDataplaneId}`\n\n      return cmdStructure\n    }\n  },\n  watch: {\n    validate: {\n      handler () {\n        const data = JSON.stringify(this.validate)\n        const mesh = this.validate.meshName\n\n        const {\n          univDataplaneServiceName,\n          univDataplaneId,\n          univDataplaneNetworkAddress,\n          univDataplaneNetworkServicePort,\n          univDataplaneNetworkDPPort,\n          univDataplaneNetworkProtocol\n        } = this.validate\n\n        // write the v-model data to localStorage whenever it changes\n        localStorage.setItem('storedFormData', data)\n\n        // allow the user to proceed if they've selected a Mesh\n        mesh.length\n          ? this.nextDisabled = false\n          : this.nextDisabled = true\n\n        // networking field validation\n        if (this.$route.query.step === 2) {\n          if (\n            univDataplaneNetworkAddress &&\n            univDataplaneNetworkServicePort &&\n            univDataplaneNetworkDPPort &&\n            univDataplaneNetworkProtocol\n          ) {\n            this.nextDisabled = false\n          } else {\n            this.nextDisabled = true\n          }\n        }\n\n        // topology field validation\n        if (this.$route.query.step === 1) {\n          if (univDataplaneServiceName && univDataplaneId) {\n            this.nextDisabled = false\n          } else {\n            this.nextDisabled = true\n          }\n        }\n      },\n      deep: true\n    },\n\n    '$route' () {\n      const step = this.$route.query.step\n\n      const {\n        univDataplaneServiceName,\n        univDataplaneId,\n        univDataplaneNetworkAddress,\n        univDataplaneNetworkServicePort,\n        univDataplaneNetworkDPPort,\n        univDataplaneNetworkProtocol\n      } = this.validate\n\n      // topology step field validation\n      if (step === 1) {\n        if (\n          univDataplaneServiceName &&\n            univDataplaneId\n        ) {\n          this.nextDisabled = false\n        } else {\n          this.nextDisabled = true\n        }\n      }\n\n      // network step field validation\n      if (step === 2) {\n        if (\n          univDataplaneNetworkAddress &&\n            univDataplaneNetworkServicePort &&\n            univDataplaneNetworkDPPort &&\n            univDataplaneNetworkProtocol\n        ) {\n          this.nextDisabled = false\n        } else {\n          this.nextDisabled = true\n        }\n      }\n    },\n\n    'validate.univDataplaneId' (value) {\n      const newId = (value)\n        .replace(/[^a-zA-Z0-9 -]/g, '')\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .trim()\n\n      this.validate.univDataplaneId = newId\n    },\n\n    'validate.univDataplaneServiceName' (value) {\n      const newName = (value)\n        .replace(/[^a-zA-Z0-9 -]/g, '')\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .trim()\n\n      const newStr = (`${value}-${this.randString}`)\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .trim()\n\n      this.validate.univDataplaneServiceName = newName\n\n      if (this.validate.univDataplaneServiceName === '') {\n        this.validate.univDataplaneId = ''\n      } else {\n        this.validate.univDataplaneId = newStr\n      }\n    },\n\n    'validate.univDataplaneNetworkServicePort' (value) {\n      const newId = (value)\n        .replace(/[a-zA-Z]*$/g, '')\n        .trim()\n\n      this.validate.univDataplaneNetworkServicePort = newId\n    },\n\n    'validate.univDataplaneNetworkDPPort' (value) {\n      const newId = (value)\n        .replace(/[a-zA-Z]*$/g, '')\n        .trim()\n\n      this.validate.univDataplaneNetworkDPPort = newId\n    }\n  },\n  methods: {\n    scanForEntity () {\n      const { meshName, univDataplaneId } = this.validate\n\n      // reset things if the user is starting over\n      this.scanComplete = false\n      this.scanError = false\n\n      // do nothing if there is no Mesh nor Dataplane found\n      if (!meshName || !univDataplaneId) return\n\n      this.$api.getDataplaneFromMesh(meshName, univDataplaneId)\n        .then(response => {\n          if (response && response.name.length > 0) {\n            this.isRunning = true\n            this.scanFound = true\n          } else {\n            this.scanError = true\n          }\n        })\n        .catch(error => {\n          this.scanError = true\n\n          console.error(error)\n        })\n        .finally(() => {\n          this.scanComplete = true\n        })\n    }\n  }\n}\n</script>\n"]}]}