{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/views/Overview.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/views/Overview.vue","mtime":1589612269046},{"path":"/Users/ksagar/vueproj/sample/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.nopadding {\n  padding: 0;\n}\n\n.floatleft {\n  float: left;\n  margin: 2%;\n}\n.floatright {\n  float: right;\n  margin :2%;\n}\n.fullscreen {\n  height: 100%;\n  position: relative;\n}\n.fullscreen .header {\n  position: absolute;\n  bottom: 0;\n  text-align: center;\n  width: 100%;\n  color: #fff;\n  text-shadow: 0px 0px 2px #000;\n}\n#header {\n  background: rgba(255, 255, 255, .5);\n  padding: 60%;\n  border-spacing: 75px;\n  overflow: hidden;\n  height: 55px;\n  margin-bottom: 30px;\n  color: white;\n  background-image: url(\"./network.jpg\");\n}\n#header img {\n  float: left;\n  box-shadow: none;\n}\n#header ul {\n  list-style: none;\n  float: left;\n  padding-left: 10px;\n  margin-top: 15px;\n}\n#header ul li {\n  float: left;\n  margin-left: 10px;\n  font-size: 20px;\n}\n.nopadding {\n  padding: 0;\n}\n.white {\n  background: #eeeeec;\n  padding: 0;\n  background-size:100% 100%;\n}\n.more {\n  text-align: center;\n  font-size: 17px;\n}\n.more a {\n  color: #aaa;\n  text-decoration: none;\n  cursor: pointer;\n}\n.more a:hover {\n  color: #777;\n}\nhtml {\n background-image: url(\"./network1.gif\");\n  background-size: 100%;\n}\n.empty-state-title {\n\n  .card-icon {\n    text-align: center;\n\n    img, svg {\n      display: block;\n      margin-left: auto;\n      margin-right: auto;\n    }\n  }\n}\n",{"version":3,"sources":["Overview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0XA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Overview.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div\n    class=\"overview\"\n  >\n    <div class=\"white fullscreen nopadding\" style=\"background-size:100% 100%;\">\n      <page-header noflex>\n        <breadcrumbs />\n        <h2 class=\"xxl\">\n          {{ this.$route.meta.title }}\n        </h2>\n      </page-header>\n      <div\n        slot=\"NavMenu\"\n        :is-collapsed=\"isCollapsed\"\n        :class=\"{ 'is-hovering': hovering }\"\n        class=\"menu-container\"\n      >\n        <MeshSelector :items=\"meshList\" />\n        <SidebarMenu\n          v-for=\"(menu, i) in menuList.sections\"\n          :key=\"i\"\n          :menu=\"menu\"\n          :trigger-hovering=\"isHovering\"\n          :index=\"i\"\n          :is-last=\"i === lastMenuList\"\n        />\n        <CollapseToggle\n          :handle-toggle-collapse=\"handleToggleCollapse\"\n        />\n      </div>\n      <!-- metrics boxes -->\n    <div class=\"md:grid md:grid-cols-3 md:gap-4 -mx-4\">\n      <CardSkeleton\n        class=\"mx-4\"\n        :card-action-route=\"dataplaneWizardRoute\"\n        card-title=\"Create A Dataplane\"\n        card-action-button-text=\"Start Now\"\n      >\n        <template slot=\"cardContent\">\n          <p class=\"lg\">\n            Create a new Dataplane here.\n          </p>\n        </template>\n      </CardSkeleton>\n    </div>\n\n    <FrameSkeleton>\n      <DataOverview\n        :has-error=\"hasError\"\n        :is-loading=\"isLoading\"\n        :is-empty=\"isEmpty\"\n        :empty-state=\"empty_state\"\n        :display-data-table=\"true\"\n        :table-data=\"tableData\"\n        :table-data-is-empty=\"tableDataIsEmpty\"\n        @reloadData=\"loadData\"\n      >\n        <template slot=\"pagination\">\n          <Pagination\n            :has-previous=\"previous.length > 0\"\n            :has-next=\"hasNext\"\n            @next=\"goToNextPage\"\n            @previous=\"goToPreviousPage\"\n          />\n        </template>\n      </DataOverview>\n    </FrameSkeleton>\n  </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapMutations, mapState } from 'vuex'\nimport { getOffset } from '@/helpers'\nimport FrameSkeleton from '@/components/Skeletons/FrameSkeleton'\nimport Pagination from '@/components/Pagination'\nimport PageHeader from '@/components/Utils/PageHeader.vue'\nimport Breadcrumbs from '@/components/Breadcrumbs.vue'\n// import MetricGrid from '@/components/Metrics/MetricGrid.vue'\nimport DataOverview from '@/components/Skeletons/DataOverview.vue'\nimport CardSkeleton from '@/components/Skeletons/CardSkeleton'\n// import KNav from '@/components/Sidebar/KNav'\nimport SidebarMenu from '@/components/Sidebar/SidebarMenu'\nimport CollapseToggle from '@/components/Sidebar/CollapseToggle'\nimport MeshSelector from '@/components/Utils/MeshSelector'\nimport { getItemFromStorage, setItemToStorage } from '@/Cache'\n\nexport default {\n  name: 'Overview',\n  metaInfo () {\n    return {\n      title: this.$route.meta.title\n    }\n  },\n  components: {\n    FrameSkeleton,\n    Pagination,\n    PageHeader,\n    Breadcrumbs,\n    // MetricGrid,\n    DataOverview,\n    CardSkeleton,\n    SidebarMenu,\n    CollapseToggle,\n    MeshSelector\n  },\n  data () {\n    return {\n      isCollapsed: false,\n      sidebarSavedState: null,\n      toggleWorkspaces: false,\n      hovering: false,\n      isLoading: true,\n      isEmpty: false,\n      hasError: false,\n      tableDataIsEmpty: false,\n      empty_state: {\n        title: 'No Data',\n        message: 'There are no Meshes present.'\n      },\n      tableData: {\n        headers: [\n          { label: 'Mesh', key: 'name' },\n          { label: 'Online Dataplanes', key: 'onlineDpCount' }\n        ],\n        data: []\n      },\n      pageSize: 10,\n      pageOffset: null,\n      next: null,\n      hasNext: false,\n      previous: []\n    }\n  },\n  computed: {\n    ...mapGetters({\n      title: 'getTagline',\n      dpList: 'getDataplanesList',\n      environment: 'getEnvironment'\n    }),\n    ...mapState('sidebar', {\n      menu: state => state.menu\n    }),\n    /**\n     * Main property for items in the sidebar menu. Filters out menu.js items by\n     * RBAC permissions and fetches Kong Admin Plugin routes\n     * @returns {{sections:Array<MenuItem>}}\n     */\n    menuList () {\n      // get routes allowed by rbac\n      // const routes = this.$rbac.filterRoutes(this.perms, this.$router.allRoutes,\n      //   this.currentWorkspace && this.currentWorkspace.name)\n      // const routes = this.$router.allRoutes\n      const filteredMenu = JSON.parse(JSON.stringify(this.menu))\n\n      return filteredMenu\n    },\n    lastMenuList () {\n      return Object.keys(this.menuList.sections).length - 1\n    },\n    meshList () {\n      return this.$store.state.meshes\n    },\n    overviewMetrics () {\n      return [\n        {\n          metric: 'Meshes',\n          value: this.$store.state.totalMeshCount\n        },\n        {\n          metric: 'Dataplanes',\n          value: this.$store.state.totalDataplaneCount\n        },\n        {\n          metric: 'Health Checks',\n          value: this.$store.state.totalHealthCheckCount\n        },\n        {\n          metric: 'Proxy Templates',\n          value: this.$store.state.totalProxyTemplateCount\n        },\n        {\n          metric: 'Traffic Logs',\n          value: this.$store.state.totalTrafficLogCount\n        },\n        {\n          metric: 'Traffic Permissions',\n          value: this.$store.state.totalTrafficPermissionCount\n        },\n        {\n          metric: 'Traffic Routes',\n          value: this.$store.state.totalTrafficRouteCount\n        },\n        {\n          metric: 'Traffic Traces',\n          value: this.$store.state.totalTrafficTraceCount\n        },\n        {\n          metric: 'Fault Injections',\n          value: this.$store.state.totalFaultInjectionCount\n        }\n      ]\n    },\n    dataplaneWizardRoute () {\n      // we change the route to the Dataplane\n      // wizard based on environment.\n      if (this.environment === 'universal') {\n        return { name: 'universal-dataplane' }\n      } else {\n        return { name: 'kubernetes-dataplane' }\n      }\n    }\n  },\n\n  watch: {\n    '$route' (to, from) {\n      this.init()\n    }\n  },\n  mounted () {\n    const sidebarState = getItemFromStorage('sidebarCollapsed')\n    if (document.documentElement.clientWidth <= 900) {\n      this.isCollapsed = true\n    } else {\n      this.isCollapsed = sidebarState || false\n    }\n\n    window.addEventListener('resize', this.handleResize)\n  },\n  beforeDestroy () {\n    window.removeEventListener('resize', this.handleResize)\n  },\n  beforeMount () {\n    this.init()\n  },\n  methods: {\n    init () {\n      this.getCounts()\n      this.loadData()\n    },\n    ...mapMutations('sidebar', [\n      'setMenu'\n    ]),\n    handleToggleCollapse () {\n      this.isCollapsed = !this.isCollapsed\n      this.setCollapsedState(this.isCollapsed)\n    },\n    isHovering (a) {\n      this.hovering = a\n    },\n    setCollapsedState (collapsedState) {\n      setItemToStorage('sidebarCollapsed', collapsedState)\n    },\n    handleResize () {\n      const sidebarState = getItemFromStorage('sidebarCollapsed')\n      if (document.documentElement.clientWidth <= 900) {\n        this.isCollapsed = sidebarState || true\n      }\n\n      if (document.documentElement.clientWidth >= 900) {\n        this.isCollapsed = sidebarState || false\n      }\n    },\n    goToPreviousPage () {\n      this.pageOffset = this.previous.pop()\n      this.next = null\n\n      this.loadData()\n    },\n    goToNextPage () {\n      this.previous.push(this.pageOffset)\n      this.pageOffset = this.next\n      this.next = null\n\n      this.loadData()\n    },\n    getCounts () {\n      // total Mesh count\n      this.$store.dispatch('getMeshTotalCount')\n\n      // total Dataplane count\n      this.$store.dispatch('getDataplaneTotalCount')\n\n      // total Health Check count\n      this.$store.dispatch('getHealthCheckTotalCount')\n\n      // total Proxy Template count\n      this.$store.dispatch('getProxyTemplateTotalCount')\n\n      // total Traffic Log count\n      this.$store.dispatch('getTrafficLogTotalCount')\n\n      // total Traffic Permission count\n      this.$store.dispatch('getTrafficPermissionTotalCount')\n\n      // total Traffic Route count\n      this.$store.dispatch('getTrafficRouteTotalCount')\n\n      // total Traffic Trace count\n      this.$store.dispatch('getTrafficTraceTotalCount')\n\n      // total Fault Injection count\n      this.$store.dispatch('getFaultInjectionTotalCount')\n    },\n    loadData () {\n      this.isLoading = true\n      this.isEmpty = false\n\n      // prepare and populate the table data\n      const getMeshData = () => {\n        this.$store.dispatch('getAllDataplanes')\n        const dpList = this.dpList\n\n        const params = {\n          size: this.pageSize,\n          offset: this.pageOffset\n        }\n\n        return this.$api.getAllMeshes(params)\n          .then(response => {\n            const items = response.items\n            const itemStatus = []\n\n            // check to see if the `next` url is present\n            if (response.next) {\n              this.next = getOffset(response.next)\n              this.hasNext = true\n            } else {\n              this.hasNext = false\n            }\n\n            for (let i = 0; i < items.length; i++) {\n              const mesh = items[i].name\n\n              const dpStatus = () => {\n                const totalDpInMesh = dpList.filter(x => x.mesh === mesh).length\n                const onlineDpCount = dpList.filter(x => x.status === 'Online' && x.mesh === mesh).length\n\n                if (totalDpInMesh === 0) {\n                  return 'No Dataplanes'\n                }\n\n                return `${onlineDpCount} of ${totalDpInMesh}`\n              }\n\n              itemStatus.push({\n                name: mesh,\n                onlineDpCount: dpStatus()\n              })\n            }\n\n            if (items && items.length) {\n              this.tableData.data = [...itemStatus]\n              this.tableDataIsEmpty = false\n            } else {\n              this.tableData.data = []\n              this.tableDataIsEmpty = true\n            }\n          })\n          .catch(error => {\n            this.hasError = true\n\n            console.error(error)\n          })\n          .finally(() => {\n            setTimeout(() => {\n              this.isLoading = false\n            }, process.env.VUE_APP_DATA_TIMEOUT)\n          })\n      }\n\n      getMeshData()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.nopadding {\n  padding: 0;\n}\n\n.floatleft {\n  float: left;\n  margin: 2%;\n}\n.floatright {\n  float: right;\n  margin :2%;\n}\n.fullscreen {\n  height: 100%;\n  position: relative;\n}\n.fullscreen .header {\n  position: absolute;\n  bottom: 0;\n  text-align: center;\n  width: 100%;\n  color: #fff;\n  text-shadow: 0px 0px 2px #000;\n}\n#header {\n  background: rgba(255, 255, 255, .5);\n  padding: 60%;\n  border-spacing: 75px;\n  overflow: hidden;\n  height: 55px;\n  margin-bottom: 30px;\n  color: white;\n  background-image: url(\"./network.jpg\");\n}\n#header img {\n  float: left;\n  box-shadow: none;\n}\n#header ul {\n  list-style: none;\n  float: left;\n  padding-left: 10px;\n  margin-top: 15px;\n}\n#header ul li {\n  float: left;\n  margin-left: 10px;\n  font-size: 20px;\n}\n.nopadding {\n  padding: 0;\n}\n.white {\n  background: #eeeeec;\n  padding: 0;\n  background-size:100% 100%;\n}\n.more {\n  text-align: center;\n  font-size: 17px;\n}\n.more a {\n  color: #aaa;\n  text-decoration: none;\n  cursor: pointer;\n}\n.more a:hover {\n  color: #777;\n}\nhtml {\n background-image: url(\"./network1.gif\");\n  background-size: 100%;\n}\n.empty-state-title {\n\n  .card-icon {\n    text-align: center;\n\n    img, svg {\n      display: block;\n      margin-left: auto;\n      margin-right: auto;\n    }\n  }\n}\n</style>\n"]}]}