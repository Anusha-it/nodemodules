{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/views/Wizard/views/DataplaneKubernetes.vue?vue&type=template&id=806938a6&scoped=true&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/views/Wizard/views/DataplaneKubernetes.vue","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"wizard\" }, [\n    _c(\n      \"div\",\n      { staticClass: \"wizard__content\" },\n      [\n        _c(\n          \"StepSkeleton\",\n          {\n            attrs: {\n              steps: _vm.steps,\n              \"advance-check\": true,\n              \"sidebar-content\": _vm.sidebarContent,\n              \"footer-enabled\": _vm.scanFound === false,\n              \"next-disabled\": _vm.nextDisabled\n            }\n          },\n          [\n            _c(\n              \"template\",\n              { slot: \"general\" },\n              [\n                _c(\"p\", [\n                  _vm._v(\n                    \"\\n          Welcome to the wizard to create a new Dataplane entity in \" +\n                      _vm._s(_vm.title) +\n                      \".\\n          We will be providing you with a few steps that will get you started.\\n        \"\n                  )\n                ]),\n                _c(\"p\", [\n                  _vm._v(\n                    \"\\n          As you know, the Kuma GUI is read-only.\\n        \"\n                  )\n                ]),\n                _c(\"Switcher\"),\n                _c(\"h3\", [\n                  _vm._v(\n                    \"\\n          To get started, please select on what Mesh you would like to add the Dataplane:\\n        \"\n                  )\n                ]),\n                _c(\"p\", [\n                  _vm._v(\n                    \"\\n          If you've got an existing Mesh that you would like to associate with your\\n          Dataplane, you can select it below, or create a new one using our Mesh Wizard.\\n        \"\n                  )\n                ]),\n                _c(\n                  \"KCard\",\n                  { staticClass: \"my-6\", attrs: { \"has-shadow\": \"\" } },\n                  [\n                    _c(\n                      \"template\",\n                      { slot: \"body\" },\n                      [\n                        _c(\n                          \"FormFragment\",\n                          {\n                            attrs: {\n                              title: \"Choose a Mesh\",\n                              \"for-attr\": \"dp-mesh\",\n                              \"all-inline\": \"\"\n                            }\n                          },\n                          [\n                            _c(\"div\", [\n                              _c(\n                                \"select\",\n                                {\n                                  directives: [\n                                    {\n                                      name: \"model\",\n                                      rawName: \"v-model\",\n                                      value: _vm.validate.meshName,\n                                      expression: \"validate.meshName\"\n                                    }\n                                  ],\n                                  staticClass: \"k-input w-100\",\n                                  attrs: { id: \"dp-mesh\" },\n                                  on: {\n                                    change: function($event) {\n                                      var $$selectedVal = Array.prototype.filter\n                                        .call($event.target.options, function(\n                                          o\n                                        ) {\n                                          return o.selected\n                                        })\n                                        .map(function(o) {\n                                          var val =\n                                            \"_value\" in o ? o._value : o.value\n                                          return val\n                                        })\n                                      _vm.$set(\n                                        _vm.validate,\n                                        \"meshName\",\n                                        $event.target.multiple\n                                          ? $$selectedVal\n                                          : $$selectedVal[0]\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\n                                    \"option\",\n                                    { attrs: { disabled: \"\", value: \"\" } },\n                                    [\n                                      _vm._v(\n                                        \"\\n                    Select an existing Meshâ€¦\\n                  \"\n                                      )\n                                    ]\n                                  ),\n                                  _vm._l(_vm.meshes.items, function(item) {\n                                    return _c(\n                                      \"option\",\n                                      {\n                                        key: item.name,\n                                        domProps: { value: item.name }\n                                      },\n                                      [\n                                        _vm._v(\n                                          \"\\n                    \" +\n                                            _vm._s(item.name) +\n                                            \"\\n                  \"\n                                        )\n                                      ]\n                                    )\n                                  })\n                                ],\n                                2\n                              )\n                            ]),\n                            _c(\n                              \"div\",\n                              [\n                                _c(\n                                  \"label\",\n                                  { staticClass: \"k-input-label mr-4\" },\n                                  [\n                                    _vm._v(\n                                      \"\\n                  or\\n                \"\n                                    )\n                                  ]\n                                ),\n                                _c(\n                                  \"KButton\",\n                                  {\n                                    attrs: {\n                                      to: { name: \"create-mesh\" },\n                                      appearance: \"primary\"\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n                  Create a new Mesh\\n                \"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ],\n                  2\n                )\n              ],\n              1\n            ),\n            _c(\n              \"template\",\n              { slot: \"scope-settings\" },\n              [\n                _c(\"h3\", [\n                  _vm._v(\"\\n          Setup Dataplane Mode\\n        \")\n                ]),\n                _c(\"p\", [\n                  _vm._v(\n                    \"\\n          You can create a data plane for a service or a data plane for an Ingress gateway.\\n        \"\n                  )\n                ]),\n                _c(\n                  \"KCard\",\n                  { staticClass: \"my-6\", attrs: { \"has-shadow\": \"\" } },\n                  [\n                    _c(\n                      \"template\",\n                      { slot: \"body\" },\n                      [\n                        _c(\n                          \"FormFragment\",\n                          {\n                            attrs: {\n                              \"all-inline\": \"\",\n                              \"equal-cols\": \"\",\n                              \"hide-label-col\": \"\"\n                            }\n                          },\n                          [\n                            _c(\n                              \"label\",\n                              { attrs: { for: \"service-dataplane\" } },\n                              [\n                                _c(\"input\", {\n                                  directives: [\n                                    {\n                                      name: \"model\",\n                                      rawName: \"v-model\",\n                                      value: _vm.validate.k8sDataplaneType,\n                                      expression: \"validate.k8sDataplaneType\"\n                                    }\n                                  ],\n                                  staticClass: \"k-input\",\n                                  attrs: {\n                                    id: \"service-dataplane\",\n                                    type: \"radio\",\n                                    name: \"dataplane-type\",\n                                    value: \"dataplane-type-service\",\n                                    checked: \"\"\n                                  },\n                                  domProps: {\n                                    checked: _vm._q(\n                                      _vm.validate.k8sDataplaneType,\n                                      \"dataplane-type-service\"\n                                    )\n                                  },\n                                  on: {\n                                    change: function($event) {\n                                      return _vm.$set(\n                                        _vm.validate,\n                                        \"k8sDataplaneType\",\n                                        \"dataplane-type-service\"\n                                      )\n                                    }\n                                  }\n                                }),\n                                _c(\"span\", [\n                                  _vm._v(\n                                    \"\\n                  Service Dataplane\\n                \"\n                                  )\n                                ])\n                              ]\n                            ),\n                            _c(\n                              \"label\",\n                              { attrs: { for: \"ingress-dataplane\" } },\n                              [\n                                _c(\"input\", {\n                                  directives: [\n                                    {\n                                      name: \"model\",\n                                      rawName: \"v-model\",\n                                      value: _vm.validate.k8sDataplaneType,\n                                      expression: \"validate.k8sDataplaneType\"\n                                    }\n                                  ],\n                                  staticClass: \"k-input\",\n                                  attrs: {\n                                    id: \"ingress-dataplane\",\n                                    type: \"radio\",\n                                    name: \"dataplane-type\",\n                                    value: \"dataplane-type-ingress\",\n                                    disabled: \"\"\n                                  },\n                                  domProps: {\n                                    checked: _vm._q(\n                                      _vm.validate.k8sDataplaneType,\n                                      \"dataplane-type-ingress\"\n                                    )\n                                  },\n                                  on: {\n                                    change: function($event) {\n                                      return _vm.$set(\n                                        _vm.validate,\n                                        \"k8sDataplaneType\",\n                                        \"dataplane-type-ingress\"\n                                      )\n                                    }\n                                  }\n                                }),\n                                _c(\"span\", [\n                                  _vm._v(\n                                    \"\\n                  Ingress Dataplane\\n                \"\n                                  )\n                                ])\n                              ]\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ],\n                  2\n                ),\n                _vm.validate.k8sDataplaneType === \"dataplane-type-service\"\n                  ? _c(\n                      \"div\",\n                      [\n                        _c(\"p\", [\n                          _vm._v(\n                            \"\\n            Should the data plane be added for an entire Namespace and all of its services,\\n            or for specific individual services in any namespace?\\n          \"\n                          )\n                        ]),\n                        _c(\n                          \"KCard\",\n                          { staticClass: \"my-6\", attrs: { \"has-shadow\": \"\" } },\n                          [\n                            _c(\n                              \"template\",\n                              { slot: \"body\" },\n                              [\n                                _c(\n                                  \"FormFragment\",\n                                  {\n                                    attrs: {\n                                      \"all-inline\": \"\",\n                                      \"equal-cols\": \"\",\n                                      \"hide-label-col\": \"\"\n                                    }\n                                  },\n                                  [\n                                    _c(\n                                      \"label\",\n                                      { attrs: { for: \"k8s-services-all\" } },\n                                      [\n                                        _c(\"input\", {\n                                          directives: [\n                                            {\n                                              name: \"model\",\n                                              rawName: \"v-model\",\n                                              value: _vm.validate.k8sServices,\n                                              expression: \"validate.k8sServices\"\n                                            }\n                                          ],\n                                          staticClass: \"k-input\",\n                                          attrs: {\n                                            id: \"k8s-services-all\",\n                                            type: \"radio\",\n                                            name: \"k8s-services\",\n                                            value: \"all-services\",\n                                            checked: \"\"\n                                          },\n                                          domProps: {\n                                            checked: _vm._q(\n                                              _vm.validate.k8sServices,\n                                              \"all-services\"\n                                            )\n                                          },\n                                          on: {\n                                            change: function($event) {\n                                              return _vm.$set(\n                                                _vm.validate,\n                                                \"k8sServices\",\n                                                \"all-services\"\n                                              )\n                                            }\n                                          }\n                                        }),\n                                        _c(\"span\", [\n                                          _vm._v(\n                                            \"\\n                    All Services in Namespace\\n                  \"\n                                          )\n                                        ])\n                                      ]\n                                    ),\n                                    _c(\n                                      \"label\",\n                                      {\n                                        attrs: {\n                                          for: \"k8s-services-individual\"\n                                        }\n                                      },\n                                      [\n                                        _c(\"input\", {\n                                          directives: [\n                                            {\n                                              name: \"model\",\n                                              rawName: \"v-model\",\n                                              value: _vm.validate.k8sServices,\n                                              expression: \"validate.k8sServices\"\n                                            }\n                                          ],\n                                          staticClass: \"k-input\",\n                                          attrs: {\n                                            id: \"k8s-services-individual\",\n                                            type: \"radio\",\n                                            name: \"k8s-services\",\n                                            value: \"individual-services\",\n                                            disabled: \"disabled\"\n                                          },\n                                          domProps: {\n                                            checked: _vm._q(\n                                              _vm.validate.k8sServices,\n                                              \"individual-services\"\n                                            )\n                                          },\n                                          on: {\n                                            change: function($event) {\n                                              return _vm.$set(\n                                                _vm.validate,\n                                                \"k8sServices\",\n                                                \"individual-services\"\n                                              )\n                                            }\n                                          }\n                                        }),\n                                        _c(\"span\", [\n                                          _vm._v(\n                                            \"\\n                    Individual Services\\n                  \"\n                                          )\n                                        ])\n                                      ]\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          2\n                        ),\n                        _vm.validate.k8sServices === \"individual-services\"\n                          ? _c(\n                              \"KCard\",\n                              {\n                                staticClass: \"my-6\",\n                                attrs: { \"has-shadow\": \"\" }\n                              },\n                              [\n                                _c(\n                                  \"template\",\n                                  { slot: \"body\" },\n                                  [\n                                    _c(\n                                      \"FormFragment\",\n                                      {\n                                        attrs: {\n                                          title: \"Deployments\",\n                                          \"for-attr\": \"k8s-deployment-selection\"\n                                        }\n                                      },\n                                      [\n                                        _c(\"input\", {\n                                          directives: [\n                                            {\n                                              name: \"model\",\n                                              rawName: \"v-model\",\n                                              value:\n                                                _vm.validate\n                                                  .k8sServiceDeploymentSelection,\n                                              expression:\n                                                \"validate.k8sServiceDeploymentSelection\"\n                                            }\n                                          ],\n                                          staticClass: \"k-input w-100\",\n                                          attrs: {\n                                            id: \"k8s-service-deployment-new\",\n                                            type: \"text\",\n                                            placeholder: \"your-new-deployment\",\n                                            required: \"\"\n                                          },\n                                          domProps: {\n                                            value:\n                                              _vm.validate\n                                                .k8sServiceDeploymentSelection\n                                          },\n                                          on: {\n                                            input: function($event) {\n                                              if ($event.target.composing) {\n                                                return\n                                              }\n                                              _vm.$set(\n                                                _vm.validate,\n                                                \"k8sServiceDeploymentSelection\",\n                                                $event.target.value\n                                              )\n                                            }\n                                          }\n                                        })\n                                      ]\n                                    )\n                                  ],\n                                  1\n                                )\n                              ],\n                              2\n                            )\n                          : _vm._e(),\n                        _c(\n                          \"KCard\",\n                          { staticClass: \"my-6\", attrs: { \"has-shadow\": \"\" } },\n                          [\n                            _c(\n                              \"template\",\n                              { slot: \"body\" },\n                              [\n                                _c(\n                                  \"FormFragment\",\n                                  {\n                                    attrs: {\n                                      title: \"Namespace\",\n                                      \"for-attr\": \"k8s-namespace-selection\"\n                                    }\n                                  },\n                                  [\n                                    _c(\"input\", {\n                                      directives: [\n                                        {\n                                          name: \"model\",\n                                          rawName: \"v-model\",\n                                          value:\n                                            _vm.validate.k8sNamespaceSelection,\n                                          expression:\n                                            \"validate.k8sNamespaceSelection\"\n                                        }\n                                      ],\n                                      staticClass: \"k-input w-100\",\n                                      attrs: {\n                                        id: \"k8s-namespace-new\",\n                                        type: \"text\",\n                                        placeholder: \"your-namespace\",\n                                        required: \"\"\n                                      },\n                                      domProps: {\n                                        value:\n                                          _vm.validate.k8sNamespaceSelection\n                                      },\n                                      on: {\n                                        input: function($event) {\n                                          if ($event.target.composing) {\n                                            return\n                                          }\n                                          _vm.$set(\n                                            _vm.validate,\n                                            \"k8sNamespaceSelection\",\n                                            $event.target.value\n                                          )\n                                        }\n                                      }\n                                    })\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          2\n                        )\n                      ],\n                      1\n                    )\n                  : _vm._e(),\n                _vm.validate.k8sDataplaneType === \"dataplane-type-ingress\"\n                  ? _c(\n                      \"div\",\n                      [\n                        _c(\"p\", [\n                          _vm._v(\n                            \"\\n            \" +\n                              _vm._s(_vm.title) +\n                              \" natively supports the Kong Ingress. Do you want to deploy\\n            Kong or another Ingress?\\n          \"\n                          )\n                        ]),\n                        _c(\n                          \"KCard\",\n                          { staticClass: \"my-6\", attrs: { \"has-shadow\": \"\" } },\n                          [\n                            _c(\n                              \"template\",\n                              { slot: \"body\" },\n                              [\n                                _c(\n                                  \"FormFragment\",\n                                  {\n                                    attrs: {\n                                      \"all-inline\": \"\",\n                                      \"equal-cols\": \"\",\n                                      \"hide-label-col\": \"\"\n                                    }\n                                  },\n                                  [\n                                    _c(\n                                      \"label\",\n                                      { attrs: { for: \"k8s-ingress-kong\" } },\n                                      [\n                                        _c(\"input\", {\n                                          directives: [\n                                            {\n                                              name: \"model\",\n                                              rawName: \"v-model\",\n                                              value:\n                                                _vm.validate.k8sIngressBrand,\n                                              expression:\n                                                \"validate.k8sIngressBrand\"\n                                            }\n                                          ],\n                                          staticClass: \"k-input\",\n                                          attrs: {\n                                            id: \"k8s-ingress-kong\",\n                                            type: \"radio\",\n                                            name: \"k8s-ingress-brand\",\n                                            value: \"kong-ingress\",\n                                            checked: \"\"\n                                          },\n                                          domProps: {\n                                            checked: _vm._q(\n                                              _vm.validate.k8sIngressBrand,\n                                              \"kong-ingress\"\n                                            )\n                                          },\n                                          on: {\n                                            change: function($event) {\n                                              return _vm.$set(\n                                                _vm.validate,\n                                                \"k8sIngressBrand\",\n                                                \"kong-ingress\"\n                                              )\n                                            }\n                                          }\n                                        }),\n                                        _c(\"span\", [\n                                          _vm._v(\n                                            \"\\n                    Kong Ingress\\n                  \"\n                                          )\n                                        ])\n                                      ]\n                                    ),\n                                    _c(\n                                      \"label\",\n                                      { attrs: { for: \"k8s-ingress-other\" } },\n                                      [\n                                        _c(\"input\", {\n                                          directives: [\n                                            {\n                                              name: \"model\",\n                                              rawName: \"v-model\",\n                                              value:\n                                                _vm.validate.k8sIngressBrand,\n                                              expression:\n                                                \"validate.k8sIngressBrand\"\n                                            }\n                                          ],\n                                          staticClass: \"k-input\",\n                                          attrs: {\n                                            id: \"k8s-ingress-other\",\n                                            type: \"radio\",\n                                            name: \"k8s-ingress-brand\",\n                                            value: \"other-ingress\"\n                                          },\n                                          domProps: {\n                                            checked: _vm._q(\n                                              _vm.validate.k8sIngressBrand,\n                                              \"other-ingress\"\n                                            )\n                                          },\n                                          on: {\n                                            change: function($event) {\n                                              return _vm.$set(\n                                                _vm.validate,\n                                                \"k8sIngressBrand\",\n                                                \"other-ingress\"\n                                              )\n                                            }\n                                          }\n                                        }),\n                                        _c(\"span\", [\n                                          _vm._v(\n                                            \"\\n                    Other Ingress\\n                  \"\n                                          )\n                                        ])\n                                      ]\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          2\n                        ),\n                        _c(\n                          \"KCard\",\n                          { staticClass: \"my-6\", attrs: { \"has-shadow\": \"\" } },\n                          [\n                            _c(\n                              \"template\",\n                              { slot: \"body\" },\n                              [\n                                _c(\n                                  \"FormFragment\",\n                                  {\n                                    attrs: {\n                                      title: \"Deployments\",\n                                      \"for-attr\": \"k8s-deployment-selection\"\n                                    }\n                                  },\n                                  [\n                                    _c(\"input\", {\n                                      directives: [\n                                        {\n                                          name: \"model\",\n                                          rawName: \"v-model\",\n                                          value:\n                                            _vm.validate.k8sIngressDeployment,\n                                          expression:\n                                            \"validate.k8sIngressDeployment\"\n                                        }\n                                      ],\n                                      staticClass: \"k-input w-100\",\n                                      attrs: {\n                                        id: \"k8s-ingress-deployment-new\",\n                                        type: \"text\",\n                                        placeholder: \"your-deployment\",\n                                        required: \"\"\n                                      },\n                                      domProps: {\n                                        value: _vm.validate.k8sIngressDeployment\n                                      },\n                                      on: {\n                                        input: function($event) {\n                                          if ($event.target.composing) {\n                                            return\n                                          }\n                                          _vm.$set(\n                                            _vm.validate,\n                                            \"k8sIngressDeployment\",\n                                            $event.target.value\n                                          )\n                                        }\n                                      }\n                                    })\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          2\n                        ),\n                        _vm.validate.k8sIngressBrand === \"other-ingress\"\n                          ? _c(\n                              \"KAlert\",\n                              { attrs: { appearance: \"info\" } },\n                              [\n                                _c(\"template\", { slot: \"alertMessage\" }, [\n                                  _c(\"p\", [\n                                    _vm._v(\n                                      '\\n                Please go ahead and deploy the Ingress first, then restart this\\n                wizard and select \"Existing Ingress\".\\n              '\n                                    )\n                                  ])\n                                ])\n                              ],\n                              2\n                            )\n                          : _vm._e()\n                      ],\n                      1\n                    )\n                  : _vm._e()\n              ],\n              1\n            ),\n            _c(\n              \"template\",\n              { slot: \"complete\" },\n              [\n                _vm.validate.meshName\n                  ? _c(\"div\", [\n                      _vm.scanFound === false\n                        ? _c(\n                            \"div\",\n                            [\n                              _c(\"h3\", [\n                                _vm._v(\n                                  \"\\n              Install a new Dataplane\\n            \"\n                                )\n                              ]),\n                              _c(\"p\", [\n                                _vm._v(\n                                  \"\\n              You can now execute the following commands to automatically inject\\n              the sidebar proxy in every Pod, and by doing so creating the Dataplane.\\n            \"\n                                )\n                              ]),\n                              _c(\n                                \"Tabs\",\n                                {\n                                  attrs: {\n                                    loaders: false,\n                                    tabs: _vm.tabs,\n                                    \"has-border\": true,\n                                    \"initial-tab-override\": \"kubernetes\"\n                                  }\n                                },\n                                [\n                                  _c(\n                                    \"template\",\n                                    { slot: \"kubernetes\" },\n                                    [\n                                      _c(\"CodeView\", {\n                                        attrs: {\n                                          title: \"Kubernetes\",\n                                          \"copy-button-text\":\n                                            \"Copy Command to Clipboard\",\n                                          lang: \"bash\",\n                                          content: _vm.codeOutput\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                2\n                              )\n                            ],\n                            1\n                          )\n                        : _vm._e()\n                    ])\n                  : _c(\n                      \"KAlert\",\n                      { attrs: { appearance: \"danger\" } },\n                      [\n                        _c(\"template\", { slot: \"alertMessage\" }, [\n                          _c(\"p\", [\n                            _vm._v(\n                              \"\\n              Please return to the first step and make sure to select an\\n              existing Mesh, or create a new one.\\n            \"\n                            )\n                          ])\n                        ])\n                      ],\n                      2\n                    )\n              ],\n              1\n            ),\n            _c(\"template\", { slot: \"dataplane\" }, [\n              _c(\"h3\", [_vm._v(\"Dataplane\")]),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n          In \" +\n                    _vm._s(_vm.title) +\n                    \", a Dataplane entity represents a sidebar proxy running\\n          alongside one of your services. Dataplanes can be added in any Mesh\\n          that you may have created, and in Kubernetes, they will be auto-injected\\n          by \" +\n                    _vm._s(_vm.title) +\n                    \".\\n        \"\n                )\n              ])\n            ])\n          ],\n          2\n        )\n      ],\n      1\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}