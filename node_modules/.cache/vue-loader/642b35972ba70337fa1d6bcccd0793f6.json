{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/views/Wizard/views/DataplaneUniversal.vue?vue&type=template&id=34147698&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/views/Wizard/views/DataplaneUniversal.vue","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"wizard\" }, [\n    _c(\n      \"div\",\n      { staticClass: \"wizard__content\" },\n      [\n        _c(\n          \"StepSkeleton\",\n          {\n            ref: \"stepSystem\",\n            attrs: {\n              steps: _vm.steps,\n              \"advance-check\": true,\n              \"sidebar-content\": _vm.sidebarContent,\n              \"next-disabled\": _vm.nextDisabled\n            }\n          },\n          [\n            _c(\n              \"template\",\n              { slot: \"general\" },\n              [\n                _c(\"p\", [\n                  _vm._v(\n                    \"\\n            Welcome to the wizard to create a new Dataplane entity in \" +\n                      _vm._s(_vm.title) +\n                      \".\\n            We will be providing you with a few steps that will get you started.\\n          \"\n                  )\n                ]),\n                _c(\"p\", [\n                  _vm._v(\n                    \"\\n            As you know, the Kuma GUI is read-only.\\n          \"\n                  )\n                ]),\n                _c(\"Switcher\"),\n                _c(\"h3\", [\n                  _vm._v(\n                    \"\\n            To get started, please select on what Mesh you would like to add the Dataplane:\\n          \"\n                  )\n                ]),\n                _c(\"p\", [\n                  _vm._v(\n                    \"\\n            If you've got an existing Mesh that you would like to associate with your\\n            Dataplane, you can select it below, or create a new one using our Mesh Wizard.\\n          \"\n                  )\n                ]),\n                _c(\n                  \"KCard\",\n                  { staticClass: \"my-6\", attrs: { \"has-shadow\": \"\" } },\n                  [\n                    _c(\n                      \"template\",\n                      { slot: \"body\" },\n                      [\n                        _c(\n                          \"FormFragment\",\n                          {\n                            attrs: {\n                              title: \"Choose a Mesh\",\n                              \"for-attr\": \"dp-mesh\",\n                              \"all-inline\": \"\"\n                            }\n                          },\n                          [\n                            _c(\"div\", [\n                              _c(\n                                \"select\",\n                                {\n                                  directives: [\n                                    {\n                                      name: \"model\",\n                                      rawName: \"v-model\",\n                                      value: _vm.validate.meshName,\n                                      expression: \"validate.meshName\"\n                                    }\n                                  ],\n                                  staticClass: \"k-input w-100\",\n                                  attrs: { id: \"dp-mesh\" },\n                                  on: {\n                                    change: function($event) {\n                                      var $$selectedVal = Array.prototype.filter\n                                        .call($event.target.options, function(\n                                          o\n                                        ) {\n                                          return o.selected\n                                        })\n                                        .map(function(o) {\n                                          var val =\n                                            \"_value\" in o ? o._value : o.value\n                                          return val\n                                        })\n                                      _vm.$set(\n                                        _vm.validate,\n                                        \"meshName\",\n                                        $event.target.multiple\n                                          ? $$selectedVal\n                                          : $$selectedVal[0]\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\n                                    \"option\",\n                                    { attrs: { disabled: \"\", value: \"\" } },\n                                    [\n                                      _vm._v(\n                                        \"\\n                      Select an existing Meshâ€¦\\n                    \"\n                                      )\n                                    ]\n                                  ),\n                                  _vm._l(_vm.meshes.items, function(item) {\n                                    return _c(\n                                      \"option\",\n                                      {\n                                        key: item.name,\n                                        domProps: { value: item.name }\n                                      },\n                                      [\n                                        _vm._v(\n                                          \"\\n                      \" +\n                                            _vm._s(item.name) +\n                                            \"\\n                    \"\n                                        )\n                                      ]\n                                    )\n                                  })\n                                ],\n                                2\n                              )\n                            ]),\n                            _c(\n                              \"div\",\n                              [\n                                _c(\n                                  \"label\",\n                                  { staticClass: \"k-input-label mr-4\" },\n                                  [\n                                    _vm._v(\n                                      \"\\n                    or\\n                  \"\n                                    )\n                                  ]\n                                ),\n                                _c(\n                                  \"KButton\",\n                                  {\n                                    attrs: {\n                                      to: { name: \"create-mesh\" },\n                                      appearance: \"primary\"\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n                    Create a new Mesh\\n                  \"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ],\n                  2\n                )\n              ],\n              1\n            ),\n            _c(\n              \"template\",\n              { slot: \"topology\" },\n              [\n                _c(\"h3\", [\n                  _vm._v(\"\\n            Setup Dataplane Mode\\n          \")\n                ]),\n                _c(\"p\", [\n                  _vm._v(\n                    \"\\n            You can create a data plane for a service or a data plane for an Ingress gateway.\\n          \"\n                  )\n                ]),\n                _c(\n                  \"FormFragment\",\n                  {\n                    attrs: {\n                      \"all-inline\": \"\",\n                      \"equal-cols\": \"\",\n                      \"hide-label-col\": \"\",\n                      \"shift-right\": \"\"\n                    }\n                  },\n                  [\n                    _c(\"div\", [\n                      _c(\"label\", { attrs: { for: \"service-dataplane\" } }, [\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.validate.univDataplaneType,\n                              expression: \"validate.univDataplaneType\"\n                            }\n                          ],\n                          staticClass: \"k-input\",\n                          attrs: {\n                            id: \"service-dataplane\",\n                            type: \"radio\",\n                            name: \"dataplane-type\",\n                            value: \"dataplane-type-service\",\n                            checked: \"\"\n                          },\n                          domProps: {\n                            checked: _vm._q(\n                              _vm.validate.univDataplaneType,\n                              \"dataplane-type-service\"\n                            )\n                          },\n                          on: {\n                            change: function($event) {\n                              return _vm.$set(\n                                _vm.validate,\n                                \"univDataplaneType\",\n                                \"dataplane-type-service\"\n                              )\n                            }\n                          }\n                        }),\n                        _c(\"span\", [\n                          _vm._v(\n                            \"\\n                  Service Dataplane\\n                \"\n                          )\n                        ])\n                      ]),\n                      _c(\"label\", { attrs: { for: \"gateway-dataplane\" } }, [\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.validate.univDataplaneType,\n                              expression: \"validate.univDataplaneType\"\n                            }\n                          ],\n                          staticClass: \"k-input\",\n                          attrs: {\n                            id: \"gateway-dataplane\",\n                            type: \"radio\",\n                            name: \"dataplane-type\",\n                            value: \"dataplane-type-gateway\"\n                          },\n                          domProps: {\n                            checked: _vm._q(\n                              _vm.validate.univDataplaneType,\n                              \"dataplane-type-gateway\"\n                            )\n                          },\n                          on: {\n                            change: function($event) {\n                              return _vm.$set(\n                                _vm.validate,\n                                \"univDataplaneType\",\n                                \"dataplane-type-gateway\"\n                              )\n                            }\n                          }\n                        }),\n                        _c(\"span\", [\n                          _vm._v(\n                            \"\\n                  Gateway Dataplane\\n                \"\n                          )\n                        ])\n                      ])\n                    ])\n                  ]\n                ),\n                _c(\n                  \"FormFragment\",\n                  { attrs: { \"all-inline\": \"\", title: \"Service name\" } },\n                  [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.validate.univDataplaneServiceName,\n                          expression: \"validate.univDataplaneServiceName\"\n                        }\n                      ],\n                      staticClass: \"k-input w-100 mr-4\",\n                      attrs: { id: \"service-name\", type: \"text\" },\n                      domProps: {\n                        value: _vm.validate.univDataplaneServiceName\n                      },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(\n                            _vm.validate,\n                            \"univDataplaneServiceName\",\n                            $event.target.value\n                          )\n                        }\n                      }\n                    })\n                  ]\n                ),\n                _c(\n                  \"FormFragment\",\n                  {\n                    attrs: {\n                      \"all-inline\": \"\",\n                      title: \"Dataplane ID\",\n                      \"for-attr\": \"dataplane-id\"\n                    }\n                  },\n                  [\n                    _c(\n                      \"div\",\n                      [\n                        _c(\"KPop\", { attrs: { trigger: \"hover\" } }, [\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: _vm.validate.univDataplaneId,\n                                expression: \"validate.univDataplaneId\"\n                              }\n                            ],\n                            staticClass: \"k-input w-100\",\n                            attrs: {\n                              id: \"dataplane-id\",\n                              type: \"text\",\n                              disabled:\n                                _vm.validate.univDataplaneCustomIdDisabled\n                            },\n                            domProps: { value: _vm.validate.univDataplaneId },\n                            on: {\n                              input: function($event) {\n                                if ($event.target.composing) {\n                                  return\n                                }\n                                _vm.$set(\n                                  _vm.validate,\n                                  \"univDataplaneId\",\n                                  $event.target.value\n                                )\n                              }\n                            }\n                          }),\n                          _c(\n                            \"div\",\n                            { attrs: { slot: \"content\" }, slot: \"content\" },\n                            [\n                              _vm._v(\n                                \"\\n                  This is a unique ID for the Dataplane instance.\\n                \"\n                              )\n                            ]\n                          )\n                        ])\n                      ],\n                      1\n                    ),\n                    _c(\n                      \"div\",\n                      [\n                        _c(\n                          \"KButton\",\n                          {\n                            attrs: { appearance: \"primary\" },\n                            on: {\n                              click: function($event) {\n                                _vm.validate.univDataplaneCustomIdDisabled = false\n                              }\n                            }\n                          },\n                          [_vm._v(\"\\n                Edit\\n              \")]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                )\n              ],\n              1\n            ),\n            _c(\n              \"template\",\n              { slot: \"networking\" },\n              [\n                _c(\"h3\", [_vm._v(\"\\n            Networking\\n          \")]),\n                _c(\"p\", [\n                  _vm._v(\n                    \"\\n            It's time to now configure the networking settings so that the Dataplane\\n            can connect to the local service, and other data planes can consume\\n            your service.\\n          \"\n                  )\n                ]),\n                _c(\"p\", [\n                  _c(\"strong\", [\n                    _vm._v(\"All fields below are required to proceed.\")\n                  ])\n                ]),\n                _c(\n                  \"FormFragment\",\n                  {\n                    attrs: { title: \"Address\", \"for-attr\": \"network-address\" }\n                  },\n                  [\n                    _c(\"KPop\", { attrs: { trigger: \"hover\" } }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.validate.univDataplaneNetworkAddress,\n                            expression: \"validate.univDataplaneNetworkAddress\"\n                          }\n                        ],\n                        staticClass: \"k-input w-100\",\n                        attrs: {\n                          id: \"network-address\",\n                          placeholder: \"10.0.0.1\",\n                          type: \"text\"\n                        },\n                        domProps: {\n                          value: _vm.validate.univDataplaneNetworkAddress\n                        },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.validate,\n                              \"univDataplaneNetworkAddress\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _c(\n                        \"div\",\n                        { attrs: { slot: \"content\" }, slot: \"content\" },\n                        [\n                          _vm._v(\n                            \"\\n                The IP address that other services will use to consume this data plane.\\n              \"\n                          )\n                        ]\n                      )\n                    ])\n                  ],\n                  1\n                ),\n                _c(\n                  \"FormFragment\",\n                  {\n                    attrs: {\n                      title: \"Service Port\",\n                      \"for-attr\": \"network-service-port\"\n                    }\n                  },\n                  [\n                    _c(\"KPop\", { attrs: { trigger: \"hover\" } }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.validate.univDataplaneNetworkServicePort,\n                            expression:\n                              \"validate.univDataplaneNetworkServicePort\"\n                          }\n                        ],\n                        staticClass: \"k-input w-100\",\n                        attrs: {\n                          id: \"network-service-port\",\n                          placeholder: \"0 - 65535\",\n                          type: \"text\"\n                        },\n                        domProps: {\n                          value: _vm.validate.univDataplaneNetworkServicePort\n                        },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.validate,\n                              \"univDataplaneNetworkServicePort\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _c(\n                        \"div\",\n                        { attrs: { slot: \"content\" }, slot: \"content\" },\n                        [\n                          _vm._v(\n                            \"\\n                The port where your service is listening on the machine.\\n              \"\n                          )\n                        ]\n                      )\n                    ])\n                  ],\n                  1\n                ),\n                _c(\n                  \"FormFragment\",\n                  {\n                    attrs: {\n                      title: \"Data plane port\",\n                      \"for-attr\": \"network-dataplane-port\"\n                    }\n                  },\n                  [\n                    _c(\"KPop\", { attrs: { trigger: \"hover\" } }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.validate.univDataplaneNetworkDPPort,\n                            expression: \"validate.univDataplaneNetworkDPPort\"\n                          }\n                        ],\n                        staticClass: \"k-input w-100\",\n                        attrs: {\n                          id: \"network-dataplane-port\",\n                          placeholder: \"0 - 65535\",\n                          type: \"text\"\n                        },\n                        domProps: {\n                          value: _vm.validate.univDataplaneNetworkDPPort\n                        },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.validate,\n                              \"univDataplaneNetworkDPPort\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _c(\n                        \"div\",\n                        { attrs: { slot: \"content\" }, slot: \"content\" },\n                        [\n                          _vm._v(\n                            \"\\n                The data plane port (that other services will use to consume this service).\\n              \"\n                          )\n                        ]\n                      )\n                    ])\n                  ],\n                  1\n                ),\n                _c(\n                  \"FormFragment\",\n                  {\n                    attrs: {\n                      title: \"Protocol\",\n                      \"for-attr\": \"network-dataplane-protocol\"\n                    }\n                  },\n                  [\n                    _c(\"KPop\", { attrs: { trigger: \"hover\" } }, [\n                      _c(\n                        \"select\",\n                        {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.validate.univDataplaneNetworkProtocol,\n                              expression:\n                                \"validate.univDataplaneNetworkProtocol\"\n                            }\n                          ],\n                          staticClass: \"k-input w-100\",\n                          attrs: {\n                            id: \"network-dataplane-protocol\",\n                            name: \"network-dataplane-protocol\"\n                          },\n                          on: {\n                            change: function($event) {\n                              var $$selectedVal = Array.prototype.filter\n                                .call($event.target.options, function(o) {\n                                  return o.selected\n                                })\n                                .map(function(o) {\n                                  var val = \"_value\" in o ? o._value : o.value\n                                  return val\n                                })\n                              _vm.$set(\n                                _vm.validate,\n                                \"univDataplaneNetworkProtocol\",\n                                $event.target.multiple\n                                  ? $$selectedVal\n                                  : $$selectedVal[0]\n                              )\n                            }\n                          }\n                        },\n                        [\n                          _c(\n                            \"option\",\n                            {\n                              attrs: { value: \"tcp\" },\n                              domProps: {\n                                selected:\n                                  _vm.validate.univDataplaneNetworkProtocol ===\n                                  \"tcp\"\n                              }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n                  TCP\\n                \"\n                              )\n                            ]\n                          ),\n                          _c(\n                            \"option\",\n                            {\n                              attrs: { value: \"http\" },\n                              domProps: {\n                                selected:\n                                  _vm.validate.univDataplaneNetworkProtocol ===\n                                  \"http\"\n                              }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n                  HTTP\\n                \"\n                              )\n                            ]\n                          )\n                        ]\n                      ),\n                      _c(\n                        \"div\",\n                        { attrs: { slot: \"content\" }, slot: \"content\" },\n                        [\n                          _vm._v(\n                            \"\\n                The protocol of the service.\\n              \"\n                          )\n                        ]\n                      )\n                    ])\n                  ],\n                  1\n                )\n              ],\n              1\n            ),\n            _c(\n              \"template\",\n              { slot: \"complete\" },\n              [\n                _vm.validate.meshName\n                  ? _c(\n                      \"div\",\n                      [\n                        _vm.scanFound === false\n                          ? _c(\n                              \"div\",\n                              [\n                                _c(\"h3\", [\n                                  _vm._v(\n                                    \"\\n                Install a new Dataplane\\n              \"\n                                  )\n                                ]),\n                                _c(\"p\", [\n                                  _vm._v(\n                                    \"\\n                You can now execute the following commands to automatically inject\\n                the sidebar proxy in every Pod, and by doing so creating the Dataplane.\\n              \"\n                                  )\n                                ]),\n                                _c(\n                                  \"Tabs\",\n                                  {\n                                    attrs: {\n                                      loaders: false,\n                                      tabs: _vm.tabs,\n                                      \"has-border\": true,\n                                      \"initial-tab-override\": \"universal\"\n                                    }\n                                  },\n                                  [\n                                    _c(\n                                      \"template\",\n                                      { slot: \"universal\" },\n                                      [\n                                        _c(\"CodeView\", {\n                                          attrs: {\n                                            title: \"Universal\",\n                                            \"copy-button-text\":\n                                              \"Copy Command to Clipboard\",\n                                            lang: \"bash\",\n                                            content: _vm.codeOutput\n                                          }\n                                        })\n                                      ],\n                                      1\n                                    )\n                                  ],\n                                  2\n                                )\n                              ],\n                              1\n                            )\n                          : _vm._e(),\n                        _c(\n                          \"Scanner\",\n                          {\n                            attrs: {\n                              \"loader-function\": _vm.scanForEntity,\n                              \"should-start\": true,\n                              \"has-error\": _vm.scanError,\n                              \"can-complete\": _vm.scanFound\n                            }\n                          },\n                          [\n                            _c(\"template\", { slot: \"loading-title\" }, [\n                              _c(\"h3\", [_vm._v(\"Searchingâ€¦\")])\n                            ]),\n                            _c(\"template\", { slot: \"loading-content\" }, [\n                              _c(\"p\", [\n                                _vm._v(\"We are looking for your dataplane.\")\n                              ])\n                            ]),\n                            _c(\"template\", { slot: \"complete-title\" }, [\n                              _c(\"h3\", [_vm._v(\"Done!\")])\n                            ]),\n                            _c(\"template\", { slot: \"complete-content\" }, [\n                              _c(\"p\", [\n                                _vm._v(\n                                  \"\\n                  Your Dataplane\\n                  \"\n                                ),\n                                _vm.validate.univDataplaneId\n                                  ? _c(\"strong\", [\n                                      _vm._v(\n                                        \"\\n                    \" +\n                                          _vm._s(_vm.validate.univDataplaneId) +\n                                          \"\\n                  \"\n                                      )\n                                    ])\n                                  : _vm._e(),\n                                _vm._v(\n                                  \"\\n                  was found!\\n                \"\n                                )\n                              ]),\n                              _c(\"p\", [\n                                _vm._v(\n                                  \"\\n                  Proceed to the next step where we will explain how to start\\n                  your new Dataplane.\\n                \"\n                                )\n                              ]),\n                              _c(\n                                \"p\",\n                                [\n                                  _c(\n                                    \"KButton\",\n                                    {\n                                      attrs: { appearance: \"primary\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.$refs.stepSystem.goToNextStep()\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n                    Start Your Dataplane\\n                  \"\n                                      )\n                                    ]\n                                  )\n                                ],\n                                1\n                              )\n                            ]),\n                            _c(\"template\", { slot: \"error-title\" }, [\n                              _c(\"h3\", [_vm._v(\"Mesh not found\")])\n                            ]),\n                            _c(\"template\", { slot: \"error-content\" }, [\n                              _c(\"p\", [\n                                _vm._v(\"We were unable to find your mesh.\")\n                              ])\n                            ])\n                          ],\n                          2\n                        )\n                      ],\n                      1\n                    )\n                  : _c(\n                      \"KAlert\",\n                      { attrs: { appearance: \"danger\" } },\n                      [\n                        _c(\"template\", { slot: \"alertMessage\" }, [\n                          _c(\"p\", [\n                            _vm._v(\n                              \"\\n                Please return to the first step and make sure to select an\\n                existing Mesh, or create a new one.\\n              \"\n                            )\n                          ])\n                        ])\n                      ],\n                      2\n                    )\n              ],\n              1\n            ),\n            _c(\n              \"template\",\n              { slot: \"start\" },\n              [\n                _vm.validate.meshName\n                  ? _c(\n                      \"div\",\n                      [\n                        _c(\"h3\", [\n                          _vm._v(\n                            \"\\n              Start your Dataplane\\n            \"\n                          )\n                        ]),\n                        _c(\"p\", [\n                          _vm._v(\n                            \"\\n              Now that \" +\n                              _vm._s(_vm.title) +\n                              \" knows that the configured Dataplane will eventually\\n              connect to it, it's time to first generate the credentials that will allow\\n              the Dataplane to successfully authenticate itself with the control plane,\\n              and then finally start the Dataplane process (powered by Envoy).\\n            \"\n                          )\n                        ]),\n                        _c(\n                          \"Tabs\",\n                          {\n                            attrs: {\n                              loaders: false,\n                              tabs: _vm.tabs,\n                              \"has-border\": true,\n                              \"initial-tab-override\": \"universal\"\n                            }\n                          },\n                          [\n                            _c(\n                              \"template\",\n                              { slot: \"universal\" },\n                              [\n                                _c(\"CodeView\", {\n                                  attrs: {\n                                    title: \"Generate Dataplane Token\",\n                                    \"copy-button-text\":\n                                      \"Copy Command to Clipboard\",\n                                    lang: \"bash\",\n                                    content: _vm.generateDpTokenCodeOutput\n                                  }\n                                }),\n                                _c(\"CodeView\", {\n                                  attrs: {\n                                    title: \"Start Dataplane Process\",\n                                    \"copy-button-text\":\n                                      \"Copy Command to Clipboard\",\n                                    lang: \"bash\",\n                                    content: _vm.startDpCodeOutput\n                                  }\n                                })\n                              ],\n                              1\n                            )\n                          ],\n                          2\n                        )\n                      ],\n                      1\n                    )\n                  : _c(\n                      \"KAlert\",\n                      { attrs: { appearance: \"danger\" } },\n                      [\n                        _c(\"template\", { slot: \"alertMessage\" }, [\n                          _c(\"p\", [\n                            _vm._v(\n                              \"\\n                Please return to the first step and make sure to select an\\n                existing Mesh, or create a new one.\\n              \"\n                            )\n                          ])\n                        ])\n                      ],\n                      2\n                    )\n              ],\n              1\n            ),\n            _c(\"template\", { slot: \"dataplane\" }, [\n              _c(\"h3\", [_vm._v(\"Dataplane\")]),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n            In \" +\n                    _vm._s(_vm.title) +\n                    \", a Dataplane entity represents a sidebar proxy running\\n            alongside one of your services. Dataplanes can be added in any Mesh\\n            that you may have created, and in Kubernetes, they will be auto-injected\\n            by \" +\n                    _vm._s(_vm.title) +\n                    \".\\n          \"\n                )\n              ])\n            ]),\n            _c(\"template\", { slot: \"example\" }, [\n              _c(\"h3\", [_vm._v(\"Example\")]),\n              _c(\"p\", [\n                _vm._v(\n                  \"\\n            Below is an example of a Dataplane resource output:\\n          \"\n                )\n              ]),\n              _c(\"code\", [\n                _c(\"pre\", [\n                  _vm._v(\n                    \"type: Dataplane\\nmesh: default\\nname: dp-echo-1\\nnetworking:\\n  address: 127.0.0.1\\n  inbound:\\n  - port: 10000\\n    servicePort: 9000\\n    tags:\\n      service: echo\"\n                  )\n                ])\n              ])\n            ])\n          ],\n          2\n        )\n      ],\n      1\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}