{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/views/Wizard/components/Scanner.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/views/Wizard/components/Scanner.vue","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport IconSuccess from '@/components/Utils/IconSuccess'\n\nexport default {\n  name: 'Scanner',\n  components: {\n    IconSuccess\n  },\n  props: {\n    interval: {\n      type: Number,\n      required: false,\n      default: 1000 // 1000ms = 1s\n    },\n    retries: {\n      type: Number,\n      required: false,\n      default: 3600 // 3600s = 1h\n    },\n    shouldStart: {\n      type: Boolean,\n      default: false\n    },\n    hasError: {\n      type: Boolean,\n      default: false\n    },\n    loaderFunction: {\n      type: Function,\n      required: true\n    },\n    canComplete: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      i: 0,\n      isRunning: false,\n      isComplete: false,\n      intervalId: null\n    }\n  },\n  watch: {\n    shouldStart (val, oldVal) {\n      if (val !== oldVal && val === true) {\n        this.runScanner()\n      }\n    }\n  },\n  mounted () {\n    // only run the function when instructed to\n    if (this.shouldStart === true) {\n      this.runScanner()\n    }\n  },\n  beforeDestroy () {\n    clearInterval(this.intervalId)\n  },\n  methods: {\n    runScanner () {\n      this.isRunning = true\n      this.isComplete = false\n\n      // setup the interval function\n      this.intervalId = setInterval(() => {\n        this.i++\n\n        // run our function\n        this.loaderFunction()\n\n        // complete the cycle if the scanner has reached the max\n        // amount of retries, or if the process has been marked complete\n        if (this.i === this.retries || this.canComplete === true) {\n          clearInterval(this.intervalId)\n          this.isRunning = false\n          this.isComplete = true\n        }\n      }, this.interval)\n    }\n  }\n}\n",{"version":3,"sources":["Scanner.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Scanner.vue","sourceRoot":"src/views/Wizard/components","sourcesContent":["<template>\n  <div\n    v-if=\"shouldStart\"\n    class=\"scanner\"\n  >\n    <div class=\"scanner-content\">\n      <!-- loading state -->\n      <KEmptyState cta-is-hidden>\n        <template slot=\"title\">\n          <div\n            v-if=\"isRunning\"\n            class=\"card-icon mb-3\"\n          >\n            <KIcon\n              icon=\"spinner\"\n              color=\"rgba(0, 0, 0, 0.1)\"\n              size=\"42\"\n            />\n          </div>\n          <div\n            v-if=\"isComplete && hasError === false && isRunning === false\"\n            class=\"card-icon mb-3\"\n          >\n            <IconSuccess />\n          </div>\n          <slot\n            v-if=\"isRunning\"\n            name=\"loading-title\"\n          />\n          <div v-if=\"isRunning === false\">\n            <slot\n              v-if=\"hasError\"\n              name=\"error-title\"\n            />\n            <slot\n              v-if=\"isComplete && hasError === false\"\n              name=\"complete-title\"\n            />\n          </div>\n        </template>\n        <template slot=\"message\">\n          <slot\n            v-if=\"isRunning\"\n            name=\"loading-content\"\n          />\n          <div v-if=\"isRunning === false\">\n            <slot\n              v-if=\"hasError\"\n              name=\"error-content\"\n            />\n            <slot\n              v-if=\"isComplete && hasError === false\"\n              name=\"complete-content\"\n            />\n          </div>\n        </template>\n      </KEmptyState>\n    </div>\n  </div>\n</template>\n\n<script>\nimport IconSuccess from '@/components/Utils/IconSuccess'\n\nexport default {\n  name: 'Scanner',\n  components: {\n    IconSuccess\n  },\n  props: {\n    interval: {\n      type: Number,\n      required: false,\n      default: 1000 // 1000ms = 1s\n    },\n    retries: {\n      type: Number,\n      required: false,\n      default: 3600 // 3600s = 1h\n    },\n    shouldStart: {\n      type: Boolean,\n      default: false\n    },\n    hasError: {\n      type: Boolean,\n      default: false\n    },\n    loaderFunction: {\n      type: Function,\n      required: true\n    },\n    canComplete: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      i: 0,\n      isRunning: false,\n      isComplete: false,\n      intervalId: null\n    }\n  },\n  watch: {\n    shouldStart (val, oldVal) {\n      if (val !== oldVal && val === true) {\n        this.runScanner()\n      }\n    }\n  },\n  mounted () {\n    // only run the function when instructed to\n    if (this.shouldStart === true) {\n      this.runScanner()\n    }\n  },\n  beforeDestroy () {\n    clearInterval(this.intervalId)\n  },\n  methods: {\n    runScanner () {\n      this.isRunning = true\n      this.isComplete = false\n\n      // setup the interval function\n      this.intervalId = setInterval(() => {\n        this.i++\n\n        // run our function\n        this.loaderFunction()\n\n        // complete the cycle if the scanner has reached the max\n        // amount of retries, or if the process has been marked complete\n        if (this.i === this.retries || this.canComplete === true) {\n          clearInterval(this.intervalId)\n          this.isRunning = false\n          this.isComplete = true\n        }\n      }, this.interval)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n// style override for the KEmptyState content\n.scanner-content {\n\n  .empty-state-wrapper p {\n    max-width: 100% !important;\n  }\n}\n</style>\n\n<style lang=\"scss\" scoped>\n.scanner {\n\n}\n\n.scanner-content {\n\n  p {\n    border: 1px solid red;\n    margin: 0;\n  }\n\n  .card-icon {\n    text-align: center;\n\n    img, svg {\n      display: block;\n      margin-left: auto;\n      margin-right: auto;\n    }\n  }\n\n  .empty-state-wrapper.empty-state-wrapper p {\n    max-width: 100% !important;\n  }\n}\n</style>\n"]}]}