{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/node_modules/@kongponents/kpop/KPop.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/node_modules/@kongponents/kpop/KPop.vue","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Popper from 'popper.js'\n\nexport default {\n  name: 'KPop',\n  props: {\n    /**\n     * The target element to append the popper to\n     */\n    target: {\n      type: String,\n      default: 'body'\n    },\n    /**\n     * The tag to wrap the popover around\n     */\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    /**\n     * The title of the Popover header\n     */\n    title: {\n      type: String,\n      default: ''\n    },\n    /**\n     * The position of the popover\n     * 'top' | 'bottom' | 'left' | 'right'\n     */\n    placement: {\n      type: String,\n      validator: function (value) {\n        return [\n          'top',\n          'bottom',\n          'left',\n          'right'\n        ].indexOf(value) !== -1\n      },\n      default: 'top'\n    },\n    /**\n     * How the Popover will trigger\n     * 'click' | 'hover'\n     */\n    trigger: {\n      type: String,\n      default: 'click',\n      validator: function (value) {\n        return [\n          'click',\n          'hover'\n        ].indexOf(value) !== -1\n      }\n    },\n    /**\n     * The width of the Popover body\n     */\n    width: {\n      type: String,\n      default: '200'\n    },\n    /**\n     * Custom classes that will be applied to the popover\n     */\n    popoverClasses: {\n      type: String,\n      default: 'k-popover'\n    },\n    /**\n     * Custom transition names that will be applied to the popover\n     */\n    popoverTransitions: {\n      type: String,\n      default: 'fade'\n    },\n    /**\n    * Custom popover timeout setting\n     */\n    popoverTimeout: {\n      type: Number,\n      default: 300\n    },\n    /**\n     * An optional flag passed in to trigger the Popover to hide - useful for external events like zooming or panning\n     */\n    hidePopover: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * A flag for disabling the popover\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n    * A flag indicating whether or not the element in the slot will be an SVG element\n    */\n    isSvg: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data () {\n    return {\n      popper: null,\n      reference: null,\n      isShow: false\n    }\n  },\n\n  computed: {\n    popoverStyle: function () {\n      return {\n        width: this.width + 'px'\n      }\n    }\n  },\n\n  watch: {\n    hidePopover: function () {\n      // whenever this prop gets updated, hide the popper\n      if (this.isShow) {\n        this.hidePopper()\n      }\n    }\n  },\n\n  mounted () {\n    if (this.disabled) return\n\n    if (!this.$el.children) {\n      this.reference = this.$el\n    } else {\n      this.reference = this.$el.children[0]\n    }\n\n    this.bindEvents()\n  },\n\n  beforeDestroy () {\n    const popper = this.$refs.popper\n    if (popper && this.trigger === 'click') {\n      this.reference.removeEventListener('click', this.handleClick)\n      popper.removeEventListener('click', this.showPopper)\n      document.documentElement.removeEventListener('click', this.handleClick)\n    } else if (this.reference) {\n      this.reference.removeEventListener('mouseenter', this.createInstance)\n      this.reference.removeEventListener('mouseleave', this.toggle)\n    }\n\n    this.destroy()\n  },\n\n  methods: {\n    hidePopper () {\n      if (this.trigger !== 'hover') {\n        this.isShow = false\n      }\n\n      this.timer = setTimeout(() => {\n        this.isShow = false\n        this.destroy()\n      }, this.popoverTimeout)\n    },\n\n    showPopper () {\n      this.isShow = true\n      if (this.timer) clearTimeout(this.timer)\n      if (this.popperTimer) clearTimeout(this.popperTimer)\n    },\n\n    async createInstance () {\n      this.showPopper()\n      // destroy any previous poppers before creating new one\n      this.destroy()\n      const placementMapper = {\n        top: 'top',\n        left: 'left',\n        right: 'right',\n        bottom: 'bottom'\n      }\n      const placement = placementMapper[this.placement] ? placementMapper[this.placement] : 'bottom'\n      const popperEl = this.$refs.popper\n\n      document.querySelector(this.target).appendChild(popperEl)\n      await this.$nextTick()\n      this.popper = new Popper(this.reference, popperEl, { placement, removeOnDestroy: true })\n\n      await this.$nextTick()\n      this.popper.update()\n    },\n\n    handleClick (e) {\n      e.stopPropagation()\n      if (this.reference && this.reference.contains(e.target)) {\n        if (this.isShow) {\n          this.hidePopper()\n        } else {\n          this.createInstance()\n        }\n      } else if (this.$refs.popper && this.$refs.popper.contains(e.target)) {\n        this.showPopper()\n      } else {\n        if (this.isShow) this.hidePopper()\n      }\n    },\n\n    bindEvents () {\n      const popper = this.$refs.popper\n      if (popper) {\n        if (this.trigger === 'hover') {\n          this.reference.addEventListener('mouseenter', this.createInstance)\n          this.reference.addEventListener('mouseleave', this.hidePopper)\n          popper.addEventListener('mouseenter', this.showPopper)\n          popper.addEventListener('mouseleave', this.hidePopper)\n        } else {\n          this.reference.addEventListener('click', this.handleClick)\n          popper.addEventListener('click', this.showPopper)\n          document.documentElement.addEventListener('click', this.handleClick)\n        }\n      }\n    },\n\n    destroy () {\n      if (this.popper) {\n        this.isShow = false\n        this.popper.destroy()\n        this.popper = null\n      }\n    }\n\n  }\n}\n",{"version":3,"sources":["KPop.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"KPop.vue","sourceRoot":"node_modules/@kongponents/kpop","sourcesContent":["<template>\n  <component :is=\"tag\">\n    <slot/>\n    <div\n      v-if=\"isSvg\"\n      :name=\"popoverTransitions\">\n      <foreignObject>\n        <div\n          v-show=\"isShow\"\n          ref=\"popper\"\n          :style=\"popoverStyle\"\n          :class=\"popoverClasses\">\n          <div\n            v-if=\"title\"\n            class=\"k-popover-title\">\n            <slot name=\"title\">{{ title }}</slot>\n          </div>\n          <div class=\"k-popover-content\">\n            <slot name=\"content\"/>\n          </div>\n        </div>\n      </foreignObject>\n    </div>\n    <transition\n      v-else\n      name=\"fade\">\n      <div\n        v-show=\"isShow\"\n        ref=\"popper\"\n        :style=\"popoverStyle\"\n        :class=\"popoverClasses\">\n        <div\n          v-if=\"title\"\n          class=\"k-popover-title\">\n          <slot name=\"title\">{{ title }}</slot>\n        </div>\n        <div class=\"k-popover-content\">\n          <slot name=\"content\"/>\n        </div>\n      </div>\n    </transition>\n  </component>\n</template>\n<script>\nimport Popper from 'popper.js'\n\nexport default {\n  name: 'KPop',\n  props: {\n    /**\n     * The target element to append the popper to\n     */\n    target: {\n      type: String,\n      default: 'body'\n    },\n    /**\n     * The tag to wrap the popover around\n     */\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    /**\n     * The title of the Popover header\n     */\n    title: {\n      type: String,\n      default: ''\n    },\n    /**\n     * The position of the popover\n     * 'top' | 'bottom' | 'left' | 'right'\n     */\n    placement: {\n      type: String,\n      validator: function (value) {\n        return [\n          'top',\n          'bottom',\n          'left',\n          'right'\n        ].indexOf(value) !== -1\n      },\n      default: 'top'\n    },\n    /**\n     * How the Popover will trigger\n     * 'click' | 'hover'\n     */\n    trigger: {\n      type: String,\n      default: 'click',\n      validator: function (value) {\n        return [\n          'click',\n          'hover'\n        ].indexOf(value) !== -1\n      }\n    },\n    /**\n     * The width of the Popover body\n     */\n    width: {\n      type: String,\n      default: '200'\n    },\n    /**\n     * Custom classes that will be applied to the popover\n     */\n    popoverClasses: {\n      type: String,\n      default: 'k-popover'\n    },\n    /**\n     * Custom transition names that will be applied to the popover\n     */\n    popoverTransitions: {\n      type: String,\n      default: 'fade'\n    },\n    /**\n    * Custom popover timeout setting\n     */\n    popoverTimeout: {\n      type: Number,\n      default: 300\n    },\n    /**\n     * An optional flag passed in to trigger the Popover to hide - useful for external events like zooming or panning\n     */\n    hidePopover: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * A flag for disabling the popover\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n    * A flag indicating whether or not the element in the slot will be an SVG element\n    */\n    isSvg: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data () {\n    return {\n      popper: null,\n      reference: null,\n      isShow: false\n    }\n  },\n\n  computed: {\n    popoverStyle: function () {\n      return {\n        width: this.width + 'px'\n      }\n    }\n  },\n\n  watch: {\n    hidePopover: function () {\n      // whenever this prop gets updated, hide the popper\n      if (this.isShow) {\n        this.hidePopper()\n      }\n    }\n  },\n\n  mounted () {\n    if (this.disabled) return\n\n    if (!this.$el.children) {\n      this.reference = this.$el\n    } else {\n      this.reference = this.$el.children[0]\n    }\n\n    this.bindEvents()\n  },\n\n  beforeDestroy () {\n    const popper = this.$refs.popper\n    if (popper && this.trigger === 'click') {\n      this.reference.removeEventListener('click', this.handleClick)\n      popper.removeEventListener('click', this.showPopper)\n      document.documentElement.removeEventListener('click', this.handleClick)\n    } else if (this.reference) {\n      this.reference.removeEventListener('mouseenter', this.createInstance)\n      this.reference.removeEventListener('mouseleave', this.toggle)\n    }\n\n    this.destroy()\n  },\n\n  methods: {\n    hidePopper () {\n      if (this.trigger !== 'hover') {\n        this.isShow = false\n      }\n\n      this.timer = setTimeout(() => {\n        this.isShow = false\n        this.destroy()\n      }, this.popoverTimeout)\n    },\n\n    showPopper () {\n      this.isShow = true\n      if (this.timer) clearTimeout(this.timer)\n      if (this.popperTimer) clearTimeout(this.popperTimer)\n    },\n\n    async createInstance () {\n      this.showPopper()\n      // destroy any previous poppers before creating new one\n      this.destroy()\n      const placementMapper = {\n        top: 'top',\n        left: 'left',\n        right: 'right',\n        bottom: 'bottom'\n      }\n      const placement = placementMapper[this.placement] ? placementMapper[this.placement] : 'bottom'\n      const popperEl = this.$refs.popper\n\n      document.querySelector(this.target).appendChild(popperEl)\n      await this.$nextTick()\n      this.popper = new Popper(this.reference, popperEl, { placement, removeOnDestroy: true })\n\n      await this.$nextTick()\n      this.popper.update()\n    },\n\n    handleClick (e) {\n      e.stopPropagation()\n      if (this.reference && this.reference.contains(e.target)) {\n        if (this.isShow) {\n          this.hidePopper()\n        } else {\n          this.createInstance()\n        }\n      } else if (this.$refs.popper && this.$refs.popper.contains(e.target)) {\n        this.showPopper()\n      } else {\n        if (this.isShow) this.hidePopper()\n      }\n    },\n\n    bindEvents () {\n      const popper = this.$refs.popper\n      if (popper) {\n        if (this.trigger === 'hover') {\n          this.reference.addEventListener('mouseenter', this.createInstance)\n          this.reference.addEventListener('mouseleave', this.hidePopper)\n          popper.addEventListener('mouseenter', this.showPopper)\n          popper.addEventListener('mouseleave', this.hidePopper)\n        } else {\n          this.reference.addEventListener('click', this.handleClick)\n          popper.addEventListener('click', this.showPopper)\n          document.documentElement.addEventListener('click', this.handleClick)\n        }\n      }\n    },\n\n    destroy () {\n      if (this.popper) {\n        this.isShow = false\n        this.popper.destroy()\n        this.popper = null\n      }\n    }\n\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n@import '~@kongponents/styles/_variables.scss';\n\n.k-popover {\n  z-index: 1000;\n  max-width: none;\n  font-size: var(--KPopBodySize, var(--type-sm, type(sm)));\n  text-align: left;\n  white-space: normal;\n  color: var(--KPopColor, var(--tblack-70, color(tblack-70)));\n  background-color: var(--KPopBackground, var(--twhite-1, color(twhite-1)));\n  border: 1px solid var(--KPopBorder, var(--grey-84, color(grey-84)));\n  border-radius: 3px;\n  -webkit-box-shadow: 0 0 12px rgba(0,0,0,.12);\n  box-shadow: 0 0 12px rgba(0,0,0,.12);\n  padding: 1rem;\n\n  .k-popover-title {\n    padding-bottom: 1rem;\n    margin-bottom: 1rem;\n    font-size: var(--KPopHeaderSize, var(--type-md, type(md)));\n    font-weight: 500;\n    border-bottom: 1px solid rgba(0,0,0,.10);\n    background-color: var(--KPopBackground, var(--twhite-1, color(twhite-1)));\n  }\n\n  &[x-placement^=\"bottom\"] {\n    margin-top: var(--spacing-md, spacing(md));\n\n    &:after, &:before {\n      bottom: 100%;\n      left: 50%;\n      border: solid transparent;\n      content: \" \";\n      height: 0;\n      width: 0;\n      position: absolute;\n      pointer-events: none;\n    }\n\n    &:after {\n      border-color: rgba(255, 255, 255, 0);\n      border-bottom-color: var(--KPopBackground, var(--twhite-1, color(twhite-1)));\n      border-width: 10px;\n      margin-left: -10px;\n    }\n\n    &:before {\n      border-color: rgba(250, 250, 250, 0);\n      border-bottom-color: var(--KPopBorder, var(--grey-84, color(grey-84)));\n      border-width: 11px;\n      margin-left: -11px;\n    }\n  }\n\n  &[x-placement^=\"top\"] {\n    margin-bottom: var(--spacing-md, spacing(md));\n\n    &:after, &:before {\n      top: 100%;\n      left: 50%;\n      border: solid transparent;\n      content: \" \";\n      height: 0;\n      width: 0;\n      position: absolute;\n      pointer-events: none;\n    }\n\n    &:after {\n      border-color: rgba(255, 255, 255, 0);\n      border-top-color: var(--KPopBackground, var(--twhite-1, color(twhite-1)));\n      border-width: 10px;\n      margin-left: -10px;\n    }\n\n    &:before {\n      border-color: rgba(250, 250, 250, 0);\n      border-top-color: var(--KPopBorder, var(--grey-84, color(grey-84)));\n      border-width: 11px;\n      margin-left: -11px;\n    }\n  }\n\n  &[x-placement^=\"left\"] {\n    margin-right: var(--spacing-md, spacing(md));\n\n    &:after, &:before {\n      left: 100%;\n      top: 50%;\n      border: solid transparent;\n      content: \" \";\n      height: 0;\n      width: 0;\n      position: absolute;\n      pointer-events: none;\n    }\n\n    &:after {\n      border-color: rgba(255, 255, 255, 0);\n      border-left-color: var(--KPopBackground, var(--twhite-1, color(twhite-1)));\n      border-width: 10px;\n      margin-top: -10px;\n    }\n\n    &:before {\n      border-color: rgba(250, 250, 250, 0);\n      border-left-color: var(--KPopBorder, var(--grey-84, color(grey-84)));\n      border-width: 11px;\n      margin-top: -11px;\n    }\n  }\n\n  &[x-placement^=\"right\"] {\n    margin-left: var(--spacing-md, spacing(md));\n\n    &:after, &:before {\n      right: 100%;\n      top: 50%;\n      border: solid transparent;\n      content: \" \";\n      height: 0;\n      width: 0;\n      position: absolute;\n      pointer-events: none;\n    }\n\n    &:after {\n      border-color: rgba(255, 255, 255, 0);\n      border-right-color: var(--KPopBackground, var(--twhite-1, color(twhite-1)));\n      border-width: 10px;\n      margin-top: -10px;\n    }\n\n    &:before {\n      border-color: rgba(250, 250, 250, 0);\n      border-right-color: var(--KPopBorder, var(--grey-84, color(grey-84)));\n      border-width: 11px;\n      margin-top: -11px;\n    }\n  }\n}\n\n/** Animations */\n$transition-speed: .3s !default;\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.fade-enter-active,\n.fadeIn,\n.fade-leave-active,\n.fadeOut {\n  animation-duration: $transition-speed;\n  animation-fill-mode: both;\n}\n.fade-enter-active,\n.fadeIn {\n  animation-name: fadeIn;\n}\n.fade-leave-active,\n.fadeOut {\n  animation-name: fadeOut;\n}\n</style>\n"]}]}