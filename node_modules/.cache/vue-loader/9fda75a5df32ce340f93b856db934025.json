{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/views/Policies/ProxyTemplates.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/views/Policies/ProxyTemplates.vue","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getSome } from '@/helpers'\nimport sortEntities from '@/mixins/EntitySorter'\nimport FrameSkeleton from '@/components/Skeletons/FrameSkeleton'\nimport Pagination from '@/components/Pagination'\nimport DataOverview from '@/components/Skeletons/DataOverview'\nimport Tabs from '@/components/Utils/Tabs'\nimport YamlView from '@/components/Skeletons/YamlView'\nimport LabelList from '@/components/Utils/LabelList'\n\nexport default {\n  name: 'ProxyTemplates',\n  metaInfo: {\n    title: 'Proxy Templates'\n  },\n  components: {\n    FrameSkeleton,\n    Pagination,\n    DataOverview,\n    Tabs,\n    YamlView,\n    LabelList\n  },\n  mixins: [\n    sortEntities\n  ],\n  data () {\n    return {\n      isLoading: true,\n      isEmpty: false,\n      hasError: false,\n      entityIsLoading: true,\n      entityIsEmpty: false,\n      entityHasError: false,\n      tableDataIsEmpty: false,\n      empty_state: {\n        title: 'No Data',\n        message: 'There are no Proxy Templates present.'\n      },\n      tableData: {\n        headers: [\n          { key: 'actions', hideLabel: true },\n          { label: 'Name', key: 'name' },\n          { label: 'Mesh', key: 'mesh' },\n          { label: 'Type', key: 'type' }\n        ],\n        data: []\n      },\n      tabs: [\n        {\n          hash: '#overview',\n          title: 'Overview'\n        },\n        {\n          hash: '#yaml',\n          title: 'YAML'\n        }\n      ],\n      entity: null,\n      rawEntity: null,\n      firstEntity: null,\n      pageSize: this.$pageSize,\n      pageOffset: null,\n      next: null,\n      hasNext: false,\n      previous: []\n    }\n  },\n  computed: {\n    tabGroupTitle () {\n      const entity = this.entity\n\n      if (entity) {\n        return `Proxy Template: ${entity.name}`\n      } else {\n        return null\n      }\n    },\n    entityOverviewTitle () {\n      const entity = this.entity\n\n      if (entity) {\n        return `Entity Overview for ${entity.name}`\n      } else {\n        return null\n      }\n    }\n  },\n  watch: {\n    '$route' (to, from) {\n      this.init()\n    }\n  },\n  beforeMount () {\n    this.init()\n  },\n  methods: {\n    init () {\n      this.loadData()\n    },\n    goToPreviousPage () {\n      this.pageOffset = this.previous.pop()\n      this.next = null\n\n      this.loadData()\n    },\n    goToNextPage () {\n      this.previous.push(this.pageOffset)\n      this.pageOffset = this.next\n      this.next = null\n\n      this.loadData()\n    },\n    tableAction (ev) {\n      const data = ev\n\n      // reset back to the first tab\n      this.$store.dispatch('updateSelectedTab', this.tabs[0].hash)\n\n      // set the active table row\n      this.$store.dispatch('updateSelectedTableRow', ev.name)\n\n      // load the data into the tabs\n      this.getEntity(data)\n    },\n    loadData () {\n      this.isLoading = true\n      this.isEmpty = false\n\n      const mesh = this.$route.params.mesh\n\n      const params = {\n        size: this.pageSize,\n        offset: this.pageOffset\n      }\n\n      const endpoint = (mesh === 'all')\n        ? this.$api.getAllProxyTemplates(params)\n        : this.$api.getAllProxyTemplatesFromMesh(mesh)\n\n      const getProxyTemplates = () => {\n        return endpoint\n          .then(response => {\n            if (response.items.length > 0) {\n              const items = response.items\n\n              // sort the table data by name and the mesh it's associated with\n              this.sortEntities(items)\n\n              // set the first item as the default for initial load\n              this.firstEntity = items[0].name\n\n              // load the YAML entity for the first item on page load\n              this.getEntity(items[0])\n\n              // set the selected table row for the first item on page load\n              this.$store.dispatch('updateSelectedTableRow', this.firstEntity)\n\n              this.tableData.data = [...items]\n              this.tableDataIsEmpty = false\n            } else {\n              this.tableData.data = []\n              this.tableDataIsEmpty = true\n\n              this.getEntity(null)\n            }\n          })\n          .catch(error => {\n            this.hasError = true\n\n            console.error(error)\n          })\n          .finally(() => {\n            setTimeout(() => {\n              this.isLoading = false\n            }, process.env.VUE_APP_DATA_TIMEOUT)\n          })\n      }\n\n      getProxyTemplates()\n    },\n    getEntity (entity) {\n      this.entityIsLoading = true\n      this.entityIsEmpty = false\n\n      const mesh = this.$route.params.mesh\n\n      if (entity && entity !== null) {\n        const entityMesh = (mesh === 'all')\n          ? entity.mesh\n          : mesh\n\n        return this.$api.getProxyTemplate(entityMesh, entity.name)\n          .then(response => {\n            if (response) {\n              const selected = ['type', 'name', 'mesh']\n\n              this.entity = getSome(response, selected)\n              this.rawEntity = response\n            } else {\n              this.entity = null\n              this.entityIsEmpty = true\n            }\n          })\n          .catch(error => {\n            this.entityHasError = true\n            console.error(error)\n          })\n          .finally(() => {\n            setTimeout(() => {\n              this.entityIsLoading = false\n            }, process.env.VUE_APP_DATA_TIMEOUT)\n          })\n      } else {\n        setTimeout(() => {\n          this.entityIsEmpty = true\n          this.entityIsLoading = false\n        }, process.env.VUE_APP_DATA_TIMEOUT)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["ProxyTemplates.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"ProxyTemplates.vue","sourceRoot":"src/views/Policies","sourcesContent":["<template>\n  <div class=\"proxy-templates\">\n    <FrameSkeleton>\n      <DataOverview\n        :page-size=\"pageSize\"\n        :has-error=\"hasError\"\n        :is-loading=\"isLoading\"\n        :is-empty=\"isEmpty\"\n        :empty-state=\"empty_state\"\n        :display-data-table=\"true\"\n        :table-data=\"tableData\"\n        :table-data-is-empty=\"tableDataIsEmpty\"\n        table-data-function-text=\"View\"\n        table-data-row=\"name\"\n        @tableAction=\"tableAction\"\n        @reloadData=\"loadData\"\n      >\n        <template slot=\"pagination\">\n          <Pagination\n            :has-previous=\"previous.length > 0\"\n            :has-next=\"hasNext\"\n            @next=\"goToNextPage\"\n            @previous=\"goToPreviousPage\"\n          />\n        </template>\n      </DataOverview>\n      <Tabs\n        :has-error=\"hasError\"\n        :is-loading=\"isLoading\"\n        :is-empty=\"isEmpty\"\n        :tabs=\"tabs\"\n        :tab-group-title=\"tabGroupTitle\"\n        initial-tab-override=\"overview\"\n      >\n        <template slot=\"overview\">\n          <LabelList\n            :has-error=\"entityHasError\"\n            :is-loading=\"entityIsLoading\"\n            :is-empty=\"entityIsEmpty\"\n            :items=\"entity\"\n          />\n        </template>\n        <template slot=\"yaml\">\n          <YamlView\n            :title=\"entityOverviewTitle\"\n            :has-error=\"entityHasError\"\n            :is-loading=\"entityIsLoading\"\n            :is-empty=\"entityIsEmpty\"\n            :content=\"rawEntity\"\n          />\n        </template>\n      </Tabs>\n    </FrameSkeleton>\n  </div>\n</template>\n\n<script>\nimport { getSome } from '@/helpers'\nimport sortEntities from '@/mixins/EntitySorter'\nimport FrameSkeleton from '@/components/Skeletons/FrameSkeleton'\nimport Pagination from '@/components/Pagination'\nimport DataOverview from '@/components/Skeletons/DataOverview'\nimport Tabs from '@/components/Utils/Tabs'\nimport YamlView from '@/components/Skeletons/YamlView'\nimport LabelList from '@/components/Utils/LabelList'\n\nexport default {\n  name: 'ProxyTemplates',\n  metaInfo: {\n    title: 'Proxy Templates'\n  },\n  components: {\n    FrameSkeleton,\n    Pagination,\n    DataOverview,\n    Tabs,\n    YamlView,\n    LabelList\n  },\n  mixins: [\n    sortEntities\n  ],\n  data () {\n    return {\n      isLoading: true,\n      isEmpty: false,\n      hasError: false,\n      entityIsLoading: true,\n      entityIsEmpty: false,\n      entityHasError: false,\n      tableDataIsEmpty: false,\n      empty_state: {\n        title: 'No Data',\n        message: 'There are no Proxy Templates present.'\n      },\n      tableData: {\n        headers: [\n          { key: 'actions', hideLabel: true },\n          { label: 'Name', key: 'name' },\n          { label: 'Mesh', key: 'mesh' },\n          { label: 'Type', key: 'type' }\n        ],\n        data: []\n      },\n      tabs: [\n        {\n          hash: '#overview',\n          title: 'Overview'\n        },\n        {\n          hash: '#yaml',\n          title: 'YAML'\n        }\n      ],\n      entity: null,\n      rawEntity: null,\n      firstEntity: null,\n      pageSize: this.$pageSize,\n      pageOffset: null,\n      next: null,\n      hasNext: false,\n      previous: []\n    }\n  },\n  computed: {\n    tabGroupTitle () {\n      const entity = this.entity\n\n      if (entity) {\n        return `Proxy Template: ${entity.name}`\n      } else {\n        return null\n      }\n    },\n    entityOverviewTitle () {\n      const entity = this.entity\n\n      if (entity) {\n        return `Entity Overview for ${entity.name}`\n      } else {\n        return null\n      }\n    }\n  },\n  watch: {\n    '$route' (to, from) {\n      this.init()\n    }\n  },\n  beforeMount () {\n    this.init()\n  },\n  methods: {\n    init () {\n      this.loadData()\n    },\n    goToPreviousPage () {\n      this.pageOffset = this.previous.pop()\n      this.next = null\n\n      this.loadData()\n    },\n    goToNextPage () {\n      this.previous.push(this.pageOffset)\n      this.pageOffset = this.next\n      this.next = null\n\n      this.loadData()\n    },\n    tableAction (ev) {\n      const data = ev\n\n      // reset back to the first tab\n      this.$store.dispatch('updateSelectedTab', this.tabs[0].hash)\n\n      // set the active table row\n      this.$store.dispatch('updateSelectedTableRow', ev.name)\n\n      // load the data into the tabs\n      this.getEntity(data)\n    },\n    loadData () {\n      this.isLoading = true\n      this.isEmpty = false\n\n      const mesh = this.$route.params.mesh\n\n      const params = {\n        size: this.pageSize,\n        offset: this.pageOffset\n      }\n\n      const endpoint = (mesh === 'all')\n        ? this.$api.getAllProxyTemplates(params)\n        : this.$api.getAllProxyTemplatesFromMesh(mesh)\n\n      const getProxyTemplates = () => {\n        return endpoint\n          .then(response => {\n            if (response.items.length > 0) {\n              const items = response.items\n\n              // sort the table data by name and the mesh it's associated with\n              this.sortEntities(items)\n\n              // set the first item as the default for initial load\n              this.firstEntity = items[0].name\n\n              // load the YAML entity for the first item on page load\n              this.getEntity(items[0])\n\n              // set the selected table row for the first item on page load\n              this.$store.dispatch('updateSelectedTableRow', this.firstEntity)\n\n              this.tableData.data = [...items]\n              this.tableDataIsEmpty = false\n            } else {\n              this.tableData.data = []\n              this.tableDataIsEmpty = true\n\n              this.getEntity(null)\n            }\n          })\n          .catch(error => {\n            this.hasError = true\n\n            console.error(error)\n          })\n          .finally(() => {\n            setTimeout(() => {\n              this.isLoading = false\n            }, process.env.VUE_APP_DATA_TIMEOUT)\n          })\n      }\n\n      getProxyTemplates()\n    },\n    getEntity (entity) {\n      this.entityIsLoading = true\n      this.entityIsEmpty = false\n\n      const mesh = this.$route.params.mesh\n\n      if (entity && entity !== null) {\n        const entityMesh = (mesh === 'all')\n          ? entity.mesh\n          : mesh\n\n        return this.$api.getProxyTemplate(entityMesh, entity.name)\n          .then(response => {\n            if (response) {\n              const selected = ['type', 'name', 'mesh']\n\n              this.entity = getSome(response, selected)\n              this.rawEntity = response\n            } else {\n              this.entity = null\n              this.entityIsEmpty = true\n            }\n          })\n          .catch(error => {\n            this.entityHasError = true\n            console.error(error)\n          })\n          .finally(() => {\n            setTimeout(() => {\n              this.entityIsLoading = false\n            }, process.env.VUE_APP_DATA_TIMEOUT)\n          })\n      } else {\n        setTimeout(() => {\n          this.entityIsEmpty = true\n          this.entityIsLoading = false\n        }, process.env.VUE_APP_DATA_TIMEOUT)\n      }\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n"]}]}