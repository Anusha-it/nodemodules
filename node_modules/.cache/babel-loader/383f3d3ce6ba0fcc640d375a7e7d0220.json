{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/ksagar/vueproj/sample/src/store/index.js","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/store/index.js","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ksagar/vueproj/sample/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport sidebar from '@/store/modules/sidebar'; // import workspaces from '@/store/modules/workspaces'\n\nVue.use(Vuex);\nexport default (function (api) {\n  var store = new Vuex.Store({\n    modules: {\n      sidebar: sidebar // workspaces\n\n    },\n    state: {\n      config: null,\n      environment: null,\n      onboardingComplete: false,\n      globalLoading: null,\n      meshPageSize: 500,\n      meshes: [],\n      dataplanes: [],\n      selectedMesh: 'all',\n      // shows all meshes on initial load\n      totalMeshCount: 0,\n      totalDataplaneCount: 0,\n      totalHealthCheckCount: 0,\n      totalProxyTemplateCount: 0,\n      totalTrafficLogCount: 0,\n      totalTrafficPermissionCount: 0,\n      totalTrafficRouteCount: 0,\n      totalTrafficTraceCount: 0,\n      totalFaultInjectionCount: 0,\n      totalDataplaneList: [],\n      anyDataplanesOffline: null,\n      totalDataplaneCountFromMesh: 0,\n      totalTrafficRoutesCountFromMesh: 0,\n      totalTrafficPermissionsCountFromMesh: 0,\n      totalTrafficLogsCountFromMesh: 0,\n      totalTrafficTracesCountFromMesh: 0,\n      totalFaultInjectionsCountFromMesh: 0,\n      totalHealthChecksCountFromMesh: 0,\n      totalProxyTemplatesCountFromMesh: 0,\n      tagline: null,\n      version: null,\n      status: null,\n      selectedTab: '#overview',\n      selectedTableRow: null,\n      storedWizardData: null\n    },\n    getters: {\n      getOnboardingStatus: function getOnboardingStatus(state) {\n        return state.onboardingComplete;\n      },\n      globalLoading: function globalLoading(state) {\n        return state.globalLoading;\n      },\n      getSelectedMesh: function getSelectedMesh(state) {\n        return state.selectedMesh;\n      },\n      getMeshList: function getMeshList(state) {\n        return state.meshes;\n      },\n      getDataplanes: function getDataplanes(state) {\n        return state.dataplanes;\n      },\n      getDataplanesList: function getDataplanesList(state) {\n        return state.totalDataplaneList;\n      },\n      getAnyDpOffline: function getAnyDpOffline(state) {\n        return state.anyDataplanesOffline;\n      },\n      getTotalMeshCount: function getTotalMeshCount(state) {\n        return state.totalMeshCount;\n      },\n      getTotalDataplaneCount: function getTotalDataplaneCount(state) {\n        return state.totalDataplaneCount;\n      },\n      getTotalHealthCheckCount: function getTotalHealthCheckCount(state) {\n        return state.totalHealthCheckCount;\n      },\n      getTotalProxyTemplateCount: function getTotalProxyTemplateCount(state) {\n        return state.totalProxyTemplateCount;\n      },\n      getTotalTrafficLogCount: function getTotalTrafficLogCount(state) {\n        return state.totalTrafficLogCount;\n      },\n      getTotalTrafficPermissionCount: function getTotalTrafficPermissionCount(state) {\n        return state.totalTrafficPermissionCount;\n      },\n      getTotalTrafficRouteCount: function getTotalTrafficRouteCount(state) {\n        return state.totalTrafficRouteCount;\n      },\n      getTotalTrafficTraceCount: function getTotalTrafficTraceCount(state) {\n        return state.totalTrafficTraceCount;\n      },\n      getTotalFaultInjectionCount: function getTotalFaultInjectionCount(state) {\n        return state.totalFaultInjectionCount;\n      },\n      getTotalDataplaneCountFromMesh: function getTotalDataplaneCountFromMesh(state) {\n        return state.totalDataplaneCountFromMesh;\n      },\n      getTotalTrafficRoutesCountFromMesh: function getTotalTrafficRoutesCountFromMesh(state) {\n        return state.totalTrafficRoutesCountFromMesh;\n      },\n      getTotalTrafficPermissionsCountFromMesh: function getTotalTrafficPermissionsCountFromMesh(state) {\n        return state.totalTrafficPermissionsCountFromMesh;\n      },\n      getTotalHealthChecksFromMesh: function getTotalHealthChecksFromMesh(state) {\n        return state.totalHealthChecksCountFromMesh;\n      },\n      getTotalProxyTemplatesCountFromMesh: function getTotalProxyTemplatesCountFromMesh(state) {\n        return state.totalProxyTemplatesCountFromMesh;\n      },\n      getTrafficLogsFromMeshTotalCount: function getTrafficLogsFromMeshTotalCount(state) {\n        return state.totalTrafficLogsCountFromMesh;\n      },\n      getTrafficTracesFromMeshTotalCount: function getTrafficTracesFromMeshTotalCount(state) {\n        return state.totalTrafficTracesCountFromMesh;\n      },\n      getFaultInjectionsFromMeshTotalCount: function getFaultInjectionsFromMeshTotalCount(state) {\n        return state.totalFaultInjectionsCountFromMesh;\n      },\n      getVersion: function getVersion(state) {\n        return state.version;\n      },\n      getTagline: function getTagline(state) {\n        return state.tagline;\n      },\n      getStatus: function getStatus(state) {\n        return state.status;\n      },\n      getConfig: function getConfig(state) {\n        return state.config;\n      },\n      getSelectedTab: function getSelectedTab(state) {\n        return state.selectedTab;\n      },\n      getSelectedTableRow: function getSelectedTableRow(state) {\n        return state.selectedTableRow;\n      },\n      getEnvironment: function getEnvironment(state) {\n        return state.environment;\n      },\n      getStoredWizardData: function getStoredWizardData(state) {\n        return state.storedWizardData;\n      }\n    },\n    mutations: {\n      SET_ONBOARDING_STATUS: function SET_ONBOARDING_STATUS(state, status) {\n        return state.onboardingComplete = status;\n      },\n      SET_GLOBAL_LOADING: function SET_GLOBAL_LOADING(state, _ref) {\n        var globalLoading = _ref.globalLoading;\n        return state.globalLoading = globalLoading;\n      },\n      FETCH_ALL_MESHES: function FETCH_ALL_MESHES(state, meshes) {\n        return state.meshes = meshes;\n      },\n      FETCH_DATAPLANES_FROM_MESH: function FETCH_DATAPLANES_FROM_MESH(state, dataplanes) {\n        return state.dataplanes = dataplanes;\n      },\n      SET_SELECTED_MESH: function SET_SELECTED_MESH(state, mesh) {\n        return state.selectedMesh = mesh;\n      },\n      SET_TOTAL_MESH_COUNT: function SET_TOTAL_MESH_COUNT(state, count) {\n        return state.totalMeshCount = count;\n      },\n      SET_TOTAL_DATAPLANE_COUNT: function SET_TOTAL_DATAPLANE_COUNT(state, count) {\n        return state.totalDataplaneCount = count;\n      },\n      SET_TOTAL_HEALTH_CHECK_COUNT: function SET_TOTAL_HEALTH_CHECK_COUNT(state, count) {\n        return state.totalHealthCheckCount = count;\n      },\n      SET_TOTAL_PROXY_TEMPLATE_COUNT: function SET_TOTAL_PROXY_TEMPLATE_COUNT(state, count) {\n        return state.totalProxyTemplateCount = count;\n      },\n      SET_TOTAL_TRAFFIC_LOG_COUNT: function SET_TOTAL_TRAFFIC_LOG_COUNT(state, count) {\n        return state.totalTrafficLogCount = count;\n      },\n      SET_TOTAL_TRAFFIC_PERMISSION_COUNT: function SET_TOTAL_TRAFFIC_PERMISSION_COUNT(state, count) {\n        return state.totalTrafficPermissionCount = count;\n      },\n      SET_TOTAL_TRAFFIC_ROUTE_COUNT: function SET_TOTAL_TRAFFIC_ROUTE_COUNT(state, count) {\n        return state.totalTrafficRouteCount = count;\n      },\n      SET_TOTAL_TRAFFIC_TRACE_COUNT: function SET_TOTAL_TRAFFIC_TRACE_COUNT(state, count) {\n        return state.totalTrafficTraceCount = count;\n      },\n      SET_TOTAL_DP_LIST: function SET_TOTAL_DP_LIST(state, dataplanes) {\n        return state.totalDataplaneList = dataplanes;\n      },\n      SET_TOTAL_FAULT_INJECTION_COUNT: function SET_TOTAL_FAULT_INJECTION_COUNT(state, count) {\n        return state.totalFaultInjectionCount = count;\n      },\n      SET_ANY_DP_OFFLINE: function SET_ANY_DP_OFFLINE(state, status) {\n        return state.anyDataplanesOffline = status;\n      },\n      SET_TOTAL_DATAPLANE_COUNT_FROM_MESH: function SET_TOTAL_DATAPLANE_COUNT_FROM_MESH(state, count) {\n        return state.totalDataplaneCountFromMesh = count;\n      },\n      SET_TOTAL_TRAFFIC_ROUTES_COUNT_FROM_MESH: function SET_TOTAL_TRAFFIC_ROUTES_COUNT_FROM_MESH(state, count) {\n        return state.totalTrafficRoutesCountFromMesh = count;\n      },\n      SET_TOTAL_TRAFFIC_PERMISSIONS_COUNT_FROM_MESH: function SET_TOTAL_TRAFFIC_PERMISSIONS_COUNT_FROM_MESH(state, count) {\n        return state.totalTrafficPermissionsCountFromMesh = count;\n      },\n      SET_TOTAL_TRAFFIC_LOGS_COUNT_FROM_MESH: function SET_TOTAL_TRAFFIC_LOGS_COUNT_FROM_MESH(state, count) {\n        return state.totalTrafficLogsCountFromMesh = count;\n      },\n      SET_TOTAL_TRAFFIC_TRACES_COUNT_FROM_MESH: function SET_TOTAL_TRAFFIC_TRACES_COUNT_FROM_MESH(state, count) {\n        return state.totalTrafficTracesCountFromMesh = count;\n      },\n      SET_TOTAL_FAULT_INJECTIONS_COUNT_FROM_MESH: function SET_TOTAL_FAULT_INJECTIONS_COUNT_FROM_MESH(state, count) {\n        return state.totalFaultInjectionsCountFromMesh = count;\n      },\n      SET_TOTAL_HEALTH_CHECKS_COUNT_FROM_MESH: function SET_TOTAL_HEALTH_CHECKS_COUNT_FROM_MESH(state, count) {\n        return state.totalHealthChecksCountFromMesh = count;\n      },\n      SET_TOTAL_PROXY_TEMPLATE_COUNT_FROM_MESH: function SET_TOTAL_PROXY_TEMPLATE_COUNT_FROM_MESH(state, count) {\n        return state.totalProxyTemplatesCountFromMesh = count;\n      },\n      SET_VERSION: function SET_VERSION(state, version) {\n        return state.version = version;\n      },\n      SET_TAGLINE: function SET_TAGLINE(state, tagline) {\n        return state.tagline = tagline;\n      },\n      SET_STATUS: function SET_STATUS(state, status) {\n        return state.status = status;\n      },\n      SET_CONFIG_DATA: function SET_CONFIG_DATA(state, config) {\n        return state.config = config;\n      },\n      SET_NEW_TAB: function SET_NEW_TAB(state, tab) {\n        return state.selectedTab = tab;\n      },\n      SET_NEW_TABLE_ROW: function SET_NEW_TABLE_ROW(state, row) {\n        return state.selectedTableRow = row;\n      },\n      SET_ENVIRONMENT: function SET_ENVIRONMENT(state, value) {\n        return state.environment = value;\n      },\n      SET_WIZARD_DATA: function SET_WIZARD_DATA(state, value) {\n        return state.storedWizardData = value;\n      }\n    },\n    actions: {\n      // update the onboarding state\n      updateOnboardingStatus: function updateOnboardingStatus(_ref2, status) {\n        var commit = _ref2.commit;\n        commit('SET_ONBOARDING_STATUS', status);\n      },\n      // fetch all of the meshes from the API\n      fetchMeshList: function fetchMeshList(_ref3) {\n        var commit = _ref3.commit,\n            state = _ref3.state;\n        var params = {\n          size: state.meshPageSize\n        };\n        return api.getAllMeshes(params).then(function (response) {\n          commit('FETCH_ALL_MESHES', response);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // fetch all dataplanes from a specific mesh\n      fetchDataplanesFromMesh: function fetchDataplanesFromMesh(_ref4, mesh) {\n        var commit = _ref4.commit;\n        return api.getAllDataplanesFromMesh(mesh).then(function (response) {\n          commit('FETCH_DATAPLANES_FROM_MESH', response);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // update the selected mesh\n      updateSelectedMesh: function updateSelectedMesh(_ref5, mesh) {\n        var commit = _ref5.commit;\n        commit('SET_SELECTED_MESH', mesh);\n      },\n      // get the total number of meshes\n      getMeshTotalCount: function getMeshTotalCount(_ref6) {\n        var commit = _ref6.commit,\n            state = _ref6.state;\n        var params = {\n          size: state.meshPageSize\n        };\n        return api.getAllMeshes(params).then(function (response) {\n          var total = response.items.length;\n          commit('SET_TOTAL_MESH_COUNT', total);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the total number of dataplanes present\n      getDataplaneTotalCount: function getDataplaneTotalCount(_ref7) {\n        var commit = _ref7.commit;\n\n        var getItems = /*#__PURE__*/function () {\n          var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n            var entities, count;\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return api.getAllDataplanes();\n\n                  case 2:\n                    entities = _context.sent;\n                    count = entities.items.length;\n                    commit('SET_TOTAL_DATAPLANE_COUNT', count);\n\n                  case 5:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function getItems() {\n            return _ref8.apply(this, arguments);\n          };\n        }();\n\n        getItems();\n      },\n      // get the total number of health checks present\n      getHealthCheckTotalCount: function getHealthCheckTotalCount(_ref9) {\n        var commit = _ref9.commit;\n\n        var getItems = /*#__PURE__*/function () {\n          var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n            var entities, count;\n            return regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return api.getAllHealthChecks();\n\n                  case 2:\n                    entities = _context2.sent;\n                    count = entities.items.length;\n                    commit('SET_TOTAL_HEALTH_CHECK_COUNT', count);\n\n                  case 5:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          return function getItems() {\n            return _ref10.apply(this, arguments);\n          };\n        }();\n\n        getItems();\n      },\n      // get the total number of proxy templates present\n      getProxyTemplateTotalCount: function getProxyTemplateTotalCount(_ref11) {\n        var commit = _ref11.commit;\n\n        var getItems = /*#__PURE__*/function () {\n          var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n            var entities, count;\n            return regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return api.getAllProxyTemplates();\n\n                  case 2:\n                    entities = _context3.sent;\n                    count = entities.items.length;\n                    commit('SET_TOTAL_PROXY_TEMPLATE_COUNT', count);\n\n                  case 5:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          return function getItems() {\n            return _ref12.apply(this, arguments);\n          };\n        }();\n\n        getItems();\n      },\n      // get the total number of traffic logs present\n      getTrafficLogTotalCount: function getTrafficLogTotalCount(_ref13) {\n        var commit = _ref13.commit;\n\n        var getItems = /*#__PURE__*/function () {\n          var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n            var entities, count;\n            return regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return api.getAllTrafficLogs();\n\n                  case 2:\n                    entities = _context4.sent;\n                    count = entities.items.length;\n                    commit('SET_TOTAL_TRAFFIC_LOG_COUNT', count);\n\n                  case 5:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n\n          return function getItems() {\n            return _ref14.apply(this, arguments);\n          };\n        }();\n\n        getItems();\n      },\n      // get the total number of traffic permissions present\n      getTrafficPermissionTotalCount: function getTrafficPermissionTotalCount(_ref15) {\n        var commit = _ref15.commit;\n\n        var getItems = /*#__PURE__*/function () {\n          var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n            var entities, count;\n            return regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return api.getAllTrafficPermissions();\n\n                  case 2:\n                    entities = _context5.sent;\n                    count = entities.items.length;\n                    commit('SET_TOTAL_TRAFFIC_PERMISSION_COUNT', count);\n\n                  case 5:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n\n          return function getItems() {\n            return _ref16.apply(this, arguments);\n          };\n        }();\n\n        getItems();\n      },\n      // get the total number of traffic routes present\n      getTrafficRouteTotalCount: function getTrafficRouteTotalCount(_ref17) {\n        var commit = _ref17.commit;\n\n        var getItems = /*#__PURE__*/function () {\n          var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n            var entities, count;\n            return regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return api.getAllTrafficRoutes();\n\n                  case 2:\n                    entities = _context6.sent;\n                    count = entities.items.length;\n                    commit('SET_TOTAL_TRAFFIC_ROUTE_COUNT', count);\n\n                  case 5:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n\n          return function getItems() {\n            return _ref18.apply(this, arguments);\n          };\n        }();\n\n        getItems();\n      },\n      // get the total number of traffic traces present\n      getTrafficTraceTotalCount: function getTrafficTraceTotalCount(_ref19) {\n        var commit = _ref19.commit;\n\n        var getItems = /*#__PURE__*/function () {\n          var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n            var entities, count;\n            return regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.next = 2;\n                    return api.getAllTrafficTraces();\n\n                  case 2:\n                    entities = _context7.sent;\n                    count = entities.items.length;\n                    commit('SET_TOTAL_TRAFFIC_TRACE_COUNT', count);\n\n                  case 5:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }));\n\n          return function getItems() {\n            return _ref20.apply(this, arguments);\n          };\n        }();\n\n        getItems();\n      },\n      // get the total number of fault injections present\n      getFaultInjectionTotalCount: function getFaultInjectionTotalCount(_ref21) {\n        var commit = _ref21.commit;\n\n        var getItems = /*#__PURE__*/function () {\n          var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n            var entities, count;\n            return regeneratorRuntime.wrap(function _callee8$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _context8.next = 2;\n                    return api.getAllFaultInjections();\n\n                  case 2:\n                    entities = _context8.sent;\n                    count = entities.items.length;\n                    commit('SET_TOTAL_FAULT_INJECTION_COUNT', count);\n\n                  case 5:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _callee8);\n          }));\n\n          return function getItems() {\n            return _ref22.apply(this, arguments);\n          };\n        }();\n\n        getItems();\n      },\n      // this will get the current status of all dataplanes\n      getAllDataplanes: function getAllDataplanes(_ref23, params) {\n        var commit = _ref23.commit;\n\n        var getDataplanes = /*#__PURE__*/function () {\n          var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n            return regeneratorRuntime.wrap(function _callee10$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    return _context10.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n                      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(resolve, reject) {\n                        var result, states, dataplanes, items, i, itemName, itemMesh, itemStatus, _i2, statusVal, isOnline, anyDpOffline;\n\n                        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                          while (1) {\n                            switch (_context9.prev = _context9.next) {\n                              case 0:\n                                result = [];\n                                states = [];\n                                _context9.next = 4;\n                                return api.getAllDataplanes(params);\n\n                              case 4:\n                                dataplanes = _context9.sent;\n                                _context9.next = 7;\n                                return dataplanes.items;\n\n                              case 7:\n                                items = _context9.sent;\n                                i = 0;\n\n                              case 9:\n                                if (!(i < items.length)) {\n                                  _context9.next = 19;\n                                  break;\n                                }\n\n                                itemName = items[i].name;\n                                itemMesh = items[i].mesh;\n                                _context9.next = 14;\n                                return api.getDataplaneOverviewsFromMesh(itemMesh, itemName).then(function (response) {\n                                  var items = response.dataplaneInsight.subscriptions;\n\n                                  if (items && items.length > 0) {\n                                    for (var _i = 0; _i < items.length; _i++) {\n                                      var connectTime = items[_i].connectTime;\n                                      var disconnectTime = items[_i].disconnectTime;\n\n                                      if (connectTime && connectTime.length && !disconnectTime) {\n                                        return 'Online';\n                                      }\n                                    }\n                                  }\n\n                                  return 'Offline';\n                                });\n\n                              case 14:\n                                itemStatus = _context9.sent;\n                                // create the full data array\n                                result.push({\n                                  status: itemStatus,\n                                  name: itemName,\n                                  mesh: itemMesh\n                                });\n\n                              case 16:\n                                i++;\n                                _context9.next = 9;\n                                break;\n\n                              case 19:\n                                // create a simple flat status object with booleans for checking\n                                // if any dataplanes are offline\n                                for (_i2 = 0; _i2 < Object.values(result).length; _i2++) {\n                                  statusVal = Object.values(result[_i2])[0];\n                                  isOnline = !(statusVal === 'Offline' || statusVal === 'offline');\n                                  states.push(isOnline);\n                                } // if any of the dataplanes return false for being online\n                                // commit this so we can check against it\n\n\n                                anyDpOffline = states.some(function (i) {\n                                  return i === false;\n                                });\n                                commit('SET_ANY_DP_OFFLINE', anyDpOffline); // commit the total list of dataplanes\n\n                                commit('SET_TOTAL_DP_LIST', result); // resolve the promise\n\n                                resolve();\n\n                              case 24:\n                              case \"end\":\n                                return _context9.stop();\n                            }\n                          }\n                        }, _callee9);\n                      }));\n\n                      return function (_x, _x2) {\n                        return _ref25.apply(this, arguments);\n                      };\n                    }()));\n\n                  case 1:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _callee10);\n          }));\n\n          return function getDataplanes() {\n            return _ref24.apply(this, arguments);\n          };\n        }();\n\n        return getDataplanes();\n      },\n      // get the total number of dataplanes from a mesh\n      getDataplaneFromMeshTotalCount: function getDataplaneFromMeshTotalCount(_ref26, mesh) {\n        var commit = _ref26.commit;\n        return api.getAllDataplanesFromMesh(mesh).then(function (response) {\n          var total = response.items.length;\n          commit('SET_TOTAL_DATAPLANE_COUNT_FROM_MESH', total);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the total number of traffic routes from a mesh\n      getTrafficRoutesFromMeshTotalCount: function getTrafficRoutesFromMeshTotalCount(_ref27, mesh) {\n        var commit = _ref27.commit;\n        return api.getAllTrafficRoutesFromMesh(mesh).then(function (response) {\n          var total = response.items.length;\n          commit('SET_TOTAL_TRAFFIC_ROUTES_COUNT_FROM_MESH', total);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the total number of traffic permissions from a mesh\n      getTrafficPermissionsFromMeshTotalCount: function getTrafficPermissionsFromMeshTotalCount(_ref28, mesh) {\n        var commit = _ref28.commit;\n        return api.getAllTrafficPermissionsFromMesh(mesh).then(function (response) {\n          var total = response.items.length;\n          commit('SET_TOTAL_TRAFFIC_PERMISSIONS_COUNT_FROM_MESH', total);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the total number of traffic logs from a mesh\n      getTrafficLogsFromMeshTotalCount: function getTrafficLogsFromMeshTotalCount(_ref29, mesh) {\n        var commit = _ref29.commit;\n        return api.getAllTrafficLogsFromMesh(mesh).then(function (response) {\n          var total = response.items.length;\n          commit('SET_TOTAL_TRAFFIC_LOGS_COUNT_FROM_MESH', total);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the total number of traffic traces from a mesh\n      getTrafficTracesFromMeshTotalCount: function getTrafficTracesFromMeshTotalCount(_ref30, mesh) {\n        var commit = _ref30.commit;\n        return api.getAllTrafficTracesFromMesh(mesh).then(function (response) {\n          var total = response.items.length;\n          commit('SET_TOTAL_TRAFFIC_TRACES_COUNT_FROM_MESH', total);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the total number of fault injections from a mesh\n      getFaultInjectionsFromMeshTotalCount: function getFaultInjectionsFromMeshTotalCount(_ref31, mesh) {\n        var commit = _ref31.commit;\n        return api.getAllFaultInjectionsFromMesh(mesh).then(function (response) {\n          var total = response.items.length;\n          commit('SET_TOTAL_FAULT_INJECTIONS_COUNT_FROM_MESH', total);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the total number of health checks from a mesh\n      getHealthChecksFromMeshTotalCount: function getHealthChecksFromMeshTotalCount(_ref32, mesh) {\n        var commit = _ref32.commit;\n        return api.getAllHealthChecksFromMesh(mesh).then(function (response) {\n          var total = response.items.length;\n          commit('SET_TOTAL_HEALTH_CHECKS_COUNT_FROM_MESH', total);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the total proxy templates from a mesh\n      getProxyTemplatesFromMeshTotalCount: function getProxyTemplatesFromMeshTotalCount(_ref33, mesh) {\n        var commit = _ref33.commit;\n        return api.getAllProxyTemplatesFromMesh(mesh).then(function (response) {\n          var total = response.items.length;\n          commit('SET_TOTAL_PROXY_TEMPLATE_COUNT_FROM_MESH', total);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the current version\n      getVersion: function getVersion(_ref34) {\n        var commit = _ref34.commit;\n        return api.getInfo().then(function (response) {\n          commit('SET_VERSION', response.version);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the current tagline\n      getTagline: function getTagline(_ref35) {\n        var commit = _ref35.commit;\n        return api.getInfo().then(function (response) {\n          commit('SET_TAGLINE', response.tagline);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      },\n      // get the status of the API\n      getStatus: function getStatus(_ref36) {\n        var commit = _ref36.commit;\n        return api.getStatus().then(function (response) {\n          commit('SET_STATUS', response);\n        });\n      },\n      // get the general Kuma config (this differs from the API config endpoint)\n      getConfig: function getConfig(_ref37) {\n        var commit = _ref37.commit;\n        return api.getConfig().then(function (response) {\n          commit('SET_CONFIG_DATA', response);\n        });\n      },\n      // allows us to set the selected tab outside of the Tabs component\n      updateSelectedTab: function updateSelectedTab(_ref38, tab) {\n        var commit = _ref38.commit;\n        commit('SET_NEW_TAB', tab);\n      },\n      updateSelectedTableRow: function updateSelectedTableRow(_ref39, row) {\n        var commit = _ref39.commit;\n        commit('SET_NEW_TABLE_ROW', row);\n      },\n      // set the user's environment (this is discovered upon app launch)\n      updateEnvironment: function updateEnvironment(_ref40, value) {\n        var commit = _ref40.commit;\n        commit('SET_ENVIRONMENT', value);\n      },\n      // update the stored Wizard data for use in generating code output\n      updateWizardData: function updateWizardData(_ref41, value) {\n        var commit = _ref41.commit;\n        commit('SET_WIZARD_DATA', value);\n      }\n    }\n  });\n  return store;\n});",{"version":3,"sources":["/Users/ksagar/vueproj/sample/src/store/index.js"],"names":["Vue","Vuex","sidebar","use","api","store","Store","modules","state","config","environment","onboardingComplete","globalLoading","meshPageSize","meshes","dataplanes","selectedMesh","totalMeshCount","totalDataplaneCount","totalHealthCheckCount","totalProxyTemplateCount","totalTrafficLogCount","totalTrafficPermissionCount","totalTrafficRouteCount","totalTrafficTraceCount","totalFaultInjectionCount","totalDataplaneList","anyDataplanesOffline","totalDataplaneCountFromMesh","totalTrafficRoutesCountFromMesh","totalTrafficPermissionsCountFromMesh","totalTrafficLogsCountFromMesh","totalTrafficTracesCountFromMesh","totalFaultInjectionsCountFromMesh","totalHealthChecksCountFromMesh","totalProxyTemplatesCountFromMesh","tagline","version","status","selectedTab","selectedTableRow","storedWizardData","getters","getOnboardingStatus","getSelectedMesh","getMeshList","getDataplanes","getDataplanesList","getAnyDpOffline","getTotalMeshCount","getTotalDataplaneCount","getTotalHealthCheckCount","getTotalProxyTemplateCount","getTotalTrafficLogCount","getTotalTrafficPermissionCount","getTotalTrafficRouteCount","getTotalTrafficTraceCount","getTotalFaultInjectionCount","getTotalDataplaneCountFromMesh","getTotalTrafficRoutesCountFromMesh","getTotalTrafficPermissionsCountFromMesh","getTotalHealthChecksFromMesh","getTotalProxyTemplatesCountFromMesh","getTrafficLogsFromMeshTotalCount","getTrafficTracesFromMeshTotalCount","getFaultInjectionsFromMeshTotalCount","getVersion","getTagline","getStatus","getConfig","getSelectedTab","getSelectedTableRow","getEnvironment","getStoredWizardData","mutations","SET_ONBOARDING_STATUS","SET_GLOBAL_LOADING","FETCH_ALL_MESHES","FETCH_DATAPLANES_FROM_MESH","SET_SELECTED_MESH","mesh","SET_TOTAL_MESH_COUNT","count","SET_TOTAL_DATAPLANE_COUNT","SET_TOTAL_HEALTH_CHECK_COUNT","SET_TOTAL_PROXY_TEMPLATE_COUNT","SET_TOTAL_TRAFFIC_LOG_COUNT","SET_TOTAL_TRAFFIC_PERMISSION_COUNT","SET_TOTAL_TRAFFIC_ROUTE_COUNT","SET_TOTAL_TRAFFIC_TRACE_COUNT","SET_TOTAL_DP_LIST","SET_TOTAL_FAULT_INJECTION_COUNT","SET_ANY_DP_OFFLINE","SET_TOTAL_DATAPLANE_COUNT_FROM_MESH","SET_TOTAL_TRAFFIC_ROUTES_COUNT_FROM_MESH","SET_TOTAL_TRAFFIC_PERMISSIONS_COUNT_FROM_MESH","SET_TOTAL_TRAFFIC_LOGS_COUNT_FROM_MESH","SET_TOTAL_TRAFFIC_TRACES_COUNT_FROM_MESH","SET_TOTAL_FAULT_INJECTIONS_COUNT_FROM_MESH","SET_TOTAL_HEALTH_CHECKS_COUNT_FROM_MESH","SET_TOTAL_PROXY_TEMPLATE_COUNT_FROM_MESH","SET_VERSION","SET_TAGLINE","SET_STATUS","SET_CONFIG_DATA","SET_NEW_TAB","tab","SET_NEW_TABLE_ROW","row","SET_ENVIRONMENT","value","SET_WIZARD_DATA","actions","updateOnboardingStatus","commit","fetchMeshList","params","size","getAllMeshes","then","response","catch","error","console","fetchDataplanesFromMesh","getAllDataplanesFromMesh","updateSelectedMesh","getMeshTotalCount","total","items","length","getDataplaneTotalCount","getItems","getAllDataplanes","entities","getHealthCheckTotalCount","getAllHealthChecks","getProxyTemplateTotalCount","getAllProxyTemplates","getTrafficLogTotalCount","getAllTrafficLogs","getTrafficPermissionTotalCount","getAllTrafficPermissions","getTrafficRouteTotalCount","getAllTrafficRoutes","getTrafficTraceTotalCount","getAllTrafficTraces","getFaultInjectionTotalCount","getAllFaultInjections","Promise","resolve","reject","result","states","i","itemName","name","itemMesh","getDataplaneOverviewsFromMesh","dataplaneInsight","subscriptions","connectTime","disconnectTime","itemStatus","push","Object","values","statusVal","isOnline","anyDpOffline","some","getDataplaneFromMeshTotalCount","getTrafficRoutesFromMeshTotalCount","getAllTrafficRoutesFromMesh","getTrafficPermissionsFromMeshTotalCount","getAllTrafficPermissionsFromMesh","getAllTrafficLogsFromMesh","getAllTrafficTracesFromMesh","getAllFaultInjectionsFromMesh","getHealthChecksFromMeshTotalCount","getAllHealthChecksFromMesh","getProxyTemplatesFromMeshTotalCount","getAllProxyTemplatesFromMesh","getInfo","updateSelectedTab","updateSelectedTableRow","updateEnvironment","updateWizardData"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nimport sidebar from '@/store/modules/sidebar'\n// import workspaces from '@/store/modules/workspaces'\n\nVue.use(Vuex)\n\nexport default (api) => {\n  const store = new Vuex.Store({\n    modules: {\n      sidebar\n      // workspaces\n    },\n    state: {\n      config: null,\n      environment: null,\n      onboardingComplete: false,\n      globalLoading: null,\n      meshPageSize: 500,\n      meshes: [],\n      dataplanes: [],\n      selectedMesh: 'all', // shows all meshes on initial load\n      totalMeshCount: 0,\n      totalDataplaneCount: 0,\n      totalHealthCheckCount: 0,\n      totalProxyTemplateCount: 0,\n      totalTrafficLogCount: 0,\n      totalTrafficPermissionCount: 0,\n      totalTrafficRouteCount: 0,\n      totalTrafficTraceCount: 0,\n      totalFaultInjectionCount: 0,\n      totalDataplaneList: [],\n      anyDataplanesOffline: null,\n      totalDataplaneCountFromMesh: 0,\n      totalTrafficRoutesCountFromMesh: 0,\n      totalTrafficPermissionsCountFromMesh: 0,\n      totalTrafficLogsCountFromMesh: 0,\n      totalTrafficTracesCountFromMesh: 0,\n      totalFaultInjectionsCountFromMesh: 0,\n      totalHealthChecksCountFromMesh: 0,\n      totalProxyTemplatesCountFromMesh: 0,\n      tagline: null,\n      version: null,\n      status: null,\n      selectedTab: '#overview',\n      selectedTableRow: null,\n      storedWizardData: null\n    },\n    getters: {\n      getOnboardingStatus: (state) => state.onboardingComplete,\n      globalLoading: (state) => state.globalLoading,\n      getSelectedMesh: (state) => state.selectedMesh,\n      getMeshList: (state) => state.meshes,\n      getDataplanes: (state) => state.dataplanes,\n      getDataplanesList: (state) => state.totalDataplaneList,\n      getAnyDpOffline: (state) => state.anyDataplanesOffline,\n      getTotalMeshCount: (state) => state.totalMeshCount,\n      getTotalDataplaneCount: (state) => state.totalDataplaneCount,\n      getTotalHealthCheckCount: (state) => state.totalHealthCheckCount,\n      getTotalProxyTemplateCount: (state) => state.totalProxyTemplateCount,\n      getTotalTrafficLogCount: (state) => state.totalTrafficLogCount,\n      getTotalTrafficPermissionCount: (state) => state.totalTrafficPermissionCount,\n      getTotalTrafficRouteCount: (state) => state.totalTrafficRouteCount,\n      getTotalTrafficTraceCount: (state) => state.totalTrafficTraceCount,\n      getTotalFaultInjectionCount: (state) => state.totalFaultInjectionCount,\n      getTotalDataplaneCountFromMesh: (state) => state.totalDataplaneCountFromMesh,\n      getTotalTrafficRoutesCountFromMesh: (state) => state.totalTrafficRoutesCountFromMesh,\n      getTotalTrafficPermissionsCountFromMesh: (state) => state.totalTrafficPermissionsCountFromMesh,\n      getTotalHealthChecksFromMesh: (state) => state.totalHealthChecksCountFromMesh,\n      getTotalProxyTemplatesCountFromMesh: (state) => state.totalProxyTemplatesCountFromMesh,\n      getTrafficLogsFromMeshTotalCount: (state) => state.totalTrafficLogsCountFromMesh,\n      getTrafficTracesFromMeshTotalCount: (state) => state.totalTrafficTracesCountFromMesh,\n      getFaultInjectionsFromMeshTotalCount: (state) => state.totalFaultInjectionsCountFromMesh,\n      getVersion: (state) => state.version,\n      getTagline: (state) => state.tagline,\n      getStatus: (state) => state.status,\n      getConfig: (state) => state.config,\n      getSelectedTab: (state) => state.selectedTab,\n      getSelectedTableRow: (state) => state.selectedTableRow,\n      getEnvironment: (state) => state.environment,\n      getStoredWizardData: (state) => state.storedWizardData\n    },\n    mutations: {\n      SET_ONBOARDING_STATUS: (state, status) => (state.onboardingComplete = status),\n      SET_GLOBAL_LOADING: (state, { globalLoading }) => (state.globalLoading = globalLoading),\n      FETCH_ALL_MESHES: (state, meshes) => (state.meshes = meshes),\n      FETCH_DATAPLANES_FROM_MESH: (state, dataplanes) => (state.dataplanes = dataplanes),\n      SET_SELECTED_MESH: (state, mesh) => (state.selectedMesh = mesh),\n      SET_TOTAL_MESH_COUNT: (state, count) => (state.totalMeshCount = count),\n      SET_TOTAL_DATAPLANE_COUNT: (state, count) => (state.totalDataplaneCount = count),\n      SET_TOTAL_HEALTH_CHECK_COUNT: (state, count) => (state.totalHealthCheckCount = count),\n      SET_TOTAL_PROXY_TEMPLATE_COUNT: (state, count) => (state.totalProxyTemplateCount = count),\n      SET_TOTAL_TRAFFIC_LOG_COUNT: (state, count) => (state.totalTrafficLogCount = count),\n      SET_TOTAL_TRAFFIC_PERMISSION_COUNT: (state, count) => (state.totalTrafficPermissionCount = count),\n      SET_TOTAL_TRAFFIC_ROUTE_COUNT: (state, count) => (state.totalTrafficRouteCount = count),\n      SET_TOTAL_TRAFFIC_TRACE_COUNT: (state, count) => (state.totalTrafficTraceCount = count),\n      SET_TOTAL_DP_LIST: (state, dataplanes) => (state.totalDataplaneList = dataplanes),\n      SET_TOTAL_FAULT_INJECTION_COUNT: (state, count) => (state.totalFaultInjectionCount = count),\n      SET_ANY_DP_OFFLINE: (state, status) => (state.anyDataplanesOffline = status),\n      SET_TOTAL_DATAPLANE_COUNT_FROM_MESH: (state, count) => (state.totalDataplaneCountFromMesh = count),\n      SET_TOTAL_TRAFFIC_ROUTES_COUNT_FROM_MESH: (state, count) => (state.totalTrafficRoutesCountFromMesh = count),\n      SET_TOTAL_TRAFFIC_PERMISSIONS_COUNT_FROM_MESH: (state, count) => (state.totalTrafficPermissionsCountFromMesh = count),\n      SET_TOTAL_TRAFFIC_LOGS_COUNT_FROM_MESH: (state, count) => (state.totalTrafficLogsCountFromMesh = count),\n      SET_TOTAL_TRAFFIC_TRACES_COUNT_FROM_MESH: (state, count) => (state.totalTrafficTracesCountFromMesh = count),\n      SET_TOTAL_FAULT_INJECTIONS_COUNT_FROM_MESH: (state, count) => (state.totalFaultInjectionsCountFromMesh = count),\n      SET_TOTAL_HEALTH_CHECKS_COUNT_FROM_MESH: (state, count) => (state.totalHealthChecksCountFromMesh = count),\n      SET_TOTAL_PROXY_TEMPLATE_COUNT_FROM_MESH: (state, count) => (state.totalProxyTemplatesCountFromMesh = count),\n      SET_VERSION: (state, version) => (state.version = version),\n      SET_TAGLINE: (state, tagline) => (state.tagline = tagline),\n      SET_STATUS: (state, status) => (state.status = status),\n      SET_CONFIG_DATA: (state, config) => (state.config = config),\n      SET_NEW_TAB: (state, tab) => (state.selectedTab = tab),\n      SET_NEW_TABLE_ROW: (state, row) => (state.selectedTableRow = row),\n      SET_ENVIRONMENT: (state, value) => (state.environment = value),\n      SET_WIZARD_DATA: (state, value) => (state.storedWizardData = value)\n    },\n    actions: {\n      // update the onboarding state\n      updateOnboardingStatus ({ commit }, status) {\n        commit('SET_ONBOARDING_STATUS', status)\n      },\n\n      // fetch all of the meshes from the API\n      fetchMeshList ({ commit, state }) {\n        const params = {\n          size: state.meshPageSize\n        }\n\n        return api.getAllMeshes(params)\n          .then(response => {\n            commit('FETCH_ALL_MESHES', response)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // fetch all dataplanes from a specific mesh\n      fetchDataplanesFromMesh ({ commit }, mesh) {\n        return api.getAllDataplanesFromMesh(mesh)\n          .then(response => {\n            commit('FETCH_DATAPLANES_FROM_MESH', response)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // update the selected mesh\n      updateSelectedMesh ({ commit }, mesh) {\n        commit('SET_SELECTED_MESH', mesh)\n      },\n\n      // get the total number of meshes\n      getMeshTotalCount ({ commit, state }) {\n        const params = {\n          size: state.meshPageSize\n        }\n\n        return api.getAllMeshes(params)\n          .then(response => {\n            const total = response.items.length\n\n            commit('SET_TOTAL_MESH_COUNT', total)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the total number of dataplanes present\n      getDataplaneTotalCount ({ commit }) {\n        const getItems = async () => {\n          const entities = await api.getAllDataplanes()\n          const count = entities.items.length\n\n          commit('SET_TOTAL_DATAPLANE_COUNT', count)\n        }\n\n        getItems()\n      },\n\n      // get the total number of health checks present\n      getHealthCheckTotalCount ({ commit }) {\n        const getItems = async () => {\n          const entities = await api.getAllHealthChecks()\n          const count = entities.items.length\n\n          commit('SET_TOTAL_HEALTH_CHECK_COUNT', count)\n        }\n\n        getItems()\n      },\n\n      // get the total number of proxy templates present\n      getProxyTemplateTotalCount ({ commit }) {\n        const getItems = async () => {\n          const entities = await api.getAllProxyTemplates()\n          const count = entities.items.length\n\n          commit('SET_TOTAL_PROXY_TEMPLATE_COUNT', count)\n        }\n\n        getItems()\n      },\n\n      // get the total number of traffic logs present\n      getTrafficLogTotalCount ({ commit }) {\n        const getItems = async () => {\n          const entities = await api.getAllTrafficLogs()\n          const count = entities.items.length\n\n          commit('SET_TOTAL_TRAFFIC_LOG_COUNT', count)\n        }\n\n        getItems()\n      },\n\n      // get the total number of traffic permissions present\n      getTrafficPermissionTotalCount ({ commit }) {\n        const getItems = async () => {\n          const entities = await api.getAllTrafficPermissions()\n          const count = entities.items.length\n\n          commit('SET_TOTAL_TRAFFIC_PERMISSION_COUNT', count)\n        }\n\n        getItems()\n      },\n\n      // get the total number of traffic routes present\n      getTrafficRouteTotalCount ({ commit }) {\n        const getItems = async () => {\n          const entities = await api.getAllTrafficRoutes()\n          const count = entities.items.length\n\n          commit('SET_TOTAL_TRAFFIC_ROUTE_COUNT', count)\n        }\n\n        getItems()\n      },\n\n      // get the total number of traffic traces present\n      getTrafficTraceTotalCount ({ commit }) {\n        const getItems = async () => {\n          const entities = await api.getAllTrafficTraces()\n          const count = entities.items.length\n\n          commit('SET_TOTAL_TRAFFIC_TRACE_COUNT', count)\n        }\n\n        getItems()\n      },\n\n      // get the total number of fault injections present\n      getFaultInjectionTotalCount ({ commit }) {\n        const getItems = async () => {\n          const entities = await api.getAllFaultInjections()\n          const count = entities.items.length\n\n          commit('SET_TOTAL_FAULT_INJECTION_COUNT', count)\n        }\n\n        getItems()\n      },\n\n      // this will get the current status of all dataplanes\n      getAllDataplanes ({ commit }, params) {\n        const getDataplanes = async () => {\n          return new Promise(async (resolve, reject) => {\n            const result = []\n            const states = []\n\n            const dataplanes = await api.getAllDataplanes(params)\n            const items = await dataplanes.items\n\n            for (let i = 0; i < items.length; i++) {\n              const itemName = items[i].name\n              const itemMesh = items[i].mesh\n\n              const itemStatus = await api.getDataplaneOverviewsFromMesh(itemMesh, itemName)\n                .then(response => {\n                  const items = response.dataplaneInsight.subscriptions\n\n                  if (items && items.length > 0) {\n                    for (let i = 0; i < items.length; i++) {\n                      const connectTime = items[i].connectTime\n                      const disconnectTime = items[i].disconnectTime\n\n                      if (connectTime && connectTime.length && !disconnectTime) {\n                        return 'Online'\n                      }\n                    }\n                  }\n\n                  return 'Offline'\n                })\n\n              // create the full data array\n              result.push({\n                status: itemStatus,\n                name: itemName,\n                mesh: itemMesh\n              })\n            }\n\n            // create a simple flat status object with booleans for checking\n            // if any dataplanes are offline\n            for (let i = 0; i < Object.values(result).length; i++) {\n              const statusVal = Object.values(result[i])[0]\n              const isOnline = !(statusVal === 'Offline' || statusVal === 'offline')\n\n              states.push(isOnline)\n            }\n\n            // if any of the dataplanes return false for being online\n            // commit this so we can check against it\n            const anyDpOffline = states.some(i => i === false)\n\n            commit('SET_ANY_DP_OFFLINE', anyDpOffline)\n\n            // commit the total list of dataplanes\n            commit('SET_TOTAL_DP_LIST', result)\n\n            // resolve the promise\n            resolve()\n          })\n        }\n\n        return getDataplanes()\n      },\n\n      // get the total number of dataplanes from a mesh\n      getDataplaneFromMeshTotalCount ({ commit }, mesh) {\n        return api.getAllDataplanesFromMesh(mesh)\n          .then(response => {\n            const total = response.items.length\n\n            commit('SET_TOTAL_DATAPLANE_COUNT_FROM_MESH', total)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the total number of traffic routes from a mesh\n      getTrafficRoutesFromMeshTotalCount ({ commit }, mesh) {\n        return api.getAllTrafficRoutesFromMesh(mesh)\n          .then(response => {\n            const total = response.items.length\n\n            commit('SET_TOTAL_TRAFFIC_ROUTES_COUNT_FROM_MESH', total)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the total number of traffic permissions from a mesh\n      getTrafficPermissionsFromMeshTotalCount ({ commit }, mesh) {\n        return api.getAllTrafficPermissionsFromMesh(mesh)\n          .then(response => {\n            const total = response.items.length\n\n            commit('SET_TOTAL_TRAFFIC_PERMISSIONS_COUNT_FROM_MESH', total)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the total number of traffic logs from a mesh\n      getTrafficLogsFromMeshTotalCount ({ commit }, mesh) {\n        return api.getAllTrafficLogsFromMesh(mesh)\n          .then(response => {\n            const total = response.items.length\n\n            commit('SET_TOTAL_TRAFFIC_LOGS_COUNT_FROM_MESH', total)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the total number of traffic traces from a mesh\n      getTrafficTracesFromMeshTotalCount ({ commit }, mesh) {\n        return api.getAllTrafficTracesFromMesh(mesh)\n          .then(response => {\n            const total = response.items.length\n\n            commit('SET_TOTAL_TRAFFIC_TRACES_COUNT_FROM_MESH', total)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the total number of fault injections from a mesh\n      getFaultInjectionsFromMeshTotalCount ({ commit }, mesh) {\n        return api.getAllFaultInjectionsFromMesh(mesh)\n          .then(response => {\n            const total = response.items.length\n\n            commit('SET_TOTAL_FAULT_INJECTIONS_COUNT_FROM_MESH', total)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the total number of health checks from a mesh\n      getHealthChecksFromMeshTotalCount ({ commit }, mesh) {\n        return api.getAllHealthChecksFromMesh(mesh)\n          .then(response => {\n            const total = response.items.length\n\n            commit('SET_TOTAL_HEALTH_CHECKS_COUNT_FROM_MESH', total)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the total proxy templates from a mesh\n      getProxyTemplatesFromMeshTotalCount ({ commit }, mesh) {\n        return api.getAllProxyTemplatesFromMesh(mesh)\n          .then(response => {\n            const total = response.items.length\n\n            commit('SET_TOTAL_PROXY_TEMPLATE_COUNT_FROM_MESH', total)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the current version\n      getVersion ({ commit }) {\n        return api.getInfo()\n          .then(response => {\n            commit('SET_VERSION', response.version)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the current tagline\n      getTagline ({ commit }) {\n        return api.getInfo()\n          .then(response => {\n            commit('SET_TAGLINE', response.tagline)\n          })\n          .catch(error => {\n            console.error(error)\n          })\n      },\n\n      // get the status of the API\n      getStatus ({ commit }) {\n        return api.getStatus()\n          .then(response => {\n            commit('SET_STATUS', response)\n          })\n      },\n\n      // get the general Kuma config (this differs from the API config endpoint)\n      getConfig ({ commit }) {\n        return api.getConfig()\n          .then(response => {\n            commit('SET_CONFIG_DATA', response)\n          })\n      },\n\n      // allows us to set the selected tab outside of the Tabs component\n      updateSelectedTab ({ commit }, tab) {\n        commit('SET_NEW_TAB', tab)\n      },\n\n      updateSelectedTableRow ({ commit }, row) {\n        commit('SET_NEW_TABLE_ROW', row)\n      },\n\n      // set the user's environment (this is discovered upon app launch)\n      updateEnvironment ({ commit }, value) {\n        commit('SET_ENVIRONMENT', value)\n      },\n\n      // update the stored Wizard data for use in generating code output\n      updateWizardData ({ commit }, value) {\n        commit('SET_WIZARD_DATA', value)\n      }\n    }\n  })\n\n  return store\n}\n"]}]}