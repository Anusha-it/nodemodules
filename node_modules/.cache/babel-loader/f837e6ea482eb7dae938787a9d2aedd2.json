{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/node_modules/@kongponents/kicon/KIcon.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/node_modules/@kongponents/kicon/KIcon.vue","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport icons from \"./icons\";\nvar iconNames = Object.keys(icons);\nexport default {\n  name: 'KIcon',\n  props: {\n    /**\n     * Checks for valid icon name<br>\n     * 'back' | 'collapseExpand' | 'gateway' | 'gear' | 'info' | 'portal' | 'search' | 'security' | 'workspaces' | 'workspacesCollapsed' | 'vitals'\n     */\n    icon: {\n      type: String,\n      default: '',\n      validator: function validator(value) {\n        return iconNames.indexOf(value) !== -1;\n      },\n      required: true\n    },\n\n    /**\n     * Optional - Overrides default height and width with equal value\n     */\n    size: {\n      type: String,\n      default: '24'\n    },\n\n    /**\n     * Optional - Sets Fill color\n     */\n    color: {\n      type: String,\n      default: null\n    },\n\n    /**\n     * Optional - Defines viewbox dimensions\n     */\n    viewBox: {\n      type: String,\n      default: '0 0 24 24'\n    }\n  },\n  data: function data() {\n    return {\n      isSSR: false\n    };\n  },\n  computed: {\n    iconSVG: function iconSVG() {\n      return icons[this.icon];\n    },\n    doc: function doc() {\n      return new DOMParser().parseFromString(this.iconSVG, 'image/svg+xml');\n    },\n    svg: function svg() {\n      return this.doc.getElementsByTagName('svg')[0];\n    },\n    paths: function paths() {\n      return this.doc.querySelectorAll('path').length ? Array.from(this.doc.querySelectorAll('path')) : console.warn('(KIcon) Warning: SVG Path not found');\n    },\n    attributes: function attributes() {\n      var _this = this;\n\n      if (this.paths) {\n        var attributes = [];\n        this.paths.forEach(function (path) {\n          var pathAttributes = {};\n          var attrs = Array.from(path.attributes);\n          attrs.forEach(function (attr) {\n            var value = attr.value,\n                name = attr.name;\n            var hasPreservedColor = attrs.find(function (x) {\n              return x.nodeName === 'id' && x.nodeValue === 'preserveColor';\n            });\n\n            if (name === 'fill' && _this.color && !hasPreservedColor) {\n              pathAttributes[name] = _this.color;\n            } else {\n              pathAttributes[name] = value;\n            }\n          });\n          attributes.push(pathAttributes);\n        });\n        return attributes;\n      }\n    },\n    width: function width() {\n      return this.svg.getAttribute('width');\n    },\n    height: function height() {\n      return this.svg.getAttribute('height');\n    },\n    setSize: function setSize() {\n      return this.size || this.svg.getAttribute('width');\n    },\n    viewbox: function viewbox() {\n      return this.viewBox || this.svg.getAttribute('viewBox');\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Do not render KIcon until client is available\n    this.isSSR = true;\n  }\n};",{"version":3,"sources":["KIcon.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <svg\n    v-if=\"isSSR\"\n    :height=\"setSize || height\"\n    :width=\"setSize || width\"\n    :viewBox=\"viewbox\"\n    :class=\"`kong-icon-${icon}`\"\n    class=\"kong-icon\"\n    role=\"img\"\n  >\n    <title>{{ icon }}</title>\n    <g>\n      <path\n        v-for=\"(path, idx) in paths\"\n        :key=\"path.d\"\n        v-bind=\"attributes[idx]\"/>\n    </g>\n  </svg>\n</template>\n\n<script>\nimport icons from './icons'\nconst iconNames = Object.keys(icons)\n\nexport default {\n  name: 'KIcon',\n  props: {\n    /**\n     * Checks for valid icon name<br>\n     * 'back' | 'collapseExpand' | 'gateway' | 'gear' | 'info' | 'portal' | 'search' | 'security' | 'workspaces' | 'workspacesCollapsed' | 'vitals'\n     */\n    icon: {\n      type: String,\n      default: '',\n      validator: function (value) {\n        return iconNames.indexOf(value) !== -1\n      },\n      required: true\n    },\n    /**\n     * Optional - Overrides default height and width with equal value\n     */\n    size: {\n      type: String,\n      default: '24'\n    },\n    /**\n     * Optional - Sets Fill color\n     */\n    color: {\n      type: String,\n      default: null\n    },\n    /**\n     * Optional - Defines viewbox dimensions\n     */\n    viewBox: {\n      type: String,\n      default: '0 0 24 24'\n    }\n  },\n\n  data () {\n    return {\n      isSSR: false\n    }\n  },\n\n  computed: {\n    iconSVG () {\n      return icons[this.icon]\n    },\n    doc () {\n      return new DOMParser().parseFromString(this.iconSVG, 'image/svg+xml')\n    },\n    svg () {\n      return this.doc.getElementsByTagName('svg')[0]\n    },\n    paths () {\n      return this.doc.querySelectorAll('path').length ? Array.from(this.doc.querySelectorAll('path')) : console.warn('(KIcon) Warning: SVG Path not found')\n    },\n    attributes () {\n      if (this.paths) {\n        let attributes = []\n\n        this.paths.forEach(path => {\n          let pathAttributes = {}\n          let attrs = Array.from(path.attributes)\n\n          attrs.forEach((attr) => {\n            const { value, name } = attr\n            const hasPreservedColor = attrs.find(x => x.nodeName === 'id' && x.nodeValue === 'preserveColor')\n\n            if (name === 'fill' && this.color && !hasPreservedColor) {\n              pathAttributes[name] = this.color\n            } else {\n              pathAttributes[name] = value\n            }\n          })\n\n          attributes.push(pathAttributes)\n        })\n\n        return attributes\n      }\n    },\n    width () {\n      return this.svg.getAttribute('width')\n    },\n    height () {\n      return this.svg.getAttribute('height')\n    },\n    setSize () {\n      return this.size || this.svg.getAttribute('width')\n    },\n    viewbox () {\n      return this.viewBox || this.svg.getAttribute('viewBox')\n    }\n  },\n\n  beforeMount () {\n    // Do not render KIcon until client is available\n    this.isSSR = true\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.kong-icon {\n  &.kong-icon-spinner g {\n    transform-box: fill-box;\n    transform-origin: 50% 50%;\n    animation: spin 1.2s infinite linear;\n  }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(1turn); }\n}\n</style>\n"],"sourceRoot":"node_modules/@kongponents/kicon"}]}