{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/views/Entities/Meshes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/views/Entities/Meshes.vue","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/ksagar/vueproj/sample/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getSome, getOffset } from '@/helpers';\nimport sortEntities from '@/mixins/EntitySorter';\nimport FrameSkeleton from '@/components/Skeletons/FrameSkeleton';\nimport Pagination from '@/components/Pagination';\nimport DataOverview from '@/components/Skeletons/DataOverview';\nimport Tabs from '@/components/Utils/Tabs';\nimport YamlView from '@/components/Skeletons/YamlView';\nimport LabelList from '@/components/Utils/LabelList';\nexport default {\n  name: 'Meshes',\n  metaInfo: {\n    title: 'Meshes'\n  },\n  components: {\n    FrameSkeleton: FrameSkeleton,\n    Pagination: Pagination,\n    DataOverview: DataOverview,\n    Tabs: Tabs,\n    YamlView: YamlView,\n    LabelList: LabelList\n  },\n  mixins: [sortEntities],\n  data: function data() {\n    return {\n      isLoading: true,\n      isEmpty: false,\n      hasError: false,\n      entityIsLoading: true,\n      entityIsEmpty: false,\n      entityHasError: false,\n      tableDataIsEmpty: false,\n      empty_state: {\n        title: 'No Data',\n        message: 'There are no Meshes present.'\n      },\n      tableData: {\n        headers: [{\n          key: 'actions',\n          hideLabel: true\n        }, {\n          label: 'Name',\n          key: 'name'\n        }, {\n          label: 'Type',\n          key: 'type'\n        }],\n        data: []\n      },\n      tabs: [{\n        hash: '#overview',\n        title: 'Overview'\n      }, {\n        hash: '#yaml',\n        title: 'YAML'\n      }],\n      entity: null,\n      rawEntity: null,\n      firstEntity: null,\n      pageSize: this.$pageSize,\n      pageOffset: null,\n      next: null,\n      hasNext: false,\n      previous: []\n    };\n  },\n  computed: {\n    tabGroupTitle: function tabGroupTitle() {\n      var entity = this.entity;\n\n      if (entity) {\n        return \"Meshes: \".concat(entity.name);\n      } else {\n        return null;\n      }\n    },\n    entityOverviewTitle: function entityOverviewTitle() {\n      var entity = this.entity;\n\n      if (entity) {\n        return \"Entity Overview for \".concat(entity.name);\n      } else {\n        return null;\n      }\n    }\n  },\n  watch: {\n    '$route': function $route(to, from) {\n      this.init();\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.init();\n  },\n  methods: {\n    init: function init() {\n      this.loadData();\n    },\n    goToPreviousPage: function goToPreviousPage() {\n      this.pageOffset = this.previous.pop();\n      this.next = null;\n      this.loadData();\n    },\n    goToNextPage: function goToNextPage() {\n      this.previous.push(this.pageOffset);\n      this.pageOffset = this.next;\n      this.next = null;\n      this.loadData();\n    },\n    tableAction: function tableAction(ev) {\n      var data = ev; // reset back to the first tab\n\n      this.$store.dispatch('updateSelectedTab', this.tabs[0].hash); // set the active table row\n\n      this.$store.dispatch('updateSelectedTableRow', data.name); // load the data into the tabs\n\n      this.getEntity(data);\n    },\n    loadData: function loadData() {\n      var _this = this;\n\n      this.isLoading = true;\n      this.isEmpty = false;\n      var mesh = this.$route.params.mesh;\n      var params = {\n        size: this.pageSize,\n        offset: this.pageOffset\n      };\n      var endpoint = mesh === 'all' || !mesh ? this.$api.getAllMeshes(params) : this.$api.getMesh(mesh);\n\n      var getMeshes = function getMeshes() {\n        return endpoint.then(function (response) {\n          var cleanRes = function cleanRes() {\n            if (mesh === 'all') {\n              return response.items;\n            }\n\n            var newItems = {\n              items: []\n            };\n            newItems.items.push(response);\n            return newItems.items;\n          }; // check to see if the `next` url is present\n\n\n          if (response.next) {\n            _this.next = getOffset(response.next);\n            _this.hasNext = true;\n          } else {\n            _this.hasNext = false;\n          }\n\n          var items = cleanRes();\n\n          if (items.length > 0) {\n            // sort the table data by name and the mesh it's associated with\n            if (mesh === 'all') {\n              _this.sortEntities(items);\n            } // set the first item as the default for initial load\n\n\n            _this.firstEntity = items[0].name; // load the YAML entity for the first item on page load\n\n            _this.getEntity(items[0]); // set the selected table row for the first item on page load\n\n\n            _this.$store.dispatch('updateSelectedTableRow', _this.firstEntity);\n\n            _this.tableData.data = _toConsumableArray(items);\n            _this.tableDataIsEmpty = false;\n          } else {\n            _this.tableData.data = [];\n            _this.tableDataIsEmpty = true;\n\n            _this.getEntity(null);\n          }\n        }).catch(function (error) {\n          _this.hasError = true;\n          console.error(error);\n        }).finally(function () {\n          setTimeout(function () {\n            _this.isLoading = false;\n          }, process.env.VUE_APP_DATA_TIMEOUT);\n        });\n      };\n\n      getMeshes();\n    },\n    getEntity: function getEntity(entity) {\n      var _this2 = this;\n\n      this.entityIsLoading = true;\n      this.entityIsEmpty = false;\n\n      if (entity && entity !== null) {\n        return this.$api.getMesh(entity.name).then(function (response) {\n          if (response) {\n            var selected = ['type', 'name'];\n            _this2.entity = getSome(response, selected);\n            _this2.rawEntity = response;\n          } else {\n            _this2.entity = null;\n            _this2.entityIsEmpty = true;\n          }\n        }).catch(function (error) {\n          _this2.entityHasError = true;\n          console.error(error);\n        }).finally(function () {\n          setTimeout(function () {\n            _this2.entityIsLoading = false;\n          }, process.env.VUE_APP_DATA_TIMEOUT);\n        });\n      } else {\n        setTimeout(function () {\n          _this2.entityIsEmpty = true;\n          _this2.entityIsLoading = false;\n        }, process.env.VUE_APP_DATA_TIMEOUT);\n      }\n    }\n  }\n};",{"version":3,"sources":["Meshes.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"all-meshes\">\n    <FrameSkeleton>\n      <DataOverview\n        :page-size=\"pageSize\"\n        :has-error=\"hasError\"\n        :is-loading=\"isLoading\"\n        :is-empty=\"isEmpty\"\n        :empty-state=\"empty_state\"\n        :display-data-table=\"true\"\n        :table-data=\"tableData\"\n        :table-data-is-empty=\"tableDataIsEmpty\"\n        table-data-function-text=\"View\"\n        table-data-row=\"name\"\n        @tableAction=\"tableAction\"\n        @reloadData=\"loadData\"\n      >\n        <template slot=\"additionalControls\">\n          <KButton\n            class=\"add-mesh-button\"\n            appearance=\"primary\"\n            size=\"small\"\n            :to=\"{ path: '/wizard/mesh' }\"\n          >\n            Create Mesh\n          </KButton>\n        </template>\n        <template slot=\"pagination\">\n          <Pagination\n            :has-previous=\"previous.length > 0\"\n            :has-next=\"hasNext\"\n            @next=\"goToNextPage\"\n            @previous=\"goToPreviousPage\"\n          />\n        </template>\n      </DataOverview>\n      <Tabs\n        :has-error=\"hasError\"\n        :is-loading=\"isLoading\"\n        :is-empty=\"isEmpty\"\n        :tabs=\"tabs\"\n        :tab-group-title=\"tabGroupTitle\"\n        initial-tab-override=\"overview\"\n      >\n        <template slot=\"overview\">\n          <LabelList\n            :has-error=\"entityHasError\"\n            :is-loading=\"entityIsLoading\"\n            :is-empty=\"entityIsEmpty\"\n            :items=\"entity\"\n          />\n        </template>\n        <template slot=\"yaml\">\n          <YamlView\n            :title=\"entityOverviewTitle\"\n            :has-error=\"entityHasError\"\n            :is-loading=\"entityIsLoading\"\n            :is-empty=\"entityIsEmpty\"\n            :content=\"rawEntity\"\n          />\n        </template>\n      </Tabs>\n    </FrameSkeleton>\n  </div>\n</template>\n\n<script>\nimport { getSome, getOffset } from '@/helpers'\nimport sortEntities from '@/mixins/EntitySorter'\nimport FrameSkeleton from '@/components/Skeletons/FrameSkeleton'\nimport Pagination from '@/components/Pagination'\nimport DataOverview from '@/components/Skeletons/DataOverview'\nimport Tabs from '@/components/Utils/Tabs'\nimport YamlView from '@/components/Skeletons/YamlView'\nimport LabelList from '@/components/Utils/LabelList'\n\nexport default {\n  name: 'Meshes',\n  metaInfo: {\n    title: 'Meshes'\n  },\n  components: {\n    FrameSkeleton,\n    Pagination,\n    DataOverview,\n    Tabs,\n    YamlView,\n    LabelList\n  },\n  mixins: [\n    sortEntities\n  ],\n  data () {\n    return {\n      isLoading: true,\n      isEmpty: false,\n      hasError: false,\n      entityIsLoading: true,\n      entityIsEmpty: false,\n      entityHasError: false,\n      tableDataIsEmpty: false,\n      empty_state: {\n        title: 'No Data',\n        message: 'There are no Meshes present.'\n      },\n      tableData: {\n        headers: [\n          { key: 'actions', hideLabel: true },\n          { label: 'Name', key: 'name' },\n          { label: 'Type', key: 'type' }\n        ],\n        data: []\n      },\n      tabs: [\n        {\n          hash: '#overview',\n          title: 'Overview'\n        },\n        {\n          hash: '#yaml',\n          title: 'YAML'\n        }\n      ],\n      entity: null,\n      rawEntity: null,\n      firstEntity: null,\n      pageSize: this.$pageSize,\n      pageOffset: null,\n      next: null,\n      hasNext: false,\n      previous: []\n    }\n  },\n  computed: {\n    tabGroupTitle () {\n      const entity = this.entity\n\n      if (entity) {\n        return `Meshes: ${entity.name}`\n      } else {\n        return null\n      }\n    },\n    entityOverviewTitle () {\n      const entity = this.entity\n\n      if (entity) {\n        return `Entity Overview for ${entity.name}`\n      } else {\n        return null\n      }\n    }\n  },\n  watch: {\n    '$route' (to, from) {\n      this.init()\n    }\n  },\n  beforeMount () {\n    this.init()\n  },\n  methods: {\n    init () {\n      this.loadData()\n    },\n    goToPreviousPage () {\n      this.pageOffset = this.previous.pop()\n      this.next = null\n\n      this.loadData()\n    },\n    goToNextPage () {\n      this.previous.push(this.pageOffset)\n      this.pageOffset = this.next\n      this.next = null\n\n      this.loadData()\n    },\n    tableAction (ev) {\n      const data = ev\n\n      // reset back to the first tab\n      this.$store.dispatch('updateSelectedTab', this.tabs[0].hash)\n\n      // set the active table row\n      this.$store.dispatch('updateSelectedTableRow', data.name)\n\n      // load the data into the tabs\n      this.getEntity(data)\n    },\n    loadData () {\n      this.isLoading = true\n      this.isEmpty = false\n\n      const mesh = this.$route.params.mesh\n\n      const params = {\n        size: this.pageSize,\n        offset: this.pageOffset\n      }\n\n      const endpoint = (mesh === 'all' || !mesh)\n        ? this.$api.getAllMeshes(params)\n        : this.$api.getMesh(mesh)\n\n      const getMeshes = () => {\n        return endpoint\n          .then(response => {\n            const cleanRes = () => {\n              if (mesh === 'all') {\n                return response.items\n              }\n\n              const newItems = { items: [] }\n\n              newItems.items.push(response)\n\n              return newItems.items\n            }\n\n            // check to see if the `next` url is present\n            if (response.next) {\n              this.next = getOffset(response.next)\n              this.hasNext = true\n            } else {\n              this.hasNext = false\n            }\n\n            const items = cleanRes()\n\n            if (items.length > 0) {\n              // sort the table data by name and the mesh it's associated with\n              if (mesh === 'all') {\n                this.sortEntities(items)\n              }\n\n              // set the first item as the default for initial load\n              this.firstEntity = items[0].name\n\n              // load the YAML entity for the first item on page load\n              this.getEntity(items[0])\n\n              // set the selected table row for the first item on page load\n              this.$store.dispatch('updateSelectedTableRow', this.firstEntity)\n\n              this.tableData.data = [...items]\n              this.tableDataIsEmpty = false\n            } else {\n              this.tableData.data = []\n              this.tableDataIsEmpty = true\n\n              this.getEntity(null)\n            }\n          })\n          .catch(error => {\n            this.hasError = true\n\n            console.error(error)\n          })\n          .finally(() => {\n            setTimeout(() => {\n              this.isLoading = false\n            }, process.env.VUE_APP_DATA_TIMEOUT)\n          })\n      }\n\n      getMeshes()\n    },\n    getEntity (entity) {\n      this.entityIsLoading = true\n      this.entityIsEmpty = false\n\n      if (entity && entity !== null) {\n        return this.$api.getMesh(entity.name)\n          .then(response => {\n            if (response) {\n              const selected = ['type', 'name']\n\n              this.entity = getSome(response, selected)\n              this.rawEntity = response\n            } else {\n              this.entity = null\n              this.entityIsEmpty = true\n            }\n          })\n          .catch(error => {\n            this.entityHasError = true\n            console.error(error)\n          })\n          .finally(() => {\n            setTimeout(() => {\n              this.entityIsLoading = false\n            }, process.env.VUE_APP_DATA_TIMEOUT)\n          })\n      } else {\n        setTimeout(() => {\n          this.entityIsEmpty = true\n          this.entityIsLoading = false\n        }, process.env.VUE_APP_DATA_TIMEOUT)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.add-mesh-button {\n  background-color: var(--logo-green) !important;\n}\n</style>\n"],"sourceRoot":"src/views/Entities"}]}