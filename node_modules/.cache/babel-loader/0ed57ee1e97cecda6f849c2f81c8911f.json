{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/ksagar/vueproj/sample/src/views/Wizard/mixins/updateStorage.js","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/views/Wizard/mixins/updateStorage.js","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/ksagar/vueproj/sample/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * updateStorage\n *\n * This mixin will let add items and values to localStorage\n * for use with Wizard flow.\n *\n */\nimport { mapGetters } from 'vuex';\nexport default {\n  data: function data() {\n    return {\n      storedData: [],\n      storedVal: null,\n      storedKey: null\n    };\n  },\n  mounted: function mounted() {\n    this.clearStorage();\n  },\n  methods: {\n    updateStorage: function updateStorage(key, value) {\n      // add (or update) item in/to localStorage\n      this.storedVal = value || null;\n      this.storedKey = key || null;\n      this.storedData = _objectSpread(_objectSpread({}, this.storedData), _defineProperty({}, key, value));\n      this.$store.dispatch('updateWizardData', this.storedData);\n      this.$emit('storageItemModified', value);\n    },\n    getStorageItem: function getStorageItem(value) {\n      var data = localStorage.storedFormData;\n      this.$emit('storageItemRetrieved', value);\n\n      if (data && data.length > 0) {\n        return JSON.parse(localStorage.storedFormData)[value];\n      } else {\n        return null;\n      }\n    },\n    clearStorage: function clearStorage() {\n      localStorage.removeItem('storedFormData');\n      this.$store.dispatch('updateWizardData', null);\n    }\n  },\n  watch: {\n    storedVal: function storedVal() {\n      var data = JSON.stringify(this.storedData);\n      localStorage.storedFormData = data;\n    }\n  }\n};",{"version":3,"sources":["/Users/ksagar/vueproj/sample/src/views/Wizard/mixins/updateStorage.js"],"names":["mapGetters","data","storedData","storedVal","storedKey","mounted","clearStorage","methods","updateStorage","key","value","$store","dispatch","$emit","getStorageItem","localStorage","storedFormData","length","JSON","parse","removeItem","watch","stringify"],"mappings":";;;;;;;;;AAAA;;;;;;;AAQA,SAASA,UAAT,QAA2B,MAA3B;AAEA,eAAe;AACbC,EAAAA,IADa,kBACL;AACN,WAAO;AACLC,MAAAA,UAAU,EAAE,EADP;AAELC,MAAAA,SAAS,EAAE,IAFN;AAGLC,MAAAA,SAAS,EAAE;AAHN,KAAP;AAKD,GAPY;AAQbC,EAAAA,OARa,qBAQF;AACT,SAAKC,YAAL;AACD,GAVY;AAWbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aADO,yBACQC,GADR,EACaC,KADb,EACoB;AACzB;AACA,WAAKP,SAAL,GAAiBO,KAAK,IAAI,IAA1B;AACA,WAAKN,SAAL,GAAiBK,GAAG,IAAI,IAAxB;AAEA,WAAKP,UAAL,mCAAuB,KAAKA,UAA5B,uBAA8CO,GAA9C,EAAoDC,KAApD;AAEA,WAAKC,MAAL,CAAYC,QAAZ,CAAqB,kBAArB,EAAyC,KAAKV,UAA9C;AAEA,WAAKW,KAAL,CAAW,qBAAX,EAAkCH,KAAlC;AACD,KAXM;AAYPI,IAAAA,cAZO,0BAYSJ,KAZT,EAYgB;AACrB,UAAMT,IAAI,GAAGc,YAAY,CAACC,cAA1B;AAEA,WAAKH,KAAL,CAAW,sBAAX,EAAmCH,KAAnC;;AAEA,UAAIT,IAAI,IAAIA,IAAI,CAACgB,MAAL,GAAc,CAA1B,EAA6B;AAC3B,eAAOC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,cAAxB,EAAwCN,KAAxC,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF,KAtBM;AAuBPJ,IAAAA,YAvBO,0BAuBS;AACdS,MAAAA,YAAY,CAACK,UAAb,CAAwB,gBAAxB;AACA,WAAKT,MAAL,CAAYC,QAAZ,CAAqB,kBAArB,EAAyC,IAAzC;AACD;AA1BM,GAXI;AAuCbS,EAAAA,KAAK,EAAE;AACLlB,IAAAA,SADK,uBACQ;AACX,UAAMF,IAAI,GAAGiB,IAAI,CAACI,SAAL,CAAe,KAAKpB,UAApB,CAAb;AAEAa,MAAAA,YAAY,CAACC,cAAb,GAA8Bf,IAA9B;AACD;AALI;AAvCM,CAAf","sourcesContent":["/**\n * updateStorage\n *\n * This mixin will let add items and values to localStorage\n * for use with Wizard flow.\n *\n */\n\nimport { mapGetters } from 'vuex'\n\nexport default {\n  data () {\n    return {\n      storedData: [],\n      storedVal: null,\n      storedKey: null\n    }\n  },\n  mounted () {\n    this.clearStorage()\n  },\n  methods: {\n    updateStorage (key, value) {\n      // add (or update) item in/to localStorage\n      this.storedVal = value || null\n      this.storedKey = key || null\n\n      this.storedData = { ...this.storedData, ...{ [key]: value } }\n\n      this.$store.dispatch('updateWizardData', this.storedData)\n\n      this.$emit('storageItemModified', value)\n    },\n    getStorageItem (value) {\n      const data = localStorage.storedFormData\n\n      this.$emit('storageItemRetrieved', value)\n\n      if (data && data.length > 0) {\n        return JSON.parse(localStorage.storedFormData)[value]\n      } else {\n        return null\n      }\n    },\n    clearStorage () {\n      localStorage.removeItem('storedFormData')\n      this.$store.dispatch('updateWizardData', null)\n    }\n  },\n  watch: {\n    storedVal () {\n      const data = JSON.stringify(this.storedData)\n\n      localStorage.storedFormData = data\n    }\n  }\n}\n"]}]}