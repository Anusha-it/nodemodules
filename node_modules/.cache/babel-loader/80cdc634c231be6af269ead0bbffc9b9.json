{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/ksagar/vueproj/sample/src/services/kuma.js","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/services/kuma.js","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/ksagar/vueproj/sample/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ksagar/vueproj/sample/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport RestClient from '@/services/restClient';\n\nvar Kuma = /*#__PURE__*/function () {\n  function Kuma(options) {\n    _classCallCheck(this, Kuma);\n\n    var opts = options || {};\n    this.options = opts;\n    this.client = new RestClient(opts);\n  }\n\n  _createClass(Kuma, [{\n    key: \"buildUrl\",\n    value: function buildUrl(path) {\n      return this.client.buildUrl(path);\n    }\n    /**\n     * Info / Config\n     */\n\n  }, {\n    key: \"getInfo\",\n    value: function getInfo() {\n      return this.client.get('/');\n    }\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      return this.client.status('/');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.client.getConfig();\n    }\n    /**\n     * Custom query\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(model, params) {\n      return this.client.get(\"/\".concat(model), {\n        params: params\n      });\n    }\n    /**\n     * Meshes\n     */\n    // get a list of all meshes\n\n  }, {\n    key: \"getAllMeshes\",\n    value: function getAllMeshes(params) {\n      return this.client.get('/meshes', {\n        params: params\n      });\n    } // get a single mesh\n\n  }, {\n    key: \"getMesh\",\n    value: function getMesh(name, params) {\n      return this.client.get(\"/meshes/\".concat(name), {\n        params: params\n      });\n    }\n    /**\n     * Dataplanes\n     */\n\n  }, {\n    key: \"getAllDataplanes\",\n    value: function getAllDataplanes(params) {\n      return this.client.get('/dataplanes', {\n        params: params\n      });\n    } // get a list of all dataplanes\n\n  }, {\n    key: \"getAllDataplanesFromMesh\",\n    value: function getAllDataplanesFromMesh(name, params) {\n      return this.client.get(\"/meshes/\".concat(name, \"/dataplanes\"), {\n        params: params\n      });\n    } // get a single dataplane\n\n  }, {\n    key: \"getDataplaneFromMesh\",\n    value: function getDataplaneFromMesh(name, dataplane, params) {\n      return this.client.get(\"/meshes/\".concat(name, \"/dataplanes/\").concat(dataplane), {\n        params: params\n      });\n    } // get dataplane overviews by mesh\n\n  }, {\n    key: \"getDataplaneOverviewsFromMesh\",\n    value: function getDataplaneOverviewsFromMesh(mesh, dataplane, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/dataplanes+insights/\").concat(dataplane), {\n        params: params\n      });\n    } // get all dataplane overviews\n\n  }, {\n    key: \"getAllDataplaneOverviews\",\n    value: function getAllDataplaneOverviews(params) {\n      return this.client.get('/dataplanes+insights', {\n        params: params\n      });\n    }\n    /**\n     * Traffic Logs\n     */\n    // get all traffic logs\n\n  }, {\n    key: \"getAllTrafficLogs\",\n    value: function getAllTrafficLogs(params) {\n      return this.client.get('/traffic-logs', {\n        params: params\n      });\n    } // get all traffic logs from mesh\n\n  }, {\n    key: \"getAllTrafficLogsFromMesh\",\n    value: function getAllTrafficLogsFromMesh(mesh, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/traffic-logs\"), {\n        params: params\n      });\n    } // get traffic log details\n\n  }, {\n    key: \"getTrafficLog\",\n    value: function getTrafficLog(mesh, trafficlog, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/traffic-logs/\").concat(trafficlog), {\n        params: params\n      });\n    }\n    /**\n     * Traffic Permissions\n     */\n    // get traffic permissions\n\n  }, {\n    key: \"getAllTrafficPermissions\",\n    value: function getAllTrafficPermissions(params) {\n      return this.client.get('/traffic-permissions', {\n        params: params\n      });\n    } // get traffic permissions from mesh\n\n  }, {\n    key: \"getAllTrafficPermissionsFromMesh\",\n    value: function getAllTrafficPermissionsFromMesh(mesh, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/traffic-permissions\"), {\n        params: params\n      });\n    } // get traffic permission details\n\n  }, {\n    key: \"getTrafficPermission\",\n    value: function getTrafficPermission(mesh, trafficpermission, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/traffic-permissions/\").concat(trafficpermission), {\n        params: params\n      });\n    }\n    /**\n     * Traffic Routes\n     */\n    // get all traffic routes\n\n  }, {\n    key: \"getAllTrafficRoutes\",\n    value: function getAllTrafficRoutes(params) {\n      return this.client.get('/traffic-routes', {\n        params: params\n      });\n    } // get traffic routes from mesh\n\n  }, {\n    key: \"getAllTrafficRoutesFromMesh\",\n    value: function getAllTrafficRoutesFromMesh(mesh, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/traffic-routes\"), {\n        params: params\n      });\n    } // get traffic route details\n\n  }, {\n    key: \"getTrafficRoute\",\n    value: function getTrafficRoute(mesh, trafficroute, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/traffic-routes/\").concat(trafficroute), {\n        params: params\n      });\n    }\n    /**\n     * Traffic Traces\n     */\n    // get all traffic traces\n\n  }, {\n    key: \"getAllTrafficTraces\",\n    value: function getAllTrafficTraces(params) {\n      return this.client.get('/traffic-traces', {\n        params: params\n      });\n    } // get traffic traces from mesh\n\n  }, {\n    key: \"getAllTrafficTracesFromMesh\",\n    value: function getAllTrafficTracesFromMesh(mesh, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/traffic-traces\"), {\n        params: params\n      });\n    } // get traffic trace details\n\n  }, {\n    key: \"getTrafficTrace\",\n    value: function getTrafficTrace(mesh, traffictrace, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/traffic-traces/\").concat(traffictrace), {\n        params: params\n      });\n    }\n    /**\n     * Proxy Templates\n     */\n    // get all proxy templates\n\n  }, {\n    key: \"getAllProxyTemplates\",\n    value: function getAllProxyTemplates(params) {\n      return this.client.get('/proxytemplates', {\n        params: params\n      }); // this may change to this:\n      // return this.client.get('/proxy-templates', { params })\n    } // get all proxy templates from mesh\n\n  }, {\n    key: \"getAllProxyTemplatesFromMesh\",\n    value: function getAllProxyTemplatesFromMesh(mesh, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/proxytemplates\"), {\n        params: params\n      });\n    } // get proxy template details\n\n  }, {\n    key: \"getProxyTemplate\",\n    value: function getProxyTemplate(mesh, proxytemplate, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/proxytemplates/\").concat(proxytemplate), {\n        params: params\n      });\n    }\n    /**\n     * Health Checks\n     */\n    // get all health checks\n\n  }, {\n    key: \"getAllHealthChecks\",\n    value: function getAllHealthChecks(params) {\n      return this.client.get('/health-checks', {\n        params: params\n      });\n    } // get all health checks from mesh\n\n  }, {\n    key: \"getAllHealthChecksFromMesh\",\n    value: function getAllHealthChecksFromMesh(mesh, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/health-checks\"), {\n        params: params\n      });\n    } // get health check details\n\n  }, {\n    key: \"getHealthCheckFromMesh\",\n    value: function getHealthCheckFromMesh(mesh, name, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/health-checks/\").concat(name), {\n        params: params\n      });\n    }\n    /**\n     * Fault Injections\n     */\n    // get all fault injections\n\n  }, {\n    key: \"getAllFaultInjections\",\n    value: function getAllFaultInjections(params) {\n      return this.client.get('/fault-injections', {\n        params: params\n      });\n    } // get all fault injections from mesh\n\n  }, {\n    key: \"getAllFaultInjectionsFromMesh\",\n    value: function getAllFaultInjectionsFromMesh(mesh, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/fault-injections\"), {\n        params: params\n      });\n    } // get fault injection details\n\n  }, {\n    key: \"getFaultInjection\",\n    value: function getFaultInjection(mesh, faultinjection, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/fault-injections/\").concat(faultinjection), {\n        params: params\n      });\n    }\n    /**\n     *\n     * NOTE:\n     * There are no endpoints yet for fetching service information.\n     * The below calls are placeholders for when those endpoints are added.\n     *\n     */\n    // get all services\n\n  }, {\n    key: \"getAllServices\",\n    value: function getAllServices(params) {\n      return this.client.get('/services', {\n        params: params\n      });\n    } // get all services from mesh\n\n  }, {\n    key: \"getAllServicesFromMesh\",\n    value: function getAllServicesFromMesh(mesh, params) {\n      return this.client.get(\"/meshes/\".concat(mesh, \"/services\"), {\n        params: params\n      });\n    } // get service details\n\n  }, {\n    key: \"getService\",\n    value: function getService(name, service, params) {\n      return this.client.get(\"/meshes/\".concat(name, \"/services/\").concat(service), {\n        params: params\n      });\n    }\n  }]);\n\n  return Kuma;\n}();\n\nexport { Kuma as default };",{"version":3,"sources":["/Users/ksagar/vueproj/sample/src/services/kuma.js"],"names":["RestClient","Kuma","options","opts","client","path","buildUrl","get","status","getConfig","model","params","name","dataplane","mesh","trafficlog","trafficpermission","trafficroute","traffictrace","proxytemplate","faultinjection","service"],"mappings":"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","sourcesContent":["import RestClient from '@/services/restClient'\n\nexport default class Kuma {\n  constructor (options) {\n    const opts = options || {}\n\n    this.options = opts\n    this.client = new RestClient(opts)\n  }\n\n  buildUrl (path) {\n    return this.client.buildUrl(path)\n  }\n\n  /**\n   * Info / Config\n   */\n\n  getInfo () {\n    return this.client.get('/')\n  }\n\n  getStatus () {\n    return this.client.status('/')\n  }\n\n  getConfig () {\n    return this.client.getConfig()\n  }\n\n  /**\n   * Custom query\n   */\n  query (model, params) {\n    return this.client.get(`/${model}`, { params })\n  }\n\n  /**\n   * Meshes\n   */\n\n  // get a list of all meshes\n  getAllMeshes (params) {\n    return this.client.get('/meshes', { params })\n  }\n\n  // get a single mesh\n  getMesh (name, params) {\n    return this.client.get(`/meshes/${name}`, { params })\n  }\n\n  /**\n   * Dataplanes\n   */\n\n  getAllDataplanes (params) {\n    return this.client.get('/dataplanes', { params })\n  }\n\n  // get a list of all dataplanes\n  getAllDataplanesFromMesh (name, params) {\n    return this.client.get(`/meshes/${name}/dataplanes`, { params })\n  }\n\n  // get a single dataplane\n  getDataplaneFromMesh (name, dataplane, params) {\n    return this.client.get(`/meshes/${name}/dataplanes/${dataplane}`, { params })\n  }\n\n  // get dataplane overviews by mesh\n  getDataplaneOverviewsFromMesh (mesh, dataplane, params) {\n    return this.client.get(`/meshes/${mesh}/dataplanes+insights/${dataplane}`, { params })\n  }\n\n  // get all dataplane overviews\n  getAllDataplaneOverviews (params) {\n    return this.client.get('/dataplanes+insights', { params })\n  }\n\n  /**\n   * Traffic Logs\n   */\n\n  // get all traffic logs\n  getAllTrafficLogs (params) {\n    return this.client.get('/traffic-logs', { params })\n  }\n\n  // get all traffic logs from mesh\n  getAllTrafficLogsFromMesh (mesh, params) {\n    return this.client.get(`/meshes/${mesh}/traffic-logs`, { params })\n  }\n\n  // get traffic log details\n  getTrafficLog (mesh, trafficlog, params) {\n    return this.client.get(`/meshes/${mesh}/traffic-logs/${trafficlog}`, { params })\n  }\n\n  /**\n   * Traffic Permissions\n   */\n\n  // get traffic permissions\n  getAllTrafficPermissions (params) {\n    return this.client.get('/traffic-permissions', { params })\n  }\n\n  // get traffic permissions from mesh\n  getAllTrafficPermissionsFromMesh (mesh, params) {\n    return this.client.get(`/meshes/${mesh}/traffic-permissions`, { params })\n  }\n\n  // get traffic permission details\n  getTrafficPermission (mesh, trafficpermission, params) {\n    return this.client.get(`/meshes/${mesh}/traffic-permissions/${trafficpermission}`, { params })\n  }\n\n  /**\n   * Traffic Routes\n   */\n\n  // get all traffic routes\n  getAllTrafficRoutes (params) {\n    return this.client.get('/traffic-routes', { params })\n  }\n\n  // get traffic routes from mesh\n  getAllTrafficRoutesFromMesh (mesh, params) {\n    return this.client.get(`/meshes/${mesh}/traffic-routes`, { params })\n  }\n\n  // get traffic route details\n  getTrafficRoute (mesh, trafficroute, params) {\n    return this.client.get(`/meshes/${mesh}/traffic-routes/${trafficroute}`, { params })\n  }\n\n  /**\n   * Traffic Traces\n   */\n\n  // get all traffic traces\n  getAllTrafficTraces (params) {\n    return this.client.get('/traffic-traces', { params })\n  }\n\n  // get traffic traces from mesh\n  getAllTrafficTracesFromMesh (mesh, params) {\n    return this.client.get(`/meshes/${mesh}/traffic-traces`, { params })\n  }\n\n  // get traffic trace details\n  getTrafficTrace (mesh, traffictrace, params) {\n    return this.client.get(`/meshes/${mesh}/traffic-traces/${traffictrace}`, { params })\n  }\n\n  /**\n   * Proxy Templates\n   */\n\n  // get all proxy templates\n  getAllProxyTemplates (params) {\n    return this.client.get('/proxytemplates', { params })\n\n    // this may change to this:\n    // return this.client.get('/proxy-templates', { params })\n  }\n\n  // get all proxy templates from mesh\n  getAllProxyTemplatesFromMesh (mesh, params) {\n    return this.client.get(`/meshes/${mesh}/proxytemplates`, { params })\n  }\n\n  // get proxy template details\n  getProxyTemplate (mesh, proxytemplate, params) {\n    return this.client.get(`/meshes/${mesh}/proxytemplates/${proxytemplate}`, { params })\n  }\n\n  /**\n   * Health Checks\n   */\n\n  // get all health checks\n  getAllHealthChecks (params) {\n    return this.client.get('/health-checks', { params })\n  }\n\n  // get all health checks from mesh\n  getAllHealthChecksFromMesh (mesh, params) {\n    return this.client.get(`/meshes/${mesh}/health-checks`, { params })\n  }\n\n  // get health check details\n  getHealthCheckFromMesh (mesh, name, params) {\n    return this.client.get(`/meshes/${mesh}/health-checks/${name}`, { params })\n  }\n\n  /**\n   * Fault Injections\n   */\n\n  // get all fault injections\n  getAllFaultInjections (params) {\n    return this.client.get('/fault-injections', { params })\n  }\n\n  // get all fault injections from mesh\n  getAllFaultInjectionsFromMesh (mesh, params) {\n    return this.client.get(`/meshes/${mesh}/fault-injections`, { params })\n  }\n\n  // get fault injection details\n  getFaultInjection (mesh, faultinjection, params) {\n    return this.client.get(`/meshes/${mesh}/fault-injections/${faultinjection}`, { params })\n  }\n\n  /**\n   *\n   * NOTE:\n   * There are no endpoints yet for fetching service information.\n   * The below calls are placeholders for when those endpoints are added.\n   *\n   */\n\n  // get all services\n  getAllServices (params) {\n    return this.client.get('/services', { params })\n  }\n\n  // get all services from mesh\n  getAllServicesFromMesh (mesh, params) {\n    return this.client.get(`/meshes/${mesh}/services`, { params })\n  }\n\n  // get service details\n  getService (name, service, params) {\n    return this.client.get(`/meshes/${name}/services/${service}`, { params })\n  }\n}\n"]}]}