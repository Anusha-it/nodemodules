{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/components/Metrics/MetricGrid.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/components/Metrics/MetricGrid.vue","mtime":1589636978293},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'MetricsGrid',\n  filters: {\n    formatValue: function formatValue(value) {\n      return value ? value.toLocaleString('en').toString() : 0;\n    },\n    formatError: function formatError(value) {\n      if (value === '--') {\n        return 'error calculating';\n      }\n\n      return value;\n    }\n  },\n  props: {\n    metrics: {\n      // type: Object,\n      type: Array,\n      required: true,\n      default: function _default() {}\n    }\n  },\n  computed: {\n    hasError: function hasError() {\n      var _this = this;\n\n      var errors = {};\n      Object.keys(this.metrics).forEach(function (key) {\n        if (_this.metrics[key].value === '--') {\n          errors[key] = key;\n        }\n      });\n      return errors;\n    }\n  }\n};",{"version":3,"sources":["MetricGrid.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAGA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,KADA,EACA;AACA,aAAA,KAAA,GAAA,KAAA,CAAA,cAAA,CAAA,IAAA,EAAA,QAAA,EAAA,GAAA,CAAA;AACA,KAHA;AAKA,IAAA,WALA,uBAKA,KALA,EAKA;AACA,UAAA,KAAA,KAAA,IAAA,EAAA;AACA,eAAA,mBAAA;AACA;;AAEA,aAAA,KAAA;AACA;AAXA,GAHA;AAiBA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA;AACA,MAAA,IAAA,EAAA,KAFA;AAGA,MAAA,QAAA,EAAA,IAHA;AAIA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAJA;AADA,GAjBA;AA0BA,EAAA,QAAA,EAAA;AACA,IAAA,QADA,sBACA;AAAA;;AACA,UAAA,MAAA,GAAA,EAAA;AAEA,MAAA,MAAA,CAAA,IAAA,CAAA,KAAA,OAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,KAAA,CAAA,OAAA,CAAA,GAAA,EAAA,KAAA,KAAA,IAAA,EAAA;AACA,UAAA,MAAA,CAAA,GAAA,CAAA,GAAA,GAAA;AACA;AACA,OAJA;AAMA,aAAA,MAAA;AACA;AAXA;AA1BA,CAAA","sourcesContent":["<template>\n  <div\n    v-if=\"metrics\"\n    class=\"info-grid\"\n  >\n    <div\n      v-for=\"(metric, index) in metrics\"\n      v-if=\"metric.value !== null\"\n      :key=\"index\"\n      :data-testid=\"metric.metric\"\n      :class=\"metric.status\"\n      class=\"metric\"\n    >\n      <span class=\"metric-title\">{{ metric.metric }}</span>\n      <span\n        :class=\"{'has-error': index === hasError[index]}\"\n        class=\"metric-value\"\n      >{{ metric.value | formatValue | formatError }}</span>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'MetricsGrid',\n\n  filters: {\n    formatValue (value) {\n      return value ? value.toLocaleString('en').toString() : 0\n    },\n\n    formatError (value) {\n      if (value === '--') {\n        return 'error calculating'\n      }\n\n      return value\n    }\n  },\n\n  props: {\n    metrics: {\n      // type: Object,\n      type: Array,\n      required: true,\n      default: () => {}\n    }\n  },\n\n  computed: {\n    hasError () {\n      const errors = {}\n\n      Object.keys(this.metrics).forEach(key => {\n        if (this.metrics[key].value === '--') {\n          errors[key] = key\n        }\n      })\n\n      return errors\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n  .info-grid {\n    display: flex;\n    width: 100%;\n    margin: 0 -16px 2em -16px;\n    padding: 2rem 0;\n    // border-top: 1px solid rgba(0,0,0,.10);\n\n    .metric {\n      display: flex;\n      flex: 1;\n      flex-shrink: 0;\n      flex-direction: column;\n      justify-content: space-between;\n      text-align: left;\n      border-left: 3px solid;\n      padding: 16px 26px;\n      border-color: rgba(0,0,0,.1);\n      background-color: rgba(150,58,133,0.05);\n      margin: 0 16px;\n\n      .metric-title {\n        font-size: 16px;\n        color: rgba(0,0,0,.45);\n      }\n      .metric-value {\n        font-weight: 400;\n        font-size: 28px;\n        color: rgba(0,0,0,.75);\n        &:last-child {\n          margin-bottom: auto;\n        }\n        &.has-error {\n          font-size: 14px;\n          font-weight: 400;\n          margin-top: auto;\n        }\n      }\n      &.danger {\n        border-color: #E6B8B8;\n        .metric-value {\n          color: #D90000;\n        }\n      }\n    }\n\n    @media only screen and (max-width: 840px) {\n      flex-direction: column;\n      .metric {\n        flex: none;\n        margin-bottom: 1rem;\n      }\n    }\n  }\n</style>\n"],"sourceRoot":"src/components/Metrics"}]}