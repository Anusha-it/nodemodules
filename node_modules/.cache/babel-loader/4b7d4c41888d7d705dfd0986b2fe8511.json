{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/views/Wizard/views/DataplaneKubernetes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/views/Wizard/views/DataplaneKubernetes.vue","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/ksagar/vueproj/sample/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { rejectKeys } from '@/views/Wizard/helpers';\nimport updateStorage from '@/views/Wizard/mixins/updateStorage';\nimport FormatForCLI from '@/mixins/FormatForCLI';\nimport FormFragment from '@/views/Wizard/components/FormFragment';\nimport Tabs from '@/components/Utils/Tabs';\nimport StepSkeleton from '@/views/Wizard/components/StepSkeleton';\nimport Switcher from '@/views/Wizard/components/Switcher';\nimport CodeView from '@/components/Skeletons/CodeView';\nimport Scanner from '@/views/Wizard/components/Scanner'; // schema for building code output\n// import meshSchema from '@/views/Wizard/schemas/Mesh'\n// schema for building code output (TBD)\n\nimport dataplaneSchema from '@/views/Wizard/schemas/DataplaneKubernetes';\nexport default {\n  name: 'DataplaneWizardKubernetes',\n  metaInfo: {\n    title: 'Create a new Dataplane on Kubernetes'\n  },\n  components: {\n    FormFragment: FormFragment,\n    Tabs: Tabs,\n    StepSkeleton: StepSkeleton,\n    Switcher: Switcher,\n    CodeView: CodeView,\n    Scanner: Scanner\n  },\n  mixins: [FormatForCLI, updateStorage],\n  data: function data() {\n    return {\n      schema: dataplaneSchema,\n      steps: [{\n        label: 'General',\n        slug: 'general'\n      }, {\n        label: 'Scope Settings',\n        slug: 'scope-settings'\n      }, {\n        label: 'Install',\n        slug: 'complete'\n      }],\n      tabs: [{\n        hash: '#kubernetes',\n        title: 'Kubernetes'\n      } // {\n      //   hash: '#universal',\n      //   title: 'Universal'\n      // }\n      ],\n      sidebarContent: [{\n        name: 'dataplane'\n      }],\n      startScanner: false,\n      scanFound: false,\n      scanError: false,\n      isComplete: false,\n      nextDisabled: true,\n      validate: {\n        meshName: '',\n        k8sDataplaneType: 'dataplane-type-service',\n        k8sServices: 'all-services',\n        k8sNamespace: 'existing-namespace',\n        k8sNamespaceSelection: '',\n        k8sServiceDeployment: 'existing-deployment',\n        k8sServiceDeploymentSelection: '',\n        k8sIngressDeployment: '',\n        k8sIngressDeploymentSelection: '',\n        k8sIngressType: '',\n        k8sIngressBrand: 'kong-ingress',\n        k8sIngressSelection: ''\n      },\n      vmsg: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    title: 'getTagline',\n    version: 'getVersion',\n    environment: 'getEnvironment',\n    formData: 'getStoredWizardData',\n    selectedTab: 'getSelectedTab',\n    meshes: 'getMeshList'\n  })), {}, {\n    // Our generated code output\n    codeOutput: function codeOutput() {\n      var schema = Object.assign({}, this.schema);\n      var namespace = this.validate.k8sNamespaceSelection; // if no namespace is set, do nothing\n\n      if (!namespace) return; // name and namespace\n\n      schema.metadata.name = namespace;\n      schema.metadata.namespace = namespace; // selected mesh\n\n      schema.metadata.labels['kuma.io/mesh'] = this.validate.meshName;\n      /**\n       * Finalized output\n       */\n      // const codeBlock = { ...meshType, spec: { ...schema } }\n\n      var codeClosing = \"\\\" | kubectl apply -f - && kubectl delete pod --all -n \".concat(namespace);\n      var assembledBlock = this.formatForCLI(schema, codeClosing);\n      return assembledBlock;\n    }\n  }),\n  watch: {\n    validate: {\n      handler: function handler() {\n        var data = JSON.stringify(this.validate);\n        var mesh = this.validate.meshName; // write the v-model data to localStorage whenever it changes\n\n        localStorage.setItem('storedFormData', data); // allow the user to proceed if they've selected a Mesh\n\n        mesh.length ? this.nextDisabled = false : this.nextDisabled = true;\n      },\n      deep: true\n    }\n  },\n  methods: {\n    scanForEntity: function scanForEntity() {\n      var _this = this;\n\n      // get our entity from the VueX store\n      var entity = this.validate;\n      var mesh = entity.meshName;\n      var dataplane = 'test'; // this is a placeholder\n      // reset things if the user is starting over\n\n      this.scanComplete = false;\n      this.scanError = false; // do nothing if there is no Mesh nor Dataplane found\n\n      if (!mesh || !dataplane) return;\n      /**\n       * TODO\n       * this will eventually change to `this.$api.getDataplaneFromMesh()`\n       * we will need to get the Mesh namespace the user selects, or the one\n       * they create, as well as the Dataplane namespace.\n       *\n       * This is also dependent upon multiple Kubernetes endpoints that don't\n       * yet exist in Kuma and need to be created.\n       *\n       */\n\n      this.$api.getDataplaneFromMesh(mesh, dataplane).then(function (response) {\n        if (response && response.name.length > 0) {\n          _this.isRunning = true;\n          _this.scanFound = true;\n        } else {\n          _this.scanError = true;\n        }\n      }).catch(function (error) {\n        _this.scanError = true;\n        console.error(error);\n      }).finally(function () {\n        _this.scanComplete = true;\n      });\n    }\n  }\n};",{"version":3,"sources":["DataplaneKubernetes.vue"],"names":[],"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","sourcesContent":["<template>\n  <div class=\"wizard\">\n    <div class=\"wizard__content\">\n      <StepSkeleton\n        :steps=\"steps\"\n        :advance-check=\"true\"\n        :sidebar-content=\"sidebarContent\"\n        :footer-enabled=\"scanFound === false\"\n        :next-disabled=\"nextDisabled\"\n      >\n        <!-- step content -->\n        <template slot=\"general\">\n          <p>\n            Welcome to the wizard to create a new Dataplane entity in {{ title }}.\n            We will be providing you with a few steps that will get you started.\n          </p>\n          <p>\n            As you know, the Kuma GUI is read-only.\n          </p>\n\n          <!-- wizard switcher -- based on environment -->\n          <Switcher />\n\n          <h3>\n            To get started, please select on what Mesh you would like to add the Dataplane:\n          </h3>\n\n          <p>\n            If you've got an existing Mesh that you would like to associate with your\n            Dataplane, you can select it below, or create a new one using our Mesh Wizard.\n          </p>\n\n          <!-- mesh selection -->\n          <KCard\n            class=\"my-6\"\n            has-shadow\n          >\n            <template slot=\"body\">\n              <FormFragment\n                title=\"Choose a Mesh\"\n                for-attr=\"dp-mesh\"\n                all-inline\n              >\n                <div>\n                  <select\n                    id=\"dp-mesh\"\n                    v-model=\"validate.meshName\"\n                    class=\"k-input w-100\"\n                  >\n                    <option\n                      disabled\n                      value=\"\"\n                    >\n                      Select an existing Mesh&hellip;\n                    </option>\n                    <option\n                      v-for=\"item in meshes.items\"\n                      :key=\"item.name\"\n                      :value=\"item.name\"\n                    >\n                      {{ item.name }}\n                    </option>\n                  </select>\n                </div>\n                <div>\n                  <label class=\"k-input-label mr-4\">\n                    or\n                  </label>\n                  <KButton\n                    :to=\"{ name: 'create-mesh' }\"\n                    appearance=\"primary\"\n                  >\n                    Create a new Mesh\n                  </KButton>\n                </div>\n                <!-- <KAlert\n                  v-if=\"vmsg.meshName\"\n                  appearance=\"danger\"\n                  size=\"small\"\n                  :alert-message=\"vmsg.meshName\"\n                /> -->\n              </FormFragment>\n            </template>\n          </KCard>\n        </template>\n        <template slot=\"scope-settings\">\n          <h3>\n            Setup Dataplane Mode\n          </h3>\n          <p>\n            You can create a data plane for a service or a data plane for an Ingress gateway.\n          </p>\n\n          <!-- dataplane mode -->\n          <KCard\n            class=\"my-6\"\n            has-shadow\n          >\n            <template slot=\"body\">\n              <FormFragment\n                all-inline\n                equal-cols\n                hide-label-col\n              >\n                <label for=\"service-dataplane\">\n                  <input\n                    id=\"service-dataplane\"\n                    v-model=\"validate.k8sDataplaneType\"\n                    class=\"k-input\"\n                    type=\"radio\"\n                    name=\"dataplane-type\"\n                    value=\"dataplane-type-service\"\n                    checked\n                  >\n                  <span>\n                    Service Dataplane\n                  </span>\n                </label>\n                <label for=\"ingress-dataplane\">\n                  <input\n                    id=\"ingress-dataplane\"\n                    v-model=\"validate.k8sDataplaneType\"\n                    class=\"k-input\"\n                    type=\"radio\"\n                    name=\"dataplane-type\"\n                    value=\"dataplane-type-ingress\"\n                    disabled\n                  >\n                  <span>\n                    Ingress Dataplane\n                  </span>\n                </label>\n              </FormFragment>\n            </template>\n          </KCard>\n\n          <div v-if=\"validate.k8sDataplaneType === 'dataplane-type-service'\">\n            <p>\n              Should the data plane be added for an entire Namespace and all of its services,\n              or for specific individual services in any namespace?\n            </p>\n\n            <!-- service selection -->\n            <KCard\n              class=\"my-6\"\n              has-shadow\n            >\n              <template slot=\"body\">\n                <FormFragment\n                  all-inline\n                  equal-cols\n                  hide-label-col\n                >\n                  <label for=\"k8s-services-all\">\n                    <input\n                      id=\"k8s-services-all\"\n                      v-model=\"validate.k8sServices\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-services\"\n                      value=\"all-services\"\n                      checked\n                    >\n                    <span>\n                      All Services in Namespace\n                    </span>\n                  </label>\n                  <label for=\"k8s-services-individual\">\n                    <input\n                      id=\"k8s-services-individual\"\n                      v-model=\"validate.k8sServices\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-services\"\n                      value=\"individual-services\"\n                      disabled=\"disabled\"\n                    >\n                    <span>\n                      Individual Services\n                    </span>\n                  </label>\n                </FormFragment>\n              </template>\n            </KCard>\n\n            <!-- <KCard\n              v-if=\"validate.k8sServices === 'individual-services'\"\n              class=\"my-6\"\n              has-shadow\n            >\n              <template slot=\"body\">\n                <FormFragment\n                  all-inline\n                  equal-cols\n                  hide-label-col\n                >\n                  <label for=\"k8s-deployment-existing\">\n                    <input\n                      id=\"k8s-deployment-existing\"\n                      v-model=\"validate.k8sServiceDeployment\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-deployment\"\n                      value=\"existing-deployment\"\n                      checked\n                    >\n                    <span>\n                      Existing Deployment\n                    </span>\n                  </label>\n                  <label for=\"k8s-deployment-new\">\n                    <input\n                      id=\"k8s-deployment-new\"\n                      v-model=\"validate.k8sServiceDeployment\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-deployment\"\n                      value=\"new-deployment\"\n                    >\n                    <span>\n                      New Deployment\n                    </span>\n                  </label>\n                </FormFragment>\n              </template>\n            </KCard> -->\n\n            <KCard\n              v-if=\"validate.k8sServices === 'individual-services'\"\n              class=\"my-6\"\n              has-shadow\n            >\n              <template slot=\"body\">\n                <FormFragment\n                  title=\"Deployments\"\n                  for-attr=\"k8s-deployment-selection\"\n                >\n                  <!-- <select\n                    v-if=\"validate.k8sServiceDeployment === 'existing-deployment'\"\n                    id=\"k8s-service-deployment-selection\"\n                    v-model=\"validate.k8sServiceDeploymentSelection\"\n                    class=\"k-input w-100\"\n                    name=\"k8s-deployment-selection\"\n                  >\n                    <option\n                      disabled\n                      value=\"\"\n                    >\n                      Select a Deployment&hellip;\n                    </option>\n                    <option value=\"deployment-1\">\n                      Deployment-1\n                    </option>\n                    <option value=\"deployment-2\">\n                      Deployment-2\n                    </option>\n                    <option value=\"deployment-3\">\n                      Deployment-3\n                    </option>\n                  </select> -->\n                  <input\n                    id=\"k8s-service-deployment-new\"\n                    v-model=\"validate.k8sServiceDeploymentSelection\"\n                    type=\"text\"\n                    class=\"k-input w-100\"\n                    placeholder=\"your-new-deployment\"\n                    required\n                  >\n                </FormFragment>\n              </template>\n            </KCard>\n\n            <!-- namespace selection options -->\n            <!-- <KCard\n              class=\"my-6\"\n              has-shadow\n            >\n              <template slot=\"body\">\n                <FormFragment\n                  all-inline\n                  equal-cols\n                  hide-label-col\n                >\n                  <label for=\"k8s-namespace-existing\">\n                    <input\n                      id=\"k8s-namespace-existing\"\n                      v-model=\"validate.k8sNamespace\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-namespace\"\n                      value=\"existing-namespace\"\n                      checked\n                    >\n                    <span>\n                      Existing Namespace\n                    </span>\n                  </label>\n                  <label for=\"k8s-namespace-new\">\n                    <input\n                      id=\"k8s-namespace-new\"\n                      v-model=\"validate.k8sNamespace\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-namespace\"\n                      value=\"new-namespace\"\n                    >\n                    <span>\n                      New Namespace\n                    </span>\n                  </label>\n                </FormFragment>\n              </template>\n            </KCard> -->\n\n            <!-- namespace selection -->\n            <KCard\n              class=\"my-6\"\n              has-shadow\n            >\n              <template slot=\"body\">\n                <FormFragment\n                  title=\"Namespace\"\n                  for-attr=\"k8s-namespace-selection\"\n                >\n                  <!-- <select\n                    v-if=\"validate.k8sNamespace === 'existing-namespace'\"\n                    id=\"k8s-namespace-selection\"\n                    v-model=\"validate.k8sNamespaceSelection\"\n                    class=\"k-input w-100\"\n                    name=\"k8s-namespace-selection\"\n                  >\n                    <option\n                      disabled\n                      value=\"\"\n                    >\n                      Select a Namespace&hellip;\n                    </option>\n                    <option value=\"namespace-1\">\n                      Namespace-1\n                    </option>\n                    <option value=\"namespace-2\">\n                      Namespace-2\n                    </option>\n                    <option value=\"namespace-3\">\n                      Namespace-3\n                    </option>\n                  </select> -->\n                  <input\n                    id=\"k8s-namespace-new\"\n                    v-model=\"validate.k8sNamespaceSelection\"\n                    type=\"text\"\n                    class=\"k-input w-100\"\n                    placeholder=\"your-namespace\"\n                    required\n                  >\n                </FormFragment>\n              </template>\n            </KCard>\n          </div>\n\n          <div v-if=\"validate.k8sDataplaneType === 'dataplane-type-ingress'\">\n            <!-- <p>\n              Is this a new Ingress that you want to deploy, or an existing one?\n            </p> -->\n\n            <!-- ingress type selection -->\n            <!-- <KCard\n              class=\"my-6\"\n              has-shadow\n            >\n              <template slot=\"body\">\n                <FormFragment\n                  all-inline\n                  equal-cols\n                  hide-label-col\n                >\n                  <label for=\"k8s-ingress-existing\">\n                    <input\n                      id=\"k8s-ingress-existing\"\n                      v-model=\"validate.k8sIngressType\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-ingress-type\"\n                      value=\"existing-ingress\"\n                      checked\n                    >\n                    <span>\n                      Existing Ingress\n                    </span>\n                  </label>\n                  <label for=\"k8s-ingress-new\">\n                    <input\n                      id=\"k8s-ingress-new\"\n                      v-model=\"validate.k8sIngressType\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-ingress-type\"\n                      value=\"new-ingress\"\n                    >\n                    <span>\n                      New Ingress\n                    </span>\n                  </label>\n                </FormFragment>\n              </template>\n            </KCard> -->\n\n            <p>\n              {{ title }} natively supports the Kong Ingress. Do you want to deploy\n              Kong or another Ingress?\n            </p>\n\n            <KCard\n              class=\"my-6\"\n              has-shadow\n            >\n              <template slot=\"body\">\n                <FormFragment\n                  all-inline\n                  equal-cols\n                  hide-label-col\n                >\n                  <label for=\"k8s-ingress-kong\">\n                    <input\n                      id=\"k8s-ingress-kong\"\n                      v-model=\"validate.k8sIngressBrand\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-ingress-brand\"\n                      value=\"kong-ingress\"\n                      checked\n                    >\n                    <span>\n                      Kong Ingress\n                    </span>\n                  </label>\n                  <label for=\"k8s-ingress-other\">\n                    <input\n                      id=\"k8s-ingress-other\"\n                      v-model=\"validate.k8sIngressBrand\"\n                      class=\"k-input\"\n                      type=\"radio\"\n                      name=\"k8s-ingress-brand\"\n                      value=\"other-ingress\"\n                    >\n                    <span>\n                      Other Ingress\n                    </span>\n                  </label>\n                </FormFragment>\n              </template>\n            </KCard>\n\n            <KCard\n              class=\"my-6\"\n              has-shadow\n            >\n              <template slot=\"body\">\n                <FormFragment\n                  title=\"Deployments\"\n                  for-attr=\"k8s-deployment-selection\"\n                >\n                  <!-- <select\n                    v-if=\"validate.k8sIngressType === 'existing-ingress'\"\n                    id=\"k8s-ingress-deployment-selection\"\n                    v-model=\"validate.k8sIngressDeploymentSelection\"\n                    class=\"k-input w-100\"\n                    name=\"k8s-ingress-selection\"\n                  >\n                    <option\n                      disabled\n                      value=\"\"\n                    >\n                      Select an Ingress&hellip;\n                    </option>\n                    <option value=\"ingress-1\">\n                      Ingress-1\n                    </option>\n                    <option value=\"ingress-2\">\n                      Ingress-2\n                    </option>\n                    <option value=\"ingress-3\">\n                      Ingress-3\n                    </option>\n                  </select> -->\n                  <input\n                    id=\"k8s-ingress-deployment-new\"\n                    v-model=\"validate.k8sIngressDeployment\"\n                    type=\"text\"\n                    class=\"k-input w-100\"\n                    placeholder=\"your-deployment\"\n                    required\n                  >\n                </FormFragment>\n              </template>\n            </KCard>\n\n            <KAlert\n              v-if=\"validate.k8sIngressBrand === 'other-ingress'\"\n              appearance=\"info\"\n            >\n              <template slot=\"alertMessage\">\n                <p>\n                  Please go ahead and deploy the Ingress first, then restart this\n                  wizard and select &quot;Existing Ingress&quot;.\n                </p>\n              </template>\n            </KAlert>\n          </div>\n        </template>\n        <template slot=\"complete\">\n          <div v-if=\"validate.meshName\">\n            <div v-if=\"scanFound === false\">\n              <h3>\n                Install a new Dataplane\n              </h3>\n              <p>\n                You can now execute the following commands to automatically inject\n                the sidebar proxy in every Pod, and by doing so creating the Dataplane.\n              </p>\n              <Tabs\n                :loaders=\"false\"\n                :tabs=\"tabs\"\n                :has-border=\"true\"\n                initial-tab-override=\"kubernetes\"\n              >\n                <template slot=\"kubernetes\">\n                  <CodeView\n                    title=\"Kubernetes\"\n                    copy-button-text=\"Copy Command to Clipboard\"\n                    lang=\"bash\"\n                    :content=\"codeOutput\"\n                  />\n                </template>\n                <!-- <template slot=\"universal\">\n                  <CodeView\n                    title=\"Universal\"\n                    copy-button-text=\"Copy Command to Clipboard\"\n                    lang=\"bash\"\n                    :content=\"codeOutput\"\n                  />\n                </template> -->\n              </Tabs>\n            </div>\n            <!-- <Scanner\n              :loader-function=\"scanForEntity\"\n              :should-start=\"true\"\n              :has-error=\"scanError\"\n              :can-complete=\"scanFound\"\n            >\n              <template slot=\"loading-title\">\n                <h3>Searching&hellip;</h3>\n              </template>\n              <template slot=\"loading-content\">\n                <p>We are looking for your dataplane.</p>\n              </template>\n              <template slot=\"complete-title\">\n                <h3>Done!</h3>\n              </template>\n              <template slot=\"complete-content\">\n                <p>\n                  Your Dataplane\n                  <strong v-if=\"validate.k8sNamespaceSelection\">\n                    {{ validate.k8sNamespaceSelection }}\n                  </strong>\n                  was found!\n                </p>\n                <p>\n                  <KButton\n                    appearance=\"primary\"\n                    :to=\"{ name: 'all-meshes' }\"\n                  >\n                    See Meshes\n                  </KButton>\n                </p>\n              </template>\n              <template slot=\"error-title\">\n                <h3>Mesh not found</h3>\n              </template>\n              <template slot=\"error-content\">\n                <p>We were unable to find your mesh.</p>\n              </template>\n            </Scanner> -->\n          </div>\n          <KAlert\n            v-else\n            appearance=\"danger\"\n          >\n            <template slot=\"alertMessage\">\n              <p>\n                Please return to the first step and make sure to select an\n                existing Mesh, or create a new one.\n              </p>\n            </template>\n          </KAlert>\n        </template>\n\n        <!-- sidebar content -->\n        <template slot=\"dataplane\">\n          <h3>Dataplane</h3>\n          <p>\n            In {{ title }}, a Dataplane entity represents a sidebar proxy running\n            alongside one of your services. Dataplanes can be added in any Mesh\n            that you may have created, and in Kubernetes, they will be auto-injected\n            by {{ title }}.\n          </p>\n        </template>\n      </StepSkeleton>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport { rejectKeys } from '@/views/Wizard/helpers'\nimport updateStorage from '@/views/Wizard/mixins/updateStorage'\nimport FormatForCLI from '@/mixins/FormatForCLI'\nimport FormFragment from '@/views/Wizard/components/FormFragment'\nimport Tabs from '@/components/Utils/Tabs'\nimport StepSkeleton from '@/views/Wizard/components/StepSkeleton'\nimport Switcher from '@/views/Wizard/components/Switcher'\nimport CodeView from '@/components/Skeletons/CodeView'\nimport Scanner from '@/views/Wizard/components/Scanner'\n\n// schema for building code output\n// import meshSchema from '@/views/Wizard/schemas/Mesh'\n\n// schema for building code output (TBD)\nimport dataplaneSchema from '@/views/Wizard/schemas/DataplaneKubernetes'\n\nexport default {\n  name: 'DataplaneWizardKubernetes',\n  metaInfo: {\n    title: 'Create a new Dataplane on Kubernetes'\n  },\n  components: {\n    FormFragment,\n    Tabs,\n    StepSkeleton,\n    Switcher,\n    CodeView,\n    Scanner\n  },\n  mixins: [\n    FormatForCLI,\n    updateStorage\n  ],\n  data () {\n    return {\n      schema: dataplaneSchema,\n      steps: [\n        {\n          label: 'General',\n          slug: 'general'\n        },\n        {\n          label: 'Scope Settings',\n          slug: 'scope-settings'\n        },\n        {\n          label: 'Install',\n          slug: 'complete'\n        }\n      ],\n      tabs: [\n        {\n          hash: '#kubernetes',\n          title: 'Kubernetes'\n        }\n        // {\n        //   hash: '#universal',\n        //   title: 'Universal'\n        // }\n      ],\n      sidebarContent: [\n        {\n          name: 'dataplane'\n        }\n      ],\n      startScanner: false,\n      scanFound: false,\n      scanError: false,\n      isComplete: false,\n      nextDisabled: true,\n      validate: {\n        meshName: '',\n        k8sDataplaneType: 'dataplane-type-service',\n        k8sServices: 'all-services',\n        k8sNamespace: 'existing-namespace',\n        k8sNamespaceSelection: '',\n        k8sServiceDeployment: 'existing-deployment',\n        k8sServiceDeploymentSelection: '',\n        k8sIngressDeployment: '',\n        k8sIngressDeploymentSelection: '',\n        k8sIngressType: '',\n        k8sIngressBrand: 'kong-ingress',\n        k8sIngressSelection: ''\n      },\n      vmsg: []\n    }\n  },\n  computed: {\n    ...mapGetters({\n      title: 'getTagline',\n      version: 'getVersion',\n      environment: 'getEnvironment',\n      formData: 'getStoredWizardData',\n      selectedTab: 'getSelectedTab',\n      meshes: 'getMeshList'\n    }),\n\n    // Our generated code output\n    codeOutput () {\n      const schema = Object.assign({}, this.schema)\n      const namespace = this.validate.k8sNamespaceSelection\n\n      // if no namespace is set, do nothing\n      if (!namespace) return\n\n      // name and namespace\n      schema.metadata.name = namespace\n      schema.metadata.namespace = namespace\n\n      // selected mesh\n      schema.metadata.labels['kuma.io/mesh'] = this.validate.meshName\n\n      /**\n       * Finalized output\n       */\n\n      // const codeBlock = { ...meshType, spec: { ...schema } }\n      const codeClosing = `\" | kubectl apply -f - && kubectl delete pod --all -n ${namespace}`\n      const assembledBlock = this.formatForCLI(schema, codeClosing)\n\n      return assembledBlock\n    }\n  },\n  watch: {\n    validate: {\n      handler () {\n        const data = JSON.stringify(this.validate)\n        const mesh = this.validate.meshName\n\n        // write the v-model data to localStorage whenever it changes\n        localStorage.setItem('storedFormData', data)\n\n        // allow the user to proceed if they've selected a Mesh\n        mesh.length\n          ? this.nextDisabled = false\n          : this.nextDisabled = true\n      },\n      deep: true\n    }\n  },\n  methods: {\n    scanForEntity () {\n      // get our entity from the VueX store\n      const entity = this.validate\n      const mesh = entity.meshName\n      const dataplane = 'test' // this is a placeholder\n\n      // reset things if the user is starting over\n      this.scanComplete = false\n      this.scanError = false\n\n      // do nothing if there is no Mesh nor Dataplane found\n      if (!mesh || !dataplane) return\n\n      /**\n       * TODO\n       * this will eventually change to `this.$api.getDataplaneFromMesh()`\n       * we will need to get the Mesh namespace the user selects, or the one\n       * they create, as well as the Dataplane namespace.\n       *\n       * This is also dependent upon multiple Kubernetes endpoints that don't\n       * yet exist in Kuma and need to be created.\n       *\n       */\n      this.$api.getDataplaneFromMesh(mesh, dataplane)\n        .then(response => {\n          if (response && response.name.length > 0) {\n            this.isRunning = true\n            this.scanFound = true\n          } else {\n            this.scanError = true\n          }\n        })\n        .catch(error => {\n          this.scanError = true\n\n          console.error(error)\n        })\n        .finally(() => {\n          this.scanComplete = true\n        })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\ninput:disabled + span {\n  color: #999;\n  // font-style: italic;\n}\n</style>\n"],"sourceRoot":"src/views/Wizard/views"}]}