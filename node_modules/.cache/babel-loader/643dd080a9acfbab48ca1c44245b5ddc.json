{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/components/Breadcrumbs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/components/Breadcrumbs.vue","mtime":1589345220775},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport _defineProperty from \"/Users/ksagar/vueproj/sample/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { isValidUuid } from '@/helpers';\nexport default {\n  computed: {\n    pageMesh: function pageMesh() {\n      return this.$route.params.mesh;\n    },\n    routes: function routes() {\n      var _this = this;\n\n      // const { query } = this.$router.currentRoute\n      var items = [];\n      this.$route.matched.map(function (r) {\n        // eslint-disable-next-line no-unused-vars\n        var text = _this.calculateRouteText(r); // eslint-disable-next-line no-unused-vars\n\n\n        var title = _this.calculateRouteTitle(r);\n\n        var key = r.redirect !== undefined && r.redirect.name !== undefined ? r.redirect.name : r.name;\n        /** this adds the mesh name and url to the breadcrumb chain */\n\n        if (_this.isCurrentRoute(r) && _this.pageMesh && _this.$route.name !== 'global-overview') {\n          items.push({\n            key: _this.pageMesh,\n            to: {\n              name: 'global-overview'\n            },\n            title: 'Global Overview',\n            text: _this.pageMesh\n          });\n        }\n\n        if (_this.isCurrentRoute(r) && r.meta.parent && r.meta.parent !== 'undefined') {\n          items.push({\n            key: r.meta.parent,\n            to: {\n              name: r.meta.parent\n            },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          });\n        } else if (_this.isCurrentRoute(r) && !r.meta.excludeAsBreadcrumb) {\n          items.push({\n            key: key,\n            to: {\n              name: key\n            },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          });\n        } else if (r.meta.parent && r.meta.parent !== 'undefined') {\n          items.push({\n            key: r.meta.parent,\n            to: {\n              name: r.meta.parent\n            },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          });\n        }\n      }); // the current page the user is on\n\n      var currentRouteText = this.calculateRouteTextAdvanced(this.$route);\n\n      if (currentRouteText) {\n        items.push({\n          title: currentRouteText,\n          text: currentRouteText\n        });\n      }\n\n      return items;\n    },\n    hideBreadcrumbs: function hideBreadcrumbs() {\n      return this.$route.query.hide_breadcrumb;\n    }\n  },\n  methods: {\n    getBreadcrumbItem: function getBreadcrumbItem(key, to, title, text) {\n      return {\n        key: key,\n        to: to,\n        title: title,\n        text: text\n      };\n    },\n    isCurrentRoute: function isCurrentRoute(r) {\n      // eslint-disable-next-line no-mixed-operators\n      return r.name && // eslint-disable-next-line no-mixed-operators\n      r.name === this.$router.currentRoute.name || r.redirect === this.$router.currentRoute.name;\n    },\n    calculateRouteFromQuery: function calculateRouteFromQuery(q) {\n      var entityId = q.entity_id,\n          entityType = q.entity_type;\n\n      if (entityId && entityType) {\n        var resolvedTo = this.$router.resolve({\n          name: \"show-\".concat(entityType.split('_')[0]),\n          params: {\n            id: entityId.split(',')[0]\n          }\n        }).normalizedTo;\n\n        var normalized = _objectSpread(_objectSpread({}, resolvedTo), {}, {\n          meta: _objectSpread({}, resolvedTo.meta)\n        }); // if there is an entity in the query params, then use it as the\n        // breadcrumb comma separated list with label being the second argument\n        // e.g. ?entity_id=uuid,name&entity_type=\n\n\n        var breadcrumb = normalized.params.id.split('-')[0];\n\n        if (entityId.split(',').length > 1 && entityId.split(',')[1]) {\n          breadcrumb = entityId.split(',')[1];\n        }\n\n        normalized.meta.breadcrumb = breadcrumb;\n        return [_objectSpread({}, this.getBreadcrumbItem(normalized.name, normalized, this.calculateRouteTitle(normalized), this.calculateRouteText(normalized)))];\n      }\n    },\n    calculateRouteText: function calculateRouteText(route) {\n      // TODO: support child routes that are children of :id to support routes\n      // like /workspaces/:id/services/:id/update\n      if (route.path && route.path.indexOf(':mesh') > -1) {\n        var params = this.$router.currentRoute.params;\n        return (params && params.mesh && isValidUuid(params.mesh) ? params.mesh.split('-')[0].trim() : params.mesh) || route.meta.breadcrumb || route.meta.title;\n      }\n\n      return route.meta && (route.meta.breadcrumb || route.meta.title) || route.name || route.meta.breadcrumb || route.meta.title;\n    },\n    calculateRouteTitle: function calculateRouteTitle(route) {\n      return route.params && route.params.mesh || route.path.indexOf(':mesh') > -1 && this.$router.currentRoute.params && this.$router.currentRoute.params.mesh;\n    },\n    calculateRouteTextAdvanced: function calculateRouteTextAdvanced(route) {\n      var params = route.params;\n      var isMesh = route.name === 'mesh-overview';\n      var newParams = Object.assign({}, params, {\n        mesh: null\n      });\n\n      if (isMesh) {\n        return params.mesh;\n      } else {\n        return Object.values(newParams).filter(function (x) {\n          return x;\n        })[0];\n      }\n    }\n  }\n};",{"version":3,"sources":["Breadcrumbs.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAUA,SAAA,WAAA,QAAA,WAAA;AAEA,eAAA;AACA,EAAA,QAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA,aAAA,KAAA,MAAA,CAAA,MAAA,CAAA,IAAA;AACA,KAHA;AAKA,IAAA,MALA,oBAKA;AAAA;;AACA;AAEA,UAAA,KAAA,GAAA,EAAA;AAEA,WAAA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,kBAAA,CAAA,CAAA,CAAA,CAFA,CAGA;;;AACA,YAAA,KAAA,GAAA,KAAA,CAAA,mBAAA,CAAA,CAAA,CAAA;;AACA,YAAA,GAAA,GAAA,CAAA,CAAA,QAAA,KAAA,SAAA,IAAA,CAAA,CAAA,QAAA,CAAA,IAAA,KAAA,SAAA,GAAA,CAAA,CAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AAEA;;AACA,YAAA,KAAA,CAAA,cAAA,CAAA,CAAA,KAAA,KAAA,CAAA,QAAA,IAAA,KAAA,CAAA,MAAA,CAAA,IAAA,KAAA,iBAAA,EAAA;AACA,UAAA,KAAA,CAAA,IAAA,CAAA;AACA,YAAA,GAAA,EAAA,KAAA,CAAA,QADA;AAEA,YAAA,EAAA,EAAA;AAAA,cAAA,IAAA,EAAA;AAAA,aAFA;AAGA,YAAA,KAAA,EAAA,iBAHA;AAIA,YAAA,IAAA,EAAA,KAAA,CAAA;AAJA,WAAA;AAMA;;AAEA,YAAA,KAAA,CAAA,cAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,MAAA,IAAA,CAAA,CAAA,IAAA,CAAA,MAAA,KAAA,WAAA,EAAA;AACA,UAAA,KAAA,CAAA,IAAA,CAAA;AACA,YAAA,GAAA,EAAA,CAAA,CAAA,IAAA,CAAA,MADA;AAEA,YAAA,EAAA,EAAA;AAAA,cAAA,IAAA,EAAA,CAAA,CAAA,IAAA,CAAA;AAAA,aAFA;AAGA,YAAA,KAAA,EAAA,CAAA,CAAA,IAAA,CAAA,KAHA;AAIA,YAAA,IAAA,EAAA,CAAA,CAAA,IAAA,CAAA,UAAA,IAAA,CAAA,CAAA,IAAA,CAAA;AAJA,WAAA;AAMA,SAPA,MAOA,IAAA,KAAA,CAAA,cAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,IAAA,CAAA,mBAAA,EAAA;AACA,UAAA,KAAA,CAAA,IAAA,CAAA;AACA,YAAA,GAAA,EAAA,GADA;AAEA,YAAA,EAAA,EAAA;AAAA,cAAA,IAAA,EAAA;AAAA,aAFA;AAGA,YAAA,KAAA,EAAA,CAAA,CAAA,IAAA,CAAA,KAHA;AAIA,YAAA,IAAA,EAAA,CAAA,CAAA,IAAA,CAAA,UAAA,IAAA,CAAA,CAAA,IAAA,CAAA;AAJA,WAAA;AAMA,SAPA,MAOA,IAAA,CAAA,CAAA,IAAA,CAAA,MAAA,IAAA,CAAA,CAAA,IAAA,CAAA,MAAA,KAAA,WAAA,EAAA;AACA,UAAA,KAAA,CAAA,IAAA,CAAA;AACA,YAAA,GAAA,EAAA,CAAA,CAAA,IAAA,CAAA,MADA;AAEA,YAAA,EAAA,EAAA;AAAA,cAAA,IAAA,EAAA,CAAA,CAAA,IAAA,CAAA;AAAA,aAFA;AAGA,YAAA,KAAA,EAAA,CAAA,CAAA,IAAA,CAAA,KAHA;AAIA,YAAA,IAAA,EAAA,CAAA,CAAA,IAAA,CAAA,UAAA,IAAA,CAAA,CAAA,IAAA,CAAA;AAJA,WAAA;AAMA;AACA,OAvCA,EALA,CA8CA;;AACA,UAAA,gBAAA,GAAA,KAAA,0BAAA,CAAA,KAAA,MAAA,CAAA;;AAEA,UAAA,gBAAA,EAAA;AACA,QAAA,KAAA,CAAA,IAAA,CAAA;AACA,UAAA,KAAA,EAAA,gBADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAAA;AAIA;;AAEA,aAAA,KAAA;AACA,KA9DA;AAgEA,IAAA,eAhEA,6BAgEA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,eAAA;AACA;AAlEA,GADA;AAsEA,EAAA,OAAA,EAAA;AACA,IAAA,iBADA,6BACA,GADA,EACA,EADA,EACA,KADA,EACA,IADA,EACA;AACA,aAAA;AAAA,QAAA,GAAA,EAAA,GAAA;AAAA,QAAA,EAAA,EAAA,EAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA;AACA,KAHA;AAKA,IAAA,cALA,0BAKA,CALA,EAKA;AACA;AACA,aAAA,CAAA,CAAA,IAAA,IACA;AACA,MAAA,CAAA,CAAA,IAAA,KAAA,KAAA,OAAA,CAAA,YAAA,CAAA,IAFA,IAGA,CAAA,CAAA,QAAA,KAAA,KAAA,OAAA,CAAA,YAAA,CAAA,IAHA;AAIA,KAXA;AAaA,IAAA,uBAbA,mCAaA,CAbA,EAaA;AAAA,UAEA,QAFA,GAIA,CAJA,CAEA,SAFA;AAAA,UAGA,UAHA,GAIA,CAJA,CAGA,WAHA;;AAMA,UAAA,QAAA,IAAA,UAAA,EAAA;AACA,YAAA,UAAA,GAAA,KAAA,OAAA,CAAA,OAAA,CAAA;AACA,UAAA,IAAA,iBAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CADA;AAEA,UAAA,MAAA,EAAA;AAAA,YAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA;AAAA;AAFA,SAAA,EAGA,YAHA;;AAKA,YAAA,UAAA,mCACA,UADA;AAEA,UAAA,IAAA,oBACA,UAAA,CAAA,IADA;AAFA,UAAA,CANA,CAaA;AACA;AACA;;;AACA,YAAA,UAAA,GAAA,UAAA,CAAA,MAAA,CAAA,EAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;AACA,YAAA,QAAA,CAAA,KAAA,CAAA,GAAA,EAAA,MAAA,GAAA,CAAA,IAAA,QAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA;AACA,UAAA,UAAA,GAAA,QAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACA;;AAEA,QAAA,UAAA,CAAA,IAAA,CAAA,UAAA,GAAA,UAAA;AAEA,eAAA,mBAEA,KAAA,iBAAA,CACA,UAAA,CAAA,IADA,EAEA,UAFA,EAGA,KAAA,mBAAA,CAAA,UAAA,CAHA,EAIA,KAAA,kBAAA,CAAA,UAAA,CAJA,CAFA,EAAA;AASA;AACA,KApDA;AAsDA,IAAA,kBAtDA,8BAsDA,KAtDA,EAsDA;AACA;AACA;AACA,UAAA,KAAA,CAAA,IAAA,IAAA,KAAA,CAAA,IAAA,CAAA,OAAA,CAAA,OAAA,IAAA,CAAA,CAAA,EAAA;AACA,YAAA,MAAA,GAAA,KAAA,OAAA,CAAA,YAAA,CAAA,MAAA;AAEA,eAAA,CACA,MAAA,IAAA,MAAA,CAAA,IAAA,IAAA,WAAA,CAAA,MAAA,CAAA,IAAA,CAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,MAAA,CAAA,IADA,KAEA,KAAA,CAAA,IAAA,CAAA,UAFA,IAEA,KAAA,CAAA,IAAA,CAAA,KAFA;AAGA;;AAEA,aACA,KAAA,CAAA,IAAA,KAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IACA,KAAA,CAAA,IAFA,IAGA,KAAA,CAAA,IAAA,CAAA,UAHA,IAGA,KAAA,CAAA,IAAA,CAAA,KAHA;AAIA,KArEA;AAuEA,IAAA,mBAvEA,+BAuEA,KAvEA,EAuEA;AACA,aACA,KAAA,CAAA,MAAA,IAAA,KAAA,CAAA,MAAA,CAAA,IAAA,IACA,KAAA,CAAA,IAAA,CAAA,OAAA,CAAA,OAAA,IAAA,CAAA,CAAA,IACA,KAAA,OAAA,CAAA,YAAA,CAAA,MADA,IAEA,KAAA,OAAA,CAAA,YAAA,CAAA,MAAA,CAAA,IAJA;AAMA,KA9EA;AAgFA,IAAA,0BAhFA,sCAgFA,KAhFA,EAgFA;AACA,UAAA,MAAA,GAAA,KAAA,CAAA,MAAA;AACA,UAAA,MAAA,GAAA,KAAA,CAAA,IAAA,KAAA,eAAA;AACA,UAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,MAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA,CAAA;;AAEA,UAAA,MAAA,EAAA;AACA,eAAA,MAAA,CAAA,IAAA;AACA,OAFA,MAEA;AACA,eAAA,MAAA,CAAA,MAAA,CAAA,SAAA,EAAA,MAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,CAAA;AAAA,SAAA,EAAA,CAAA,CAAA;AACA;AACA;AA1FA;AAtEA,CAAA","sourcesContent":["<template>\n  <div>\n    <Krumbs\n      v-if=\"!hideBreadcrumbs\"\n      :items=\"routes\"\n    />\n  </div>\n</template>\n\n<script>\nimport { isValidUuid } from '@/helpers'\n\nexport default {\n  computed: {\n    pageMesh () {\n      return this.$route.params.mesh\n    },\n\n    routes () {\n      // const { query } = this.$router.currentRoute\n\n      const items = []\n\n      this.$route.matched.map(r => {\n        // eslint-disable-next-line no-unused-vars\n        const text = this.calculateRouteText(r)\n        // eslint-disable-next-line no-unused-vars\n        const title = this.calculateRouteTitle(r)\n        const key = (r.redirect !== undefined && r.redirect.name !== undefined) ? r.redirect.name : r.name\n\n        /** this adds the mesh name and url to the breadcrumb chain */\n        if (this.isCurrentRoute(r) && this.pageMesh && this.$route.name !== 'global-overview') {\n          items.push({\n            key: this.pageMesh,\n            to: { name: 'global-overview' },\n            title: 'Global Overview',\n            text: this.pageMesh\n          })\n        }\n\n        if (this.isCurrentRoute(r) && r.meta.parent && r.meta.parent !== 'undefined') {\n          items.push({\n            key: r.meta.parent,\n            to: { name: r.meta.parent },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          })\n        } else if (this.isCurrentRoute(r) && !r.meta.excludeAsBreadcrumb) {\n          items.push({\n            key: key,\n            to: { name: key },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          })\n        } else if (r.meta.parent && r.meta.parent !== 'undefined') {\n          items.push({\n            key: r.meta.parent,\n            to: { name: r.meta.parent },\n            title: r.meta.title,\n            text: r.meta.breadcrumb || r.meta.title\n          })\n        }\n      })\n\n      // the current page the user is on\n      const currentRouteText = this.calculateRouteTextAdvanced(this.$route)\n\n      if (currentRouteText) {\n        items.push({\n          title: currentRouteText,\n          text: currentRouteText\n        })\n      }\n\n      return items\n    },\n\n    hideBreadcrumbs () {\n      return this.$route.query.hide_breadcrumb\n    }\n  },\n\n  methods: {\n    getBreadcrumbItem (key, to, title, text) {\n      return { key, to, title, text }\n    },\n\n    isCurrentRoute (r) {\n      // eslint-disable-next-line no-mixed-operators\n      return r.name &&\n        // eslint-disable-next-line no-mixed-operators\n        r.name === this.$router.currentRoute.name ||\n        r.redirect === this.$router.currentRoute.name\n    },\n\n    calculateRouteFromQuery (q) {\n      const {\n        entity_id: entityId,\n        entity_type: entityType\n      } = q\n\n      if (entityId && entityType) {\n        const resolvedTo = this.$router.resolve({\n          name: `show-${entityType.split('_')[0]}`,\n          params: { id: entityId.split(',')[0] }\n        }).normalizedTo\n\n        const normalized = {\n          ...resolvedTo,\n          meta: {\n            ...resolvedTo.meta\n          }\n        }\n\n        // if there is an entity in the query params, then use it as the\n        // breadcrumb comma separated list with label being the second argument\n        // e.g. ?entity_id=uuid,name&entity_type=\n        let breadcrumb = normalized.params.id.split('-')[0]\n        if (entityId.split(',').length > 1 && entityId.split(',')[1]) {\n          breadcrumb = entityId.split(',')[1]\n        }\n\n        normalized.meta.breadcrumb = breadcrumb\n\n        return [\n          {\n            ...this.getBreadcrumbItem(\n              normalized.name,\n              normalized,\n              this.calculateRouteTitle(normalized),\n              this.calculateRouteText(normalized))\n          }\n        ]\n      }\n    },\n\n    calculateRouteText (route) {\n      // TODO: support child routes that are children of :id to support routes\n      // like /workspaces/:id/services/:id/update\n      if (route.path && route.path.indexOf(':mesh') > -1) {\n        const params = this.$router.currentRoute.params\n\n        return (\n          params && params.mesh && isValidUuid(params.mesh) ? params.mesh.split('-')[0].trim() : params.mesh\n        ) || route.meta.breadcrumb || route.meta.title\n      }\n\n      return (\n        (route.meta && (route.meta.breadcrumb || route.meta.title)) ||\n        route.name\n      ) || route.meta.breadcrumb || route.meta.title\n    },\n\n    calculateRouteTitle (route) {\n      return (\n        (route.params && route.params.mesh) ||\n        (route.path.indexOf(':mesh') > -1 &&\n          this.$router.currentRoute.params &&\n          this.$router.currentRoute.params.mesh)\n      )\n    },\n\n    calculateRouteTextAdvanced (route) {\n      const params = route.params\n      const isMesh = (route.name === 'mesh-overview')\n      const newParams = Object.assign({}, params, { mesh: null })\n\n      if (isMesh) {\n        return params.mesh\n      } else {\n        return Object.values(newParams).filter(x => x)[0]\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.krumbs {\n  font-size: 14px;\n\n  .krumb-item {\n\n    &:after, a {\n      color: #8c8c8c !important;\n      text-decoration: none;\n    }\n  }\n}\n\n</style>\n"],"sourceRoot":"src/components"}]}