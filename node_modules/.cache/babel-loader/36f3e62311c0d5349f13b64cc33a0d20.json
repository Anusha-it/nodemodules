{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ksagar/vueproj/sample/src/components/Utils/MeshSelector.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/components/Utils/MeshSelector.vue","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'MeshSelector',\n  props: {\n    items: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: {\n    selectedMesh: function selectedMesh() {\n      var stored = localStorage.getItem('selectedMesh');\n      var query = this.$route.params.mesh;\n      return stored || query;\n    }\n  },\n  methods: {\n    changeMesh: function changeMesh(event) {\n      var val = event.target.value; // update the selected mesh in the store\n\n      this.$store.dispatch('updateSelectedMesh', val); // update the localStorage item so that it persists\n\n      localStorage.setItem('selectedMesh', val); // update the route accordingly\n\n      if (this.$route.name === 'global-overview') {\n        this.$router.push({\n          name: 'mesh-child',\n          params: {\n            mesh: val\n          }\n        });\n      } else {\n        this.$router.push({\n          params: {\n            mesh: val\n          }\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["MeshSelector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,eAAA;AACA,EAAA,IAAA,EAAA,cADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAFA;AAQA,EAAA,QAAA,EAAA;AACA,IAAA,YADA,0BACA;AACA,UAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,cAAA,CAAA;AACA,UAAA,KAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,IAAA;AAEA,aAAA,MAAA,IAAA,KAAA;AACA;AANA,GARA;AAgBA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,sBACA,KADA,EACA;AACA,UAAA,GAAA,GAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CADA,CAGA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,oBAAA,EAAA,GAAA,EAJA,CAMA;;AACA,MAAA,YAAA,CAAA,OAAA,CAAA,cAAA,EAAA,GAAA,EAPA,CASA;;AACA,UAAA,KAAA,MAAA,CAAA,IAAA,KAAA,iBAAA,EAAA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA;AACA,UAAA,IAAA,EAAA,YADA;AAEA,UAAA,MAAA,EAAA;AAAA,YAAA,IAAA,EAAA;AAAA;AAFA,SAAA;AAIA,OALA,MAKA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA;AACA,UAAA,MAAA,EAAA;AAAA,YAAA,IAAA,EAAA;AAAA;AADA,SAAA;AAGA;AACA;AArBA;AAhBA,CAAA","sourcesContent":["<template>\n  <div class=\"mesh-selector-container\">\n    <div v-if=\"items\">\n      <h3 class=\"menu-title\">\n        Filter by Mesh:\n      </h3>\n      <select\n        id=\"mesh-selector\"\n        class=\"mesh-selector\"\n        name=\"mesh-selector\"\n        @change=\"changeMesh\"\n      >\n        <option\n          value=\"all\"\n          :selected=\"'all' === selectedMesh\"\n        >\n          All Meshes\n        </option>\n        <option\n          v-for=\"item in items.items\"\n          :key=\"item.name\"\n          :value=\"item.name\"\n          :selected=\"item.name === selectedMesh\"\n        >\n          {{ item.name }}\n        </option>\n      </select>\n    </div>\n    <KAlert\n      v-else\n      appearance=\"danger\"\n      alert-message=\"No meshes found!\"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'MeshSelector',\n  props: {\n    items: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: {\n    selectedMesh () {\n      const stored = localStorage.getItem('selectedMesh')\n      const query = this.$route.params.mesh\n\n      return stored || query\n    }\n  },\n  methods: {\n    changeMesh (event) {\n      const val = event.target.value\n\n      // update the selected mesh in the store\n      this.$store.dispatch('updateSelectedMesh', val)\n\n      // update the localStorage item so that it persists\n      localStorage.setItem('selectedMesh', val)\n\n      // update the route accordingly\n      if (this.$route.name === 'global-overview') {\n        this.$router.push({\n          name: 'mesh-child',\n          params: { mesh: val }\n        })\n      } else {\n        this.$router.push({\n          params: { mesh: val }\n        })\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.mesh-selector-container {\n  padding: 32px 32px 0;\n}\n\n.mesh-selector {\n  display: block;\n  width: 100%;\n}\n\n.menu-title {\n  display: block;\n  font-size: var(--type-sm);\n  font-weight: 500;\n  color: var(--gray-3);\n  // text-transform: uppercase;\n  margin: 0 0 5px 0;\n}\n\n.closed .mesh-selector-container {\n  display: none;\n}\n</style>\n"],"sourceRoot":"src/components/Utils"}]}