{"remainingRequest":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js!/Users/ksagar/vueproj/sample/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/ksagar/vueproj/sample/src/services/mock.js","dependencies":[{"path":"/Users/ksagar/vueproj/sample/src/services/mock.js","mtime":1589260598000},{"path":"/Users/ksagar/vueproj/sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ksagar/vueproj/sample/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/ksagar/vueproj/sample/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ksagar/vueproj/sample/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar Mock = /*#__PURE__*/function () {\n  function Mock(axios) {\n    var _this = this;\n\n    _classCallCheck(this, Mock);\n\n    var MockAdapter = require('axios-mock-adapter');\n\n    var mockDelay = 0;\n    this.mock = new MockAdapter(axios, {\n      delayResponse: mockDelay\n    });\n\n    this.mock.injectMocks = function () {\n      return _this.mock;\n    };\n  }\n\n  _createClass(Mock, [{\n    key: \"setupPluginMocks\",\n    value: function setupPluginMocks() {\n      this.mock.injectMocks() // additional mocks added from RestClient\n      .onAny().passThrough();\n    }\n  }, {\n    key: \"setupMockEndpoints\",\n    value: function setupMockEndpoints() {\n      console.warn('%c âœ¨You are mocking api requests.', 'background: gray; color: white; display: block; padding: 0.25rem;');\n      this.mock // .onGet('/meshes').reply(200, {\n      //   items: [\n      //     {\n      //       mtls: {\n      //         ca: {\n      //           builtin: {}\n      //         }\n      //       },\n      //       name: 'default',\n      //       type: 'Mesh'\n      //     },\n      //     {\n      //       mtls: {\n      //         ca: {\n      //           builtin: {}\n      //         }\n      //       },\n      //       name: 'mesh-01',\n      //       type: 'Mesh'\n      //     },\n      //     {\n      //       mtls: {\n      //         ca: {\n      //           builtin: {}\n      //         }\n      //       },\n      //       name: 'kong-mania-12',\n      //       type: 'Mesh'\n      //     },\n      //     {\n      //       mtls: {\n      //         ca: {\n      //           builtin: {}\n      //         }\n      //       },\n      //       name: 'hello-world',\n      //       type: 'Mesh'\n      //     }\n      //   ]\n      // })\n      // .onGet('/meshes/default').reply(200, {\n      //   type: 'Mesh',\n      //   name: 'default',\n      //   mtls: {\n      //     ca: {\n      //       builtin: {}\n      //     }\n      //   }\n      // })\n      // .onGet('/meshes/mesh-01').reply(200, {\n      //   type: 'Mesh',\n      //   name: 'mesh-01',\n      //   mtls: {\n      //     ca: {\n      //       builtin: {}\n      //     }\n      //   }\n      // })\n      // .onGet('/meshes/kong-mania-12').reply(200, {\n      //   type: 'Mesh',\n      //   name: 'kong-mania-12',\n      //   mtls: {\n      //     ca: {\n      //       builtin: {}\n      //     }\n      //   }\n      // })\n      // .onGet('/meshes/hello-world').reply(200, {\n      //   type: 'Mesh',\n      //   name: 'hello-world',\n      //   mtls: {\n      //     ca: {\n      //       builtin: {}\n      //     }\n      //   }\n      // })\n      .onGet('/dataplanes').reply(200, {\n        items: [{\n          mesh: 'mesh-01',\n          name: 'hello-world-foobar-002',\n          networking: {},\n          type: 'Dataplane'\n        }, {\n          mesh: 'helloworld',\n          name: 'kuma-example-app',\n          networking: {},\n          type: 'Dataplane'\n        }, {\n          mesh: 'helloworld',\n          name: 'kuma-example-app-00',\n          networking: {},\n          type: 'Dataplane'\n        }, {\n          mesh: 'helloworld',\n          name: 'kuma-example-app-10',\n          networking: {},\n          type: 'Dataplane'\n        }, {\n          mesh: 'helloworld',\n          name: 'kuma-example-app-20',\n          networking: {},\n          type: 'Dataplane'\n        }, {\n          mesh: 'helloworld',\n          name: 'kuma-example-app-30',\n          networking: {},\n          type: 'Dataplane'\n        }, {\n          mesh: 'helloworld',\n          name: 'kuma-example-app-40',\n          networking: {},\n          type: 'Dataplane'\n        }, {\n          mesh: 'helloworld',\n          name: 'kuma-example-app-50',\n          networking: {},\n          type: 'Dataplane'\n        }, {\n          mesh: 'helloworld',\n          name: 'kuma-example-app-60',\n          networking: {},\n          type: 'Dataplane'\n        }, {\n          mesh: 'helloworld',\n          name: 'kuma-example-app-70',\n          networking: {},\n          type: 'Dataplane'\n        }]\n      }).onGet('/meshes/mesh-01/dataplanes').reply(200, {\n        items: [{\n          mesh: 'mesh-01',\n          name: 'hello-world-foobar-002',\n          networking: {\n            inbound: [{\n              interface: '172.21.0.4:8000:8000',\n              tags: {\n                service: 'hello-world-foobar-002',\n                tag02: 'value02',\n                tag03: 'value03',\n                tag04: 'value04',\n                tag05: 'value05',\n                tag06: 'value06',\n                tag07: 'value07',\n                tag08: 'value08'\n              }\n            }]\n          },\n          type: 'Dataplane'\n        }, {\n          mesh: 'mesh-01',\n          name: 'kuma-test-run-001',\n          networking: {\n            inbound: [{\n              interface: '172.21.0.7:3000:3000',\n              tags: {\n                service: 'kuma-test-run-001',\n                tag02: 'value02',\n                tag03: 'value03',\n                tag04: 'value04',\n                tag05: 'value05'\n              }\n            }],\n            outbound: [{\n              interface: ':4000',\n              service: 'kuma-example-app'\n            }]\n          },\n          type: 'Dataplane'\n        }, {\n          mesh: 'mesh-01',\n          name: 'some-really-cool-dp',\n          networking: {\n            inbound: [{\n              interface: '172.21.0.6:6060:6060',\n              tags: {\n                env: 'prod',\n                service: 'some-really-cool-dp',\n                version: 'v8',\n                tag02: 'value02',\n                tag03: 'value03',\n                tag04: 'value04'\n              }\n            }],\n            outbound: [{\n              interface: ':5000',\n              service: 'kuma-example-backend'\n            }]\n          },\n          type: 'Dataplane'\n        }]\n      }).onGet('/meshes/default/dataplanes').reply(200, {\n        items: [{\n          mesh: 'default',\n          name: 'kuma-example-app',\n          networking: {\n            inbound: [{\n              interface: '172.21.0.4:8000:8000',\n              tags: {\n                service: 'kuma-example-app',\n                tag02: 'value02',\n                tag03: 'value03',\n                tag04: 'value04',\n                tag05: 'value05',\n                tag06: 'value06',\n                tag07: 'value07',\n                tag08: 'value08'\n              }\n            }]\n          },\n          type: 'Dataplane'\n        }, {\n          mesh: 'default',\n          name: 'kuma-example-client',\n          networking: {\n            inbound: [{\n              interface: '172.21.0.7:3000:3000',\n              tags: {\n                service: 'kuma-example-client',\n                tag02: 'value02',\n                tag03: 'value03',\n                tag04: 'value04',\n                tag05: 'value05'\n              }\n            }],\n            outbound: [{\n              interface: ':4000',\n              service: 'kuma-example-app'\n            }]\n          },\n          type: 'Dataplane'\n        }, {\n          mesh: 'default',\n          name: 'kuma-example-web',\n          networking: {\n            inbound: [{\n              interface: '172.21.0.6:6060:6060',\n              tags: {\n                env: 'prod',\n                service: 'kuma-example-web',\n                version: 'v8'\n              }\n            }],\n            outbound: [{\n              interface: ':5000',\n              service: 'kuma-example-backend'\n            }]\n          },\n          type: 'Dataplane'\n        }, {\n          mesh: 'default',\n          name: 'kuma-example-backend-v1',\n          networking: {\n            inbound: [{\n              interface: '172.21.0.3:7070:7070',\n              tags: {\n                env: 'prod',\n                service: 'kuma-example-backend',\n                version: 'v1'\n              }\n            }]\n          },\n          type: 'Dataplane'\n        }, {\n          mesh: 'default',\n          name: 'kuma-example-backend-v2',\n          networking: {\n            inbound: [{\n              interface: '172.21.0.5:7070:7070',\n              tags: {\n                env: 'intg',\n                service: 'kuma-example-backend',\n                version: 'v2'\n              }\n            }]\n          },\n          type: 'Dataplane'\n        }]\n      }).onGet('/meshes/kong-mania-12/dataplanes').reply(200, {\n        items: [{\n          mesh: 'kong-mania-12',\n          name: 'hello-world-bazfoo-123',\n          networking: {\n            inbound: [{\n              interface: '172.21.0.4:8000:8000',\n              tags: {\n                service: 'hello-world-bazfoo-123',\n                tag02: 'value02',\n                tag03: 'value03',\n                tag04: 'value04',\n                tag05: 'value05',\n                tag06: 'value06',\n                tag07: 'value07',\n                tag08: 'value08'\n              }\n            }]\n          },\n          type: 'Dataplane'\n        }]\n      }).onGet('/meshes/mesh-01/dataplanes+insights/hello-world-foobar-002').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'mesh-01',\n        name: 'hello-world-foobar-002',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [{\n              port: 7070,\n              servicePort: 7070,\n              tags: {\n                env: 'dev',\n                service: 'kuma-example-backend',\n                tag01: 'value01',\n                reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n              }\n            }]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [{\n            id: '426fe0d8-f667-11e9-b081-acde48001122',\n            controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n            connectTime: '2019-10-24T14:04:56.820350Z',\n            status: {\n              lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n              total: {\n                responsesSent: '3',\n                responsesAcknowledged: '3'\n              },\n              cds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              eds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              lds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              rds: {}\n            }\n          }]\n        }\n      }).onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [{\n              port: 7070,\n              servicePort: 7070,\n              tags: {\n                env: 'dev',\n                service: 'kuma-example-backend',\n                tag01: 'value01',\n                reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n              }\n            }]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [{\n            id: '426fe0d8-f667-11e9-b081-acde48001122',\n            controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n            connectTime: '2019-10-24T14:04:56.820350Z',\n            status: {\n              lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n              total: {\n                responsesSent: '3',\n                responsesAcknowledged: '3'\n              },\n              cds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              eds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              lds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              rds: {}\n            }\n          }]\n        }\n      }).onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-00').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-00',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [{\n              port: 7070,\n              servicePort: 7070,\n              tags: {\n                env: 'dev',\n                service: 'kuma-example-backend',\n                tag01: 'value01',\n                reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n              }\n            }]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [{\n            id: '426fe0d8-f667-11e9-b081-acde48001122',\n            controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n            connectTime: '2019-10-24T14:04:56.820350Z',\n            status: {\n              lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n              total: {\n                responsesSent: '3',\n                responsesAcknowledged: '3'\n              },\n              cds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              eds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              lds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              rds: {}\n            }\n          }]\n        }\n      }).onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-10').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-10',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [{\n              port: 7070,\n              servicePort: 7070,\n              tags: {\n                env: 'dev',\n                service: 'kuma-example-backend',\n                tag01: 'value01',\n                reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n              }\n            }]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [{\n            id: '426fe0d8-f667-11e9-b081-acde48001122',\n            controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n            connectTime: '2019-10-24T14:04:56.820350Z',\n            status: {\n              lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n              total: {\n                responsesSent: '3',\n                responsesAcknowledged: '3'\n              },\n              cds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              eds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              lds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              rds: {}\n            }\n          }]\n        }\n      }).onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-20').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-20',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [{\n              port: 7070,\n              servicePort: 7070,\n              tags: {\n                env: 'dev',\n                service: 'kuma-example-backend',\n                tag01: 'value01',\n                reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n              }\n            }]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [{\n            id: '426fe0d8-f667-11e9-b081-acde48001122',\n            controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n            connectTime: '2019-10-24T14:04:56.820350Z',\n            status: {\n              lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n              total: {\n                responsesSent: '3',\n                responsesAcknowledged: '3'\n              },\n              cds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              eds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              lds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              rds: {}\n            }\n          }]\n        }\n      }).onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-30').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-30',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [{\n              port: 7070,\n              servicePort: 7070,\n              tags: {\n                env: 'dev',\n                service: 'kuma-example-backend',\n                tag01: 'value01',\n                reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n              }\n            }]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [{\n            id: '426fe0d8-f667-11e9-b081-acde48001122',\n            controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n            connectTime: '2019-10-24T14:04:56.820350Z',\n            status: {\n              lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n              total: {\n                responsesSent: '3',\n                responsesAcknowledged: '3'\n              },\n              cds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              eds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              lds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              rds: {}\n            }\n          }]\n        }\n      }).onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-40').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-40',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [{\n              port: 7070,\n              servicePort: 7070,\n              tags: {\n                env: 'dev',\n                service: 'kuma-example-backend',\n                tag01: 'value01',\n                reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n              }\n            }]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [{\n            id: '426fe0d8-f667-11e9-b081-acde48001122',\n            controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n            connectTime: '2019-10-24T14:04:56.820350Z',\n            status: {\n              lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n              total: {\n                responsesSent: '3',\n                responsesAcknowledged: '3'\n              },\n              cds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              eds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              lds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              rds: {}\n            }\n          }]\n        }\n      }).onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-50').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-50',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [{\n              port: 7070,\n              servicePort: 7070,\n              tags: {\n                env: 'dev',\n                service: 'kuma-example-backend',\n                tag01: 'value01',\n                reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n              }\n            }]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [{\n            id: '426fe0d8-f667-11e9-b081-acde48001122',\n            controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n            connectTime: '2019-10-24T14:04:56.820350Z',\n            status: {\n              lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n              total: {\n                responsesSent: '3',\n                responsesAcknowledged: '3'\n              },\n              cds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              eds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              lds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              rds: {}\n            }\n          }]\n        }\n      }).onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-60').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-60',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [{\n              port: 7070,\n              servicePort: 7070,\n              tags: {\n                env: 'dev',\n                service: 'kuma-example-backend',\n                tag01: 'value01',\n                reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n              }\n            }]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [{\n            id: '426fe0d8-f667-11e9-b081-acde48001122',\n            controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n            connectTime: '2019-10-24T14:04:56.820350Z',\n            status: {\n              lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n              total: {\n                responsesSent: '3',\n                responsesAcknowledged: '3'\n              },\n              cds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              eds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              lds: {\n                responsesSent: '1',\n                responsesAcknowledged: '1'\n              },\n              rds: {}\n            }\n          }]\n        }\n      }).onGet('/meshes/default/traffic-traces').reply(200, {\n        items: [{\n          type: 'TrafficTrace',\n          mesh: 'default',\n          name: 'tt-1',\n          selectors: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            backend: 'my-zipkin'\n          }\n        }, {\n          type: 'TrafficTrace',\n          mesh: 'default',\n          name: 'traffic-trace-02',\n          selectors: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            backend: 'my-zipkin'\n          }\n        }, {\n          type: 'TrafficTrace',\n          mesh: 'default',\n          name: 'tt-3',\n          selectors: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            backend: 'my-zipkin'\n          }\n        }]\n      }).onGet('/traffic-traces').reply(200, {\n        items: [{\n          type: 'TrafficTrace',\n          mesh: 'helloworld',\n          name: 'tt-123',\n          selectors: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            backend: 'my-zipkin'\n          }\n        }, {\n          type: 'TrafficTrace',\n          mesh: 'my-silly-mesh-name',\n          name: 'tt-tango-bravo-alpha-charlie-12',\n          selectors: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            backend: 'my-zipkin'\n          }\n        }, {\n          type: 'TrafficTrace',\n          mesh: 'default',\n          name: 'tt-1',\n          selectors: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            backend: 'my-zipkin'\n          }\n        }, {\n          type: 'TrafficTrace',\n          mesh: 'default',\n          name: 'traffic-trace-02',\n          selectors: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            backend: 'my-zipkin'\n          }\n        }, {\n          type: 'TrafficTrace',\n          mesh: 'default',\n          name: 'tt-3',\n          selectors: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            backend: 'my-zipkin'\n          }\n        }]\n      }).onGet('/meshes/default/health-checks').reply(200, {\n        items: [{\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'web-to-backend',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'web-to-banana',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'hello-health-check',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'testing-health-checks',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'health-check-0023',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'health-check-12345',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'foo-bar-baz-123',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }]\n      }).onGet('/meshes/default/health-checks/web-to-backend').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'web-to-backend',\n        sources: [{\n          match: {\n            service: 'web'\n          }\n        }],\n        destinations: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 1\n          }\n        }\n      }).onGet('/meshes/default/health-checks/web-to-banana').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'web-to-banana',\n        sources: [{\n          match: {\n            service: 'web'\n          }\n        }],\n        destinations: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 123,\n            healthyThreshold: 12\n          }\n        }\n      }).onGet('/meshes/default/health-checks/hello-health-check').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'hello-health-check',\n        sources: [{\n          match: {\n            service: 'web'\n          }\n        }],\n        destinations: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      }).onGet('/meshes/default/health-checks/testing-health-checks').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'testing-health-checks',\n        sources: [{\n          match: {\n            service: 'web'\n          }\n        }],\n        destinations: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      }).onGet('/meshes/default/health-checks/health-check-0023').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'health-check-0023',\n        sources: [{\n          match: {\n            service: 'web'\n          }\n        }],\n        destinations: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      }).onGet('/meshes/default/health-checks/health-check-12345').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'health-check-12345',\n        sources: [{\n          match: {\n            service: 'web'\n          }\n        }],\n        destinations: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      }).onGet('/meshes/default/health-checks/foo-bar-baz-123').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'foo-bar-baz-123',\n        sources: [{\n          match: {\n            service: 'web'\n          }\n        }],\n        destinations: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      }).onGet('/health-checks').reply(200, {\n        items: [{\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'web-to-backend',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'test-mesh',\n          name: 'web-to-banana',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'helloworld',\n          name: 'hello-health-check',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'another-test-mesh',\n          name: 'testing-health-checks',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'health-check-0023',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'health-check-12345',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }, {\n          type: 'HealthCheck',\n          mesh: 'default',\n          name: 'foo-bar-baz-123',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            activeChecks: {\n              interval: '10s',\n              timeout: '2s',\n              unhealthyThreshold: 3,\n              healthyThreshold: 1\n            }\n          }\n        }]\n      }).onGet('/meshes/default/fault-injections').reply(200, {\n        items: [{\n          type: 'FaultInjection',\n          mesh: 'default',\n          name: 'web-to-backend.kuma-system',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            delay: {\n              percentage: 50,\n              value: '0.010s'\n            },\n            abort: {\n              percentage: 40,\n              httpStatus: 500\n            },\n            responseBandwidth: {\n              percentage: 40,\n              limit: '50kbps'\n            }\n          }\n        }, {\n          type: 'FaultInjection',\n          mesh: 'default',\n          name: 'fi1.kuma-system',\n          sources: [{\n            match: {\n              service: '*'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            delay: {\n              percentage: 50,\n              value: '0.010s'\n            },\n            abort: {\n              percentage: 40,\n              httpStatus: 500\n            },\n            responseBandwidth: {\n              percentage: 40,\n              limit: '50kbps'\n            }\n          }\n        }]\n      }).onGet('/meshes/default/fault-injections/web-to-backend.kuma-system').reply(200, {\n        type: 'FaultInjection',\n        mesh: 'default',\n        name: 'web-to-backend.kuma-system',\n        sources: [{\n          match: {\n            service: 'web'\n          }\n        }],\n        destinations: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          delay: {\n            percentage: 50,\n            value: '0.010s'\n          },\n          abort: {\n            percentage: 40,\n            httpStatus: 500\n          },\n          responseBandwidth: {\n            percentage: 40,\n            limit: '50kbps'\n          }\n        }\n      }).onGet('/meshes/default/fault-injections/fi1.kuma-system').reply(200, {\n        type: 'FaultInjection',\n        mesh: 'default',\n        name: 'fi1.kuma-system',\n        sources: [{\n          match: {\n            service: 'web'\n          }\n        }],\n        destinations: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          delay: {\n            percentage: 50,\n            value: '0.010s'\n          },\n          abort: {\n            percentage: 40,\n            httpStatus: 500\n          },\n          responseBandwidth: {\n            percentage: 40,\n            limit: '50kbps'\n          }\n        }\n      }).onGet('/fault-injections').reply(200, {\n        items: [{\n          type: 'FaultInjection',\n          mesh: 'default',\n          name: 'web-to-backend.kuma-system',\n          sources: [{\n            match: {\n              service: 'web'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            delay: {\n              percentage: 50,\n              value: '0.010s'\n            },\n            abort: {\n              percentage: 40,\n              httpStatus: 500\n            },\n            responseBandwidth: {\n              percentage: 40,\n              limit: '50kbps'\n            }\n          }\n        }, {\n          type: 'FaultInjection',\n          mesh: 'default',\n          name: 'fi1.kuma-system',\n          sources: [{\n            match: {\n              service: '*'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: '*'\n            }\n          }],\n          conf: {\n            delay: {\n              percentage: 50,\n              value: '0.010s'\n            },\n            abort: {\n              percentage: 40,\n              httpStatus: 500\n            },\n            responseBandwidth: {\n              percentage: 40,\n              limit: '50kbps'\n            }\n          }\n        }]\n      }).onGet('/proxytemplates').reply(200, {\n        items: [{\n          type: 'ProxyTemplate',\n          mesh: 'default',\n          name: 'pt-1',\n          selectors: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            imports: ['default-proxy'],\n            resources: [{\n              name: 'raw-name',\n              version: 'raw-version',\n              resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n            }]\n          }\n        }, {\n          type: 'ProxyTemplate',\n          mesh: 'helloworld',\n          name: 'pt-123',\n          selectors: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            imports: ['default-proxy'],\n            resources: [{\n              name: 'raw-name',\n              version: 'raw-version',\n              resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n            }]\n          }\n        }]\n      }).onGet('/meshes/default/proxytemplates').reply(200, {\n        items: [{\n          type: 'ProxyTemplate',\n          mesh: 'default',\n          name: 'pt-1',\n          selectors: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            imports: ['default-proxy'],\n            resources: [{\n              name: 'raw-name',\n              version: 'raw-version',\n              resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n            }]\n          }\n        }]\n      }).onGet('/meshes/helloworld/proxytemplates').reply(200, {\n        items: [{\n          type: 'ProxyTemplate',\n          mesh: 'helloworld',\n          name: 'pt-123',\n          selectors: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            imports: ['default-proxy'],\n            resources: [{\n              name: 'raw-name',\n              version: 'raw-version',\n              resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n            }]\n          }\n        }]\n      }).onGet('/meshes/default/proxytemplates/pt-1').reply(200, {\n        type: 'ProxyTemplate',\n        mesh: 'default',\n        name: 'pt-1',\n        selectors: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          imports: ['default-proxy'],\n          resources: [{\n            name: 'raw-name',\n            version: 'raw-version',\n            resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n          }]\n        }\n      }).onGet('/meshes/helloworld/proxytemplates/pt-123').reply(200, {\n        type: 'ProxyTemplate',\n        mesh: 'helloworld',\n        name: 'pt-123',\n        selectors: [{\n          match: {\n            service: 'backend'\n          }\n        }],\n        conf: {\n          imports: ['default-proxy'],\n          resources: [{\n            name: 'raw-name',\n            version: 'raw-version',\n            resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n          }]\n        }\n      }).onGet('/traffic-logs').reply(200, {\n        items: [{\n          type: 'TrafficLog',\n          mesh: 'default',\n          name: 'tl-1',\n          sources: [{\n            match: {\n              service: 'web',\n              version: '1.0'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            backend: 'file'\n          }\n        }, {\n          type: 'TrafficLog',\n          mesh: 'default',\n          name: 'tl-123',\n          sources: [{\n            match: {\n              service: 'web',\n              version: '1.0'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            backend: 'file'\n          }\n        }, {\n          type: 'TrafficLog',\n          mesh: 'helloworld',\n          name: 'tl-alpha-tango',\n          sources: [{\n            match: {\n              service: 'web',\n              version: '1.0'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            backend: 'file'\n          }\n        }, {\n          type: 'TrafficLog',\n          mesh: 'my-silly-mesh-name',\n          name: 'tl-cat-dog-donut-12',\n          sources: [{\n            match: {\n              service: 'web',\n              version: '1.0'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          conf: {\n            backend: 'file'\n          }\n        }]\n      }).onGet('/traffic-permissions').reply(200, {\n        items: [{\n          type: 'TrafficPermission',\n          mesh: 'default',\n          name: 'tp-1',\n          sources: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'redis'\n            }\n          }]\n        }, {\n          type: 'TrafficPermission',\n          mesh: 'default',\n          name: 'tp-1234',\n          sources: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'redis'\n            }\n          }]\n        }, {\n          type: 'TrafficPermission',\n          mesh: 'default',\n          name: 'tp-alpha-tango-donut',\n          sources: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'redis'\n            }\n          }]\n        }, {\n          type: 'TrafficPermission',\n          mesh: 'helloworld',\n          name: 'tp-bravo-alpha-shiba',\n          sources: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'redis'\n            }\n          }]\n        }]\n      }).onGet('/meshes/default/traffic-permissions').reply(200, {\n        items: [{\n          type: 'TrafficPermission',\n          mesh: 'default',\n          name: 'tp-1',\n          sources: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'redis'\n            }\n          }]\n        }, {\n          type: 'TrafficPermission',\n          mesh: 'default',\n          name: 'tp-1234',\n          sources: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'redis'\n            }\n          }]\n        }, {\n          type: 'TrafficPermission',\n          mesh: 'default',\n          name: 'tp-alpha-tango-donut',\n          sources: [{\n            match: {\n              service: 'backend'\n            }\n          }],\n          destinations: [{\n            match: {\n              service: 'redis'\n            }\n          }]\n        }]\n      }).onAny().passThrough();\n    }\n  }]);\n\n  return Mock;\n}();\n\nexport { Mock as default };",{"version":3,"sources":["/Users/ksagar/vueproj/sample/src/services/mock.js"],"names":["Mock","axios","MockAdapter","require","mockDelay","mock","delayResponse","injectMocks","onAny","passThrough","console","warn","onGet","reply","items","mesh","name","networking","type","inbound","interface","tags","service","tag02","tag03","tag04","tag05","tag06","tag07","tag08","outbound","env","version","dataplane","address","port","servicePort","tag01","reallyLongTagLabelHere","dataplaneInsight","subscriptions","id","controlPlaneInstanceId","connectTime","status","lastUpdateTime","total","responsesSent","responsesAcknowledged","cds","eds","lds","rds","selectors","match","conf","backend","sources","destinations","activeChecks","interval","timeout","unhealthyThreshold","healthyThreshold","delay","percentage","value","abort","httpStatus","responseBandwidth","limit","imports","resources","resource"],"mappings":"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","sourcesContent":["export default class Mock {\n  constructor (axios) {\n    var MockAdapter = require('axios-mock-adapter')\n\n    const mockDelay = 0\n\n    this.mock = new MockAdapter(axios, { delayResponse: mockDelay })\n    this.mock.injectMocks = () => { return this.mock }\n  }\n\n  setupPluginMocks () {\n    this.mock\n      .injectMocks() // additional mocks added from RestClient\n      .onAny().passThrough()\n  }\n\n  setupMockEndpoints () {\n    console.warn('%c âœ¨You are mocking api requests.',\n      'background: gray; color: white; display: block; padding: 0.25rem;')\n\n    this.mock\n      // .onGet('/meshes').reply(200, {\n      //   items: [\n      //     {\n      //       mtls: {\n      //         ca: {\n      //           builtin: {}\n      //         }\n      //       },\n      //       name: 'default',\n      //       type: 'Mesh'\n      //     },\n      //     {\n      //       mtls: {\n      //         ca: {\n      //           builtin: {}\n      //         }\n      //       },\n      //       name: 'mesh-01',\n      //       type: 'Mesh'\n      //     },\n      //     {\n      //       mtls: {\n      //         ca: {\n      //           builtin: {}\n      //         }\n      //       },\n      //       name: 'kong-mania-12',\n      //       type: 'Mesh'\n      //     },\n      //     {\n      //       mtls: {\n      //         ca: {\n      //           builtin: {}\n      //         }\n      //       },\n      //       name: 'hello-world',\n      //       type: 'Mesh'\n      //     }\n      //   ]\n      // })\n      // .onGet('/meshes/default').reply(200, {\n      //   type: 'Mesh',\n      //   name: 'default',\n      //   mtls: {\n      //     ca: {\n      //       builtin: {}\n      //     }\n      //   }\n      // })\n      // .onGet('/meshes/mesh-01').reply(200, {\n      //   type: 'Mesh',\n      //   name: 'mesh-01',\n      //   mtls: {\n      //     ca: {\n      //       builtin: {}\n      //     }\n      //   }\n      // })\n      // .onGet('/meshes/kong-mania-12').reply(200, {\n      //   type: 'Mesh',\n      //   name: 'kong-mania-12',\n      //   mtls: {\n      //     ca: {\n      //       builtin: {}\n      //     }\n      //   }\n      // })\n      // .onGet('/meshes/hello-world').reply(200, {\n      //   type: 'Mesh',\n      //   name: 'hello-world',\n      //   mtls: {\n      //     ca: {\n      //       builtin: {}\n      //     }\n      //   }\n      // })\n      .onGet('/dataplanes').reply(200, {\n        items: [\n          {\n            mesh: 'mesh-01',\n            name: 'hello-world-foobar-002',\n            networking: {},\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'helloworld',\n            name: 'kuma-example-app',\n            networking: {},\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'helloworld',\n            name: 'kuma-example-app-00',\n            networking: {},\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'helloworld',\n            name: 'kuma-example-app-10',\n            networking: {},\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'helloworld',\n            name: 'kuma-example-app-20',\n            networking: {},\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'helloworld',\n            name: 'kuma-example-app-30',\n            networking: {},\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'helloworld',\n            name: 'kuma-example-app-40',\n            networking: {},\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'helloworld',\n            name: 'kuma-example-app-50',\n            networking: {},\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'helloworld',\n            name: 'kuma-example-app-60',\n            networking: {},\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'helloworld',\n            name: 'kuma-example-app-70',\n            networking: {},\n            type: 'Dataplane'\n          }\n        ]\n      })\n      .onGet('/meshes/mesh-01/dataplanes').reply(200, {\n        items: [\n          {\n            mesh: 'mesh-01',\n            name: 'hello-world-foobar-002',\n            networking: {\n              inbound: [\n                {\n                  interface: '172.21.0.4:8000:8000',\n                  tags: {\n                    service: 'hello-world-foobar-002',\n                    tag02: 'value02',\n                    tag03: 'value03',\n                    tag04: 'value04',\n                    tag05: 'value05',\n                    tag06: 'value06',\n                    tag07: 'value07',\n                    tag08: 'value08'\n                  }\n                }\n              ]\n            },\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'mesh-01',\n            name: 'kuma-test-run-001',\n            networking: {\n              inbound: [\n                {\n                  interface: '172.21.0.7:3000:3000',\n                  tags: {\n                    service: 'kuma-test-run-001',\n                    tag02: 'value02',\n                    tag03: 'value03',\n                    tag04: 'value04',\n                    tag05: 'value05'\n                  }\n                }\n              ],\n              outbound: [\n                {\n                  interface: ':4000',\n                  service: 'kuma-example-app'\n                }\n              ]\n            },\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'mesh-01',\n            name: 'some-really-cool-dp',\n            networking: {\n              inbound: [\n                {\n                  interface: '172.21.0.6:6060:6060',\n                  tags: {\n                    env: 'prod',\n                    service: 'some-really-cool-dp',\n                    version: 'v8',\n                    tag02: 'value02',\n                    tag03: 'value03',\n                    tag04: 'value04'\n                  }\n                }\n              ],\n              outbound: [\n                {\n                  interface: ':5000',\n                  service: 'kuma-example-backend'\n                }\n              ]\n            },\n            type: 'Dataplane'\n          }\n        ]\n      })\n      .onGet('/meshes/default/dataplanes').reply(200, {\n        items: [\n          {\n            mesh: 'default',\n            name: 'kuma-example-app',\n            networking: {\n              inbound: [\n                {\n                  interface: '172.21.0.4:8000:8000',\n                  tags: {\n                    service: 'kuma-example-app',\n                    tag02: 'value02',\n                    tag03: 'value03',\n                    tag04: 'value04',\n                    tag05: 'value05',\n                    tag06: 'value06',\n                    tag07: 'value07',\n                    tag08: 'value08'\n                  }\n                }\n              ]\n            },\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'default',\n            name: 'kuma-example-client',\n            networking: {\n              inbound: [\n                {\n                  interface: '172.21.0.7:3000:3000',\n                  tags: {\n                    service: 'kuma-example-client',\n                    tag02: 'value02',\n                    tag03: 'value03',\n                    tag04: 'value04',\n                    tag05: 'value05'\n                  }\n                }\n              ],\n              outbound: [\n                {\n                  interface: ':4000',\n                  service: 'kuma-example-app'\n                }\n              ]\n            },\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'default',\n            name: 'kuma-example-web',\n            networking: {\n              inbound: [\n                {\n                  interface: '172.21.0.6:6060:6060',\n                  tags: {\n                    env: 'prod',\n                    service: 'kuma-example-web',\n                    version: 'v8'\n                  }\n                }\n              ],\n              outbound: [\n                {\n                  interface: ':5000',\n                  service: 'kuma-example-backend'\n                }\n              ]\n            },\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'default',\n            name: 'kuma-example-backend-v1',\n            networking: {\n              inbound: [\n                {\n                  interface: '172.21.0.3:7070:7070',\n                  tags: {\n                    env: 'prod',\n                    service: 'kuma-example-backend',\n                    version: 'v1'\n                  }\n                }\n              ]\n            },\n            type: 'Dataplane'\n          },\n          {\n            mesh: 'default',\n            name: 'kuma-example-backend-v2',\n            networking: {\n              inbound: [\n                {\n                  interface: '172.21.0.5:7070:7070',\n                  tags: {\n                    env: 'intg',\n                    service: 'kuma-example-backend',\n                    version: 'v2'\n                  }\n                }\n              ]\n            },\n            type: 'Dataplane'\n          }\n        ]\n      })\n      .onGet('/meshes/kong-mania-12/dataplanes').reply(200, {\n        items: [\n          {\n            mesh: 'kong-mania-12',\n            name: 'hello-world-bazfoo-123',\n            networking: {\n              inbound: [\n                {\n                  interface: '172.21.0.4:8000:8000',\n                  tags: {\n                    service: 'hello-world-bazfoo-123',\n                    tag02: 'value02',\n                    tag03: 'value03',\n                    tag04: 'value04',\n                    tag05: 'value05',\n                    tag06: 'value06',\n                    tag07: 'value07',\n                    tag08: 'value08'\n                  }\n                }\n              ]\n            },\n            type: 'Dataplane'\n          }\n        ]\n      })\n      .onGet('/meshes/mesh-01/dataplanes+insights/hello-world-foobar-002').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'mesh-01',\n        name: 'hello-world-foobar-002',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [\n              {\n                port: 7070,\n                servicePort: 7070,\n                tags: {\n                  env: 'dev',\n                  service: 'kuma-example-backend',\n                  tag01: 'value01',\n                  reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n                }\n              }\n            ]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [\n            {\n              id: '426fe0d8-f667-11e9-b081-acde48001122',\n              controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n              connectTime: '2019-10-24T14:04:56.820350Z',\n              status: {\n                lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n                total: {\n                  responsesSent: '3',\n                  responsesAcknowledged: '3'\n                },\n                cds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                eds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                lds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                rds: {}\n              }\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [\n              {\n                port: 7070,\n                servicePort: 7070,\n                tags: {\n                  env: 'dev',\n                  service: 'kuma-example-backend',\n                  tag01: 'value01',\n                  reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n                }\n              }\n            ]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [\n            {\n              id: '426fe0d8-f667-11e9-b081-acde48001122',\n              controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n              connectTime: '2019-10-24T14:04:56.820350Z',\n              status: {\n                lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n                total: {\n                  responsesSent: '3',\n                  responsesAcknowledged: '3'\n                },\n                cds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                eds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                lds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                rds: {}\n              }\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-00').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-00',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [\n              {\n                port: 7070,\n                servicePort: 7070,\n                tags: {\n                  env: 'dev',\n                  service: 'kuma-example-backend',\n                  tag01: 'value01',\n                  reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n                }\n              }\n            ]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [\n            {\n              id: '426fe0d8-f667-11e9-b081-acde48001122',\n              controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n              connectTime: '2019-10-24T14:04:56.820350Z',\n              status: {\n                lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n                total: {\n                  responsesSent: '3',\n                  responsesAcknowledged: '3'\n                },\n                cds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                eds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                lds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                rds: {}\n              }\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-10').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-10',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [\n              {\n                port: 7070,\n                servicePort: 7070,\n                tags: {\n                  env: 'dev',\n                  service: 'kuma-example-backend',\n                  tag01: 'value01',\n                  reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n                }\n              }\n            ]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [\n            {\n              id: '426fe0d8-f667-11e9-b081-acde48001122',\n              controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n              connectTime: '2019-10-24T14:04:56.820350Z',\n              status: {\n                lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n                total: {\n                  responsesSent: '3',\n                  responsesAcknowledged: '3'\n                },\n                cds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                eds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                lds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                rds: {}\n              }\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-20').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-20',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [\n              {\n                port: 7070,\n                servicePort: 7070,\n                tags: {\n                  env: 'dev',\n                  service: 'kuma-example-backend',\n                  tag01: 'value01',\n                  reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n                }\n              }\n            ]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [\n            {\n              id: '426fe0d8-f667-11e9-b081-acde48001122',\n              controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n              connectTime: '2019-10-24T14:04:56.820350Z',\n              status: {\n                lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n                total: {\n                  responsesSent: '3',\n                  responsesAcknowledged: '3'\n                },\n                cds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                eds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                lds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                rds: {}\n              }\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-30').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-30',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [\n              {\n                port: 7070,\n                servicePort: 7070,\n                tags: {\n                  env: 'dev',\n                  service: 'kuma-example-backend',\n                  tag01: 'value01',\n                  reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n                }\n              }\n            ]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [\n            {\n              id: '426fe0d8-f667-11e9-b081-acde48001122',\n              controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n              connectTime: '2019-10-24T14:04:56.820350Z',\n              status: {\n                lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n                total: {\n                  responsesSent: '3',\n                  responsesAcknowledged: '3'\n                },\n                cds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                eds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                lds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                rds: {}\n              }\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-40').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-40',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [\n              {\n                port: 7070,\n                servicePort: 7070,\n                tags: {\n                  env: 'dev',\n                  service: 'kuma-example-backend',\n                  tag01: 'value01',\n                  reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n                }\n              }\n            ]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [\n            {\n              id: '426fe0d8-f667-11e9-b081-acde48001122',\n              controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n              connectTime: '2019-10-24T14:04:56.820350Z',\n              status: {\n                lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n                total: {\n                  responsesSent: '3',\n                  responsesAcknowledged: '3'\n                },\n                cds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                eds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                lds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                rds: {}\n              }\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-50').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-50',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [\n              {\n                port: 7070,\n                servicePort: 7070,\n                tags: {\n                  env: 'dev',\n                  service: 'kuma-example-backend',\n                  tag01: 'value01',\n                  reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n                }\n              }\n            ]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [\n            {\n              id: '426fe0d8-f667-11e9-b081-acde48001122',\n              controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n              connectTime: '2019-10-24T14:04:56.820350Z',\n              status: {\n                lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n                total: {\n                  responsesSent: '3',\n                  responsesAcknowledged: '3'\n                },\n                cds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                eds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                lds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                rds: {}\n              }\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/helloworld/dataplanes+insights/kuma-example-app-60').reply(200, {\n        type: 'DataplaneOverview',\n        mesh: 'helloworld',\n        name: 'kuma-example-app-60',\n        dataplane: {\n          networking: {\n            address: '172.21.0.5',\n            inbound: [\n              {\n                port: 7070,\n                servicePort: 7070,\n                tags: {\n                  env: 'dev',\n                  service: 'kuma-example-backend',\n                  tag01: 'value01',\n                  reallyLongTagLabelHere: 'a-really-long-tag-value-here'\n                }\n              }\n            ]\n          }\n        },\n        dataplaneInsight: {\n          subscriptions: [\n            {\n              id: '426fe0d8-f667-11e9-b081-acde48001122',\n              controlPlaneInstanceId: '06070748-f667-11e9-b081-acde48001122',\n              connectTime: '2019-10-24T14:04:56.820350Z',\n              status: {\n                lastUpdateTime: '2019-10-24T14:04:57.832482Z',\n                total: {\n                  responsesSent: '3',\n                  responsesAcknowledged: '3'\n                },\n                cds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                eds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                lds: {\n                  responsesSent: '1',\n                  responsesAcknowledged: '1'\n                },\n                rds: {}\n              }\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/default/traffic-traces').reply(200, {\n        items: [\n          {\n            type: 'TrafficTrace',\n            mesh: 'default',\n            name: 'tt-1',\n            selectors: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              backend: 'my-zipkin'\n            }\n          },\n          {\n            type: 'TrafficTrace',\n            mesh: 'default',\n            name: 'traffic-trace-02',\n            selectors: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              backend: 'my-zipkin'\n            }\n          },\n          {\n            type: 'TrafficTrace',\n            mesh: 'default',\n            name: 'tt-3',\n            selectors: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              backend: 'my-zipkin'\n            }\n          }\n        ]\n      })\n      .onGet('/traffic-traces').reply(200, {\n        items: [\n          {\n            type: 'TrafficTrace',\n            mesh: 'helloworld',\n            name: 'tt-123',\n            selectors: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              backend: 'my-zipkin'\n            }\n          },\n          {\n            type: 'TrafficTrace',\n            mesh: 'my-silly-mesh-name',\n            name: 'tt-tango-bravo-alpha-charlie-12',\n            selectors: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              backend: 'my-zipkin'\n            }\n          },\n          {\n            type: 'TrafficTrace',\n            mesh: 'default',\n            name: 'tt-1',\n            selectors: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              backend: 'my-zipkin'\n            }\n          },\n          {\n            type: 'TrafficTrace',\n            mesh: 'default',\n            name: 'traffic-trace-02',\n            selectors: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              backend: 'my-zipkin'\n            }\n          },\n          {\n            type: 'TrafficTrace',\n            mesh: 'default',\n            name: 'tt-3',\n            selectors: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              backend: 'my-zipkin'\n            }\n          }\n        ]\n      })\n      .onGet('/meshes/default/health-checks').reply(200, {\n        items: [\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'web-to-backend',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'web-to-banana',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'hello-health-check',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'testing-health-checks',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'health-check-0023',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'health-check-12345',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'foo-bar-baz-123',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          }\n        ]\n      })\n      .onGet('/meshes/default/health-checks/web-to-backend').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'web-to-backend',\n        sources: [\n          {\n            match: {\n              service: 'web'\n            }\n          }\n        ],\n        destinations: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 1\n          }\n        }\n      })\n      .onGet('/meshes/default/health-checks/web-to-banana').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'web-to-banana',\n        sources: [\n          {\n            match: {\n              service: 'web'\n            }\n          }\n        ],\n        destinations: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 123,\n            healthyThreshold: 12\n          }\n        }\n      })\n      .onGet('/meshes/default/health-checks/hello-health-check').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'hello-health-check',\n        sources: [\n          {\n            match: {\n              service: 'web'\n            }\n          }\n        ],\n        destinations: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      })\n      .onGet('/meshes/default/health-checks/testing-health-checks').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'testing-health-checks',\n        sources: [\n          {\n            match: {\n              service: 'web'\n            }\n          }\n        ],\n        destinations: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      })\n      .onGet('/meshes/default/health-checks/health-check-0023').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'health-check-0023',\n        sources: [\n          {\n            match: {\n              service: 'web'\n            }\n          }\n        ],\n        destinations: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      })\n      .onGet('/meshes/default/health-checks/health-check-12345').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'health-check-12345',\n        sources: [\n          {\n            match: {\n              service: 'web'\n            }\n          }\n        ],\n        destinations: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      })\n      .onGet('/meshes/default/health-checks/foo-bar-baz-123').reply(200, {\n        type: 'HealthCheck',\n        mesh: 'default',\n        name: 'foo-bar-baz-123',\n        sources: [\n          {\n            match: {\n              service: 'web'\n            }\n          }\n        ],\n        destinations: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          activeChecks: {\n            interval: '10s',\n            timeout: '2s',\n            unhealthyThreshold: 3,\n            healthyThreshold: 4\n          }\n        }\n      })\n      .onGet('/health-checks').reply(200, {\n        items: [\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'web-to-backend',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'test-mesh',\n            name: 'web-to-banana',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'helloworld',\n            name: 'hello-health-check',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'another-test-mesh',\n            name: 'testing-health-checks',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'health-check-0023',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'health-check-12345',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          },\n          {\n            type: 'HealthCheck',\n            mesh: 'default',\n            name: 'foo-bar-baz-123',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              activeChecks: {\n                interval: '10s',\n                timeout: '2s',\n                unhealthyThreshold: 3,\n                healthyThreshold: 1\n              }\n            }\n          }\n        ]\n      })\n      .onGet('/meshes/default/fault-injections').reply(200, {\n        items: [\n          {\n            type: 'FaultInjection',\n            mesh: 'default',\n            name: 'web-to-backend.kuma-system',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              delay: {\n                percentage: 50,\n                value: '0.010s'\n              },\n              abort: {\n                percentage: 40,\n                httpStatus: 500\n              },\n              responseBandwidth: {\n                percentage: 40,\n                limit: '50kbps'\n              }\n            }\n          },\n          {\n            type: 'FaultInjection',\n            mesh: 'default',\n            name: 'fi1.kuma-system',\n            sources: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              delay: {\n                percentage: 50,\n                value: '0.010s'\n              },\n              abort: {\n                percentage: 40,\n                httpStatus: 500\n              },\n              responseBandwidth: {\n                percentage: 40,\n                limit: '50kbps'\n              }\n            }\n          }\n        ]\n      })\n      .onGet('/meshes/default/fault-injections/web-to-backend.kuma-system').reply(200, {\n        type: 'FaultInjection',\n        mesh: 'default',\n        name: 'web-to-backend.kuma-system',\n        sources: [\n          {\n            match: {\n              service: 'web'\n            }\n          }\n        ],\n        destinations: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          delay: {\n            percentage: 50,\n            value: '0.010s'\n          },\n          abort: {\n            percentage: 40,\n            httpStatus: 500\n          },\n          responseBandwidth: {\n            percentage: 40,\n            limit: '50kbps'\n          }\n        }\n      })\n      .onGet('/meshes/default/fault-injections/fi1.kuma-system').reply(200, {\n        type: 'FaultInjection',\n        mesh: 'default',\n        name: 'fi1.kuma-system',\n        sources: [\n          {\n            match: {\n              service: 'web'\n            }\n          }\n        ],\n        destinations: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          delay: {\n            percentage: 50,\n            value: '0.010s'\n          },\n          abort: {\n            percentage: 40,\n            httpStatus: 500\n          },\n          responseBandwidth: {\n            percentage: 40,\n            limit: '50kbps'\n          }\n        }\n      })\n      .onGet('/fault-injections').reply(200, {\n        items: [\n          {\n            type: 'FaultInjection',\n            mesh: 'default',\n            name: 'web-to-backend.kuma-system',\n            sources: [\n              {\n                match: {\n                  service: 'web'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              delay: {\n                percentage: 50,\n                value: '0.010s'\n              },\n              abort: {\n                percentage: 40,\n                httpStatus: 500\n              },\n              responseBandwidth: {\n                percentage: 40,\n                limit: '50kbps'\n              }\n            }\n          },\n          {\n            type: 'FaultInjection',\n            mesh: 'default',\n            name: 'fi1.kuma-system',\n            sources: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: '*'\n                }\n              }\n            ],\n            conf: {\n              delay: {\n                percentage: 50,\n                value: '0.010s'\n              },\n              abort: {\n                percentage: 40,\n                httpStatus: 500\n              },\n              responseBandwidth: {\n                percentage: 40,\n                limit: '50kbps'\n              }\n            }\n          }\n        ]\n      })\n      .onGet('/proxytemplates').reply(200, {\n        items: [\n          {\n            type: 'ProxyTemplate',\n            mesh: 'default',\n            name: 'pt-1',\n            selectors: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              imports: [\n                'default-proxy'\n              ],\n              resources: [\n                {\n                  name: 'raw-name',\n                  version: 'raw-version',\n                  resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n                }\n              ]\n            }\n          },\n          {\n            type: 'ProxyTemplate',\n            mesh: 'helloworld',\n            name: 'pt-123',\n            selectors: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              imports: [\n                'default-proxy'\n              ],\n              resources: [\n                {\n                  name: 'raw-name',\n                  version: 'raw-version',\n                  resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n                }\n              ]\n            }\n          }\n        ]\n      })\n      .onGet('/meshes/default/proxytemplates').reply(200, {\n        items: [\n          {\n            type: 'ProxyTemplate',\n            mesh: 'default',\n            name: 'pt-1',\n            selectors: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              imports: [\n                'default-proxy'\n              ],\n              resources: [\n                {\n                  name: 'raw-name',\n                  version: 'raw-version',\n                  resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n                }\n              ]\n            }\n          }\n        ]\n      })\n      .onGet('/meshes/helloworld/proxytemplates').reply(200, {\n        items: [\n          {\n            type: 'ProxyTemplate',\n            mesh: 'helloworld',\n            name: 'pt-123',\n            selectors: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              imports: [\n                'default-proxy'\n              ],\n              resources: [\n                {\n                  name: 'raw-name',\n                  version: 'raw-version',\n                  resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n                }\n              ]\n            }\n          }\n        ]\n      })\n      .onGet('/meshes/default/proxytemplates/pt-1').reply(200, {\n        type: 'ProxyTemplate',\n        mesh: 'default',\n        name: 'pt-1',\n        selectors: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          imports: [\n            'default-proxy'\n          ],\n          resources: [\n            {\n              name: 'raw-name',\n              version: 'raw-version',\n              resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n            }\n          ]\n        }\n      })\n      .onGet('/meshes/helloworld/proxytemplates/pt-123').reply(200, {\n        type: 'ProxyTemplate',\n        mesh: 'helloworld',\n        name: 'pt-123',\n        selectors: [\n          {\n            match: {\n              service: 'backend'\n            }\n          }\n        ],\n        conf: {\n          imports: [\n            'default-proxy'\n          ],\n          resources: [\n            {\n              name: 'raw-name',\n              version: 'raw-version',\n              resource: \"'@type': type.googleapis.com/envoy.api.v2.Cluster\\nconnectTimeout: 5s\\nloadAssignment:\\n  clusterName: localhost:8443\\n  endpoints:\\n    - lbEndpoints:\\n        - endpoint:\\n            address:\\n              socketAddress:\\n                address: 127.0.0.1\\n                portValue: 8443\\nname: localhost:8443\\ntype: STATIC\\n\"\n            }\n          ]\n        }\n      })\n      .onGet('/traffic-logs').reply(200, {\n        items: [\n          {\n            type: 'TrafficLog',\n            mesh: 'default',\n            name: 'tl-1',\n            sources: [\n              {\n                match: {\n                  service: 'web',\n                  version: '1.0'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              backend: 'file'\n            }\n          },\n          {\n            type: 'TrafficLog',\n            mesh: 'default',\n            name: 'tl-123',\n            sources: [\n              {\n                match: {\n                  service: 'web',\n                  version: '1.0'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              backend: 'file'\n            }\n          },\n          {\n            type: 'TrafficLog',\n            mesh: 'helloworld',\n            name: 'tl-alpha-tango',\n            sources: [\n              {\n                match: {\n                  service: 'web',\n                  version: '1.0'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              backend: 'file'\n            }\n          },\n          {\n            type: 'TrafficLog',\n            mesh: 'my-silly-mesh-name',\n            name: 'tl-cat-dog-donut-12',\n            sources: [\n              {\n                match: {\n                  service: 'web',\n                  version: '1.0'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            conf: {\n              backend: 'file'\n            }\n          }\n        ]\n      })\n      .onGet('/traffic-permissions').reply(200, {\n        items: [\n          {\n            type: 'TrafficPermission',\n            mesh: 'default',\n            name: 'tp-1',\n            sources: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'redis'\n                }\n              }\n            ]\n          },\n          {\n            type: 'TrafficPermission',\n            mesh: 'default',\n            name: 'tp-1234',\n            sources: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'redis'\n                }\n              }\n            ]\n          },\n          {\n            type: 'TrafficPermission',\n            mesh: 'default',\n            name: 'tp-alpha-tango-donut',\n            sources: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'redis'\n                }\n              }\n            ]\n          },\n          {\n            type: 'TrafficPermission',\n            mesh: 'helloworld',\n            name: 'tp-bravo-alpha-shiba',\n            sources: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'redis'\n                }\n              }\n            ]\n          }\n        ]\n      })\n      .onGet('/meshes/default/traffic-permissions').reply(200, {\n        items: [\n          {\n            type: 'TrafficPermission',\n            mesh: 'default',\n            name: 'tp-1',\n            sources: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'redis'\n                }\n              }\n            ]\n          },\n          {\n            type: 'TrafficPermission',\n            mesh: 'default',\n            name: 'tp-1234',\n            sources: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'redis'\n                }\n              }\n            ]\n          },\n          {\n            type: 'TrafficPermission',\n            mesh: 'default',\n            name: 'tp-alpha-tango-donut',\n            sources: [\n              {\n                match: {\n                  service: 'backend'\n                }\n              }\n            ],\n            destinations: [\n              {\n                match: {\n                  service: 'redis'\n                }\n              }\n            ]\n          }\n        ]\n      })\n      .onAny().passThrough()\n  }\n}\n"]}]}